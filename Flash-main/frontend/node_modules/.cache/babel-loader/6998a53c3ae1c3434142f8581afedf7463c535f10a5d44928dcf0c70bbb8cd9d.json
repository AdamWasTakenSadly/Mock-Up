{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\nvar parseDateTime = function (value) {\n  return value ? new Date(value) : value === '' ? null : value;\n};\n/**\n * Input component for entering a date and a time with timezone, using the browser locale\n */\nexport var DateTimeInput = function (_a) {\n  var className = _a.className,\n    defaultValue = _a.defaultValue,\n    _b = _a.format,\n    format = _b === void 0 ? formatDateTime : _b,\n    label = _a.label,\n    helperText = _a.helperText,\n    margin = _a.margin,\n    onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    source = _a.source,\n    resource = _a.resource,\n    _c = _a.parse,\n    parse = _c === void 0 ? parseDateTime : _c,\n    validate = _a.validate,\n    variant = _a.variant,\n    rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"label\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"source\", \"resource\", \"parse\", \"validate\", \"variant\"]);\n  var _d = useInput(__assign({\n      defaultValue: defaultValue,\n      format: format,\n      parse: parse,\n      onBlur: onBlur,\n      onChange: onChange,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _d.field,\n    fieldState = _d.fieldState,\n    formState = _d.formState,\n    id = _d.id,\n    isRequired = _d.isRequired;\n  var error = fieldState.error,\n    invalid = fieldState.invalid,\n    isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n  var renderHelperText = helperText !== false || (isTouched || isSubmitted) && invalid;\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"datetime-local\",\n    size: \"small\",\n    variant: variant,\n    margin: margin,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: renderHelperText ? React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }) : null,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: defaultInputLabelProps\n  }, sanitizeInputRestProps(rest)));\n};\nDateTimeInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nvar leftPad = function (nb) {\n  if (nb === void 0) {\n    nb = 2;\n  }\n  return function (value) {\n    return ('0'.repeat(nb) + value).slice(-nb);\n  };\n};\nvar leftPad4 = leftPad(4);\nvar leftPad2 = leftPad(2);\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n  var yyyy = leftPad4(value.getFullYear());\n  var MM = leftPad2(value.getMonth() + 1);\n  var dd = leftPad2(value.getDate());\n  var hh = leftPad2(value.getHours());\n  var mm = leftPad2(value.getMinutes());\n  return \"\".concat(yyyy, \"-\").concat(MM, \"-\").concat(dd, \"T\").concat(hh, \":\").concat(mm);\n};\n// yyyy-MM-ddThh:mm\nvar dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\nvar defaultInputLabelProps = {\n  shrink: true\n};\n/**\n * Converts a date from the dataProvider, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\nvar formatDateTime = function (value) {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  }\n  // valid dates should not be converted\n  if (dateTimeRegex.test(value)) {\n    return value;\n  }\n  return convertDateToString(new Date(value));\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","sanitizeInputRestProps","InputHelperText","parseDateTime","value","Date","DateTimeInput","_a","defaultValue","_b","format","formatDateTime","label","helperText","margin","onBlur","onChange","source","resource","_c","parse","validate","variant","rest","field","fieldState","formState","id","isRequired","invalid","isTouched","renderHelperText","isSubmitted","className","type","size","error","touched","message","InputLabelProps","defaultInputLabelProps","propTypes","oneOfType","string","bool","element","leftPad","nb","repeat","slice","leftPad4","leftPad2","convertDateToString","isNaN","getDate","yyyy","getFullYear","MM","getMonth","dd","hh","getHours","mm","getMinutes","dateTimeRegex","shrink","test"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\input\\DateTimeInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\nconst parseDateTime = (value: string) =>\n    value ? new Date(value) : value === '' ? null : value;\n\n/**\n * Input component for entering a date and a time with timezone, using the browser locale\n */\nexport const DateTimeInput = ({\n    className,\n    defaultValue,\n    format = formatDateTime,\n    label,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    source,\n    resource,\n    parse = parseDateTime,\n    validate,\n    variant,\n    ...rest\n}: DateTimeInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n    const renderHelperText =\n        helperText !== false || ((isTouched || isSubmitted) && invalid);\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"datetime-local\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                renderHelperText ? (\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                ) : null\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nDateTimeInput.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type DateTimeInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\nconst leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad4 = leftPad(4);\nconst leftPad2 = leftPad(2);\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const yyyy = leftPad4(value.getFullYear());\n    const MM = leftPad2(value.getMonth() + 1);\n    const dd = leftPad2(value.getDate());\n    const hh = leftPad2(value.getHours());\n    const mm = leftPad2(value.getMinutes());\n    return `${yyyy}-${MM}-${dd}T${hh}:${mm}`;\n};\n\n// yyyy-MM-ddThh:mm\nconst dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\n/**\n * Converts a date from the dataProvider, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\nconst formatDateTime = (value: string | Date) => {\n    // null, undefined and empty string values should not go through convertDateToString\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n    // valid dates should not be converted\n    if (dateTimeRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}