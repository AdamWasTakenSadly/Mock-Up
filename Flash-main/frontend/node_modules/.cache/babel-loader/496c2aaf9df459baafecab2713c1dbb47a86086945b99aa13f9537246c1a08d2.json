{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n/**\n * Converts a time string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as hh:mm\n * @return {Date}\n */\nvar parseTime = function (value) {\n  var _a, _b;\n  if (!value) return null;\n  var timeTokens = value.split(':').map(function (v) {\n    return parseInt(v);\n  });\n  var today = new Date();\n  today.setHours((_a = timeTokens[0]) !== null && _a !== void 0 ? _a : 0);\n  today.setMinutes((_b = timeTokens[1]) !== null && _b !== void 0 ? _b : 0);\n  return today;\n};\n/**\n * Form input to edit a time string value in the \"HH:mm\" format (e.g. '17:45'),\n * using the browser locale for the timezone.\n *\n * Renders a time picker or a text input depending on the browser.\n *\n * This component works with Date objects to handle the timezone using the browser locale.\n * You can still pass string values as long as those can be converted to a JavaScript Date object.\n *\n * @example\n * import { Edit, SimpleForm, TimeInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TimeInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nexport var TimeInput = function (_a) {\n  var className = _a.className,\n    defaultValue = _a.defaultValue,\n    _b = _a.format,\n    format = _b === void 0 ? formatTime : _b,\n    label = _a.label,\n    helperText = _a.helperText,\n    margin = _a.margin,\n    onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    source = _a.source,\n    resource = _a.resource,\n    _c = _a.parse,\n    parse = _c === void 0 ? parseTime : _c,\n    validate = _a.validate,\n    variant = _a.variant,\n    rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"label\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"source\", \"resource\", \"parse\", \"validate\", \"variant\"]);\n  var _d = useInput(__assign({\n      defaultValue: defaultValue,\n      format: format,\n      parse: parse,\n      onBlur: onBlur,\n      onChange: onChange,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _d.field,\n    fieldState = _d.fieldState,\n    formState = _d.formState,\n    id = _d.id,\n    isRequired = _d.isRequired;\n  var error = fieldState.error,\n    invalid = fieldState.invalid,\n    isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n  var renderHelperText = helperText !== false || (isTouched || isSubmitted) && invalid;\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"time\",\n    size: \"small\",\n    variant: variant,\n    margin: margin,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: renderHelperText ? React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }) : null,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: defaultInputLabelProps\n  }, sanitizeInputRestProps(rest)));\n};\nTimeInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nvar leftPad = function (nb) {\n  if (nb === void 0) {\n    nb = 2;\n  }\n  return function (value) {\n    return ('0'.repeat(nb) + value).slice(-nb);\n  };\n};\nvar leftPad2 = leftPad(2);\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized time (hh:mm), to be passed to an <input type=\"time\" />\n */\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n  var hh = leftPad2(value.getHours());\n  var mm = leftPad2(value.getMinutes());\n  return \"\".concat(hh, \":\").concat(mm);\n};\n// hh:mm\nvar timeRegex = /^\\d{2}:\\d{2}$/;\nvar defaultInputLabelProps = {\n  shrink: true\n};\n/**\n * Converts a date from the dataProvider, with timezone, to a time string\n * without timezone for use in an <input type=\"time\" />.\n *\n * @param {Date | String} value date string or object\n */\nvar formatTime = function (value) {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  }\n  // valid dates should not be converted\n  if (timeRegex.test(value)) {\n    return value;\n  }\n  return convertDateToString(new Date(value));\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","sanitizeInputRestProps","InputHelperText","parseTime","value","timeTokens","split","map","v","today","Date","setHours","setMinutes","TimeInput","_a","defaultValue","_b","format","formatTime","label","helperText","margin","onBlur","onChange","source","resource","_c","parse","validate","variant","rest","field","fieldState","formState","id","isRequired","invalid","isTouched","renderHelperText","isSubmitted","className","type","size","error","touched","message","InputLabelProps","defaultInputLabelProps","propTypes","oneOfType","string","bool","leftPad","nb","repeat","slice","leftPad2","convertDateToString","isNaN","getDate","hh","getHours","mm","getMinutes","timeRegex","shrink","test"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\input\\TimeInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Converts a time string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as hh:mm\n * @return {Date}\n */\nconst parseTime = (value: string) => {\n    if (!value) return null;\n    const timeTokens = value.split(':').map(v => parseInt(v));\n    const today = new Date();\n    today.setHours(timeTokens[0] ?? 0);\n    today.setMinutes(timeTokens[1] ?? 0);\n    return today;\n};\n\n/**\n * Form input to edit a time string value in the \"HH:mm\" format (e.g. '17:45'),\n * using the browser locale for the timezone.\n *\n * Renders a time picker or a text input depending on the browser.\n *\n * This component works with Date objects to handle the timezone using the browser locale.\n * You can still pass string values as long as those can be converted to a JavaScript Date object.\n *\n * @example\n * import { Edit, SimpleForm, TimeInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TimeInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nexport const TimeInput = ({\n    className,\n    defaultValue,\n    format = formatTime,\n    label,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    source,\n    resource,\n    parse = parseTime,\n    validate,\n    variant,\n    ...rest\n}: TimeInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    const renderHelperText =\n        helperText !== false || ((isTouched || isSubmitted) && invalid);\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"time\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                renderHelperText ? (\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                ) : null\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nTimeInput.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type TimeInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\nconst leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad2 = leftPad(2);\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized time (hh:mm), to be passed to an <input type=\"time\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const hh = leftPad2(value.getHours());\n    const mm = leftPad2(value.getMinutes());\n    return `${hh}:${mm}`;\n};\n\n// hh:mm\nconst timeRegex = /^\\d{2}:\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\n/**\n * Converts a date from the dataProvider, with timezone, to a time string\n * without timezone for use in an <input type=\"time\" />.\n *\n * @param {Date | String} value date string or object\n */\nconst formatTime = (value: string | Date) => {\n    // null, undefined and empty string values should not go through convertDateToString\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n    // valid dates should not be converted\n    if (timeRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}