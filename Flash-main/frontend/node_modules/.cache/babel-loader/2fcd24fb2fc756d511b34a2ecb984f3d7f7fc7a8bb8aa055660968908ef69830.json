{"ast":null,"code":"/*!\n * money.js / fx() v0.3\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function (root, undefined) {\n  var factory = function () {\n    // Create a safe reference to the money.js object for use below.\n    var fx = function (obj) {\n      return new fxWrapper(obj);\n    };\n\n    // Current version.\n    fx.version = '0.3.0';\n\n    /* --- Setup --- */\n\n    // fxSetup can be defined before loading money.js, to set the exchange rates and the base\n    // (and default from/to) currencies - or the rates can be loaded in later if needed.\n    var fxSetup = root.fxSetup || {\n      rates: {},\n      base: \"\"\n    };\n\n    // Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n    fx.rates = fxSetup.rates;\n\n    // Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n    fx.base = fxSetup.base;\n\n    // Default from / to currencies for conversion via fx.convert():\n    fx.settings = {\n      from: fxSetup.from || fx.base,\n      to: fxSetup.to || fx.base\n    };\n\n    /* --- Conversion --- */\n\n    // The base function of the library: converts a value from one currency to another\n    var convert = fx.convert = function (val, opts) {\n      // Convert arrays recursively\n      if (typeof val === 'object' && val.length) {\n        for (var i = 0; i < val.length; i++) {\n          val[i] = convert(val[i], opts);\n        }\n        return val;\n      }\n\n      // Make sure we gots some opts\n      opts = opts || {};\n\n      // We need to know the `from` and `to` currencies\n      if (!opts.from) opts.from = fx.settings.from;\n      if (!opts.to) opts.to = fx.settings.to;\n\n      // Multiple the value by the exchange rate\n      if (!!opts.rates) {\n        return val * getRatesCustom(opts.to, opts.from, opts.rates);\n      }\n      return val * getRate(opts.to, opts.from);\n    };\n\n    // Returns the exchange rate to `target` currency from `base` currency\n    var getRate = fx.getRate = function (to, from) {\n      // Save bytes in minified version\n      var rates = fx.rates;\n\n      // Make sure the base rate is in the rates object:\n      rates[fx.base] = 1;\n\n      // Throw an error if either rate isn't in the rates array\n      if (!rates[to] || !rates[from]) {\n        var msg = 'Cannot convert ' + from + ' to ' + to + ': ';\n        if (!rates[to] && !rates[from]) {\n          msg += 'exhange rates for both currencies are missing';\n        } else if (!rates[to]) {\n          msg += 'exhange rate for ' + to + ' is missing';\n        } else if (!rates[from]) {\n          msg += 'exhange rate for ' + from + ' is missing';\n        }\n        throw new Error(msg);\n      }\n\n      // If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n      if (from === fx.base) {\n        return rates[to];\n      }\n\n      // If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n      if (to === fx.base) {\n        return 1 / rates[from];\n      }\n\n      // Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n      // relative exchange rate between the two currencies\n      return rates[to] * (1 / rates[from]);\n    };\n\n    /* --- OOP wrapper and chaining --- */\n\n    // If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n    var fxWrapper = function (val) {\n      // Experimental: parse strings to pull out currency code and value:\n      if (typeof val === \"string\") {\n        this._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n        this._fx = val.replace(/([^A-Za-z])/g, \"\");\n      } else {\n        this._v = val;\n      }\n    };\n\n    // Expose `wrapper.prototype` as `fx.prototype`\n    var fxProto = fx.prototype = fxWrapper.prototype;\n\n    // fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n    fxProto.convert = function () {\n      var args = Array.prototype.slice.call(arguments);\n      if (typeof this._v !== 'undefined') {\n        args.unshift(this._v);\n      }\n      return convert.apply(fx, args);\n    };\n\n    // fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n    // `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n    fxProto.from = function (currency) {\n      var wrapped = fx(convert(this._v, {\n        from: currency,\n        to: fx.base\n      }));\n      wrapped._fx = fx.base;\n      return wrapped;\n    };\n\n    // fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n    fxProto.to = function (currency) {\n      return convert(this._v, {\n        from: this._fx ? this._fx : fx.settings.from,\n        to: currency\n      });\n    };\n    return fx;\n  };\n  /* --- Module Definition --- */\n\n  // Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n  // Otherwise, just add `fx` to the global object\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = factory();\n    }\n    exports.factory = factory;\n  } else if (typeof define === 'function' && define.amd) {\n    // Return the library as an AMD module:\n    define([], function () {\n      return factory();\n    });\n  } else {\n    // Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n    // Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n    fx.noConflict = function (previousFx) {\n      return function () {\n        // Reset the value of the root's `fx` variable:\n        root.fx = previousFx;\n        // Delete the noConflict function:\n        fx.noConflict = undefined;\n        // Return reference to the library to re-assign it:\n        return fx;\n      };\n    }(root.fx);\n\n    // Declare `fx` on the root (global/window) object:\n    root['fx'] = factory();\n  }\n\n  // Root will be `window` in browser or `global` on the server:\n})(this);","map":{"version":3,"names":["root","undefined","factory","fx","obj","fxWrapper","version","fxSetup","rates","base","settings","from","to","convert","val","opts","length","i","getRatesCustom","getRate","msg","Error","_v","parseFloat","replace","_fx","fxProto","prototype","args","Array","slice","call","arguments","unshift","apply","currency","wrapped","exports","module","define","amd","noConflict","previousFx"],"sources":["D:/Work/Mock-Up/Flash-main/frontend/node_modules/money/money.js"],"sourcesContent":["/*!\n * money.js / fx() v0.3\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function(root, undefined) {\n\tvar factory = function() {\n\t\t// Create a safe reference to the money.js object for use below.\n\t\tvar fx = function(obj) {\n\t\t\treturn new fxWrapper(obj);\n\t\t};\n\n\t\t// Current version.\n\t\tfx.version = '0.3.0';\n\n\n\t\t/* --- Setup --- */\n\n\t\t// fxSetup can be defined before loading money.js, to set the exchange rates and the base\n\t\t// (and default from/to) currencies - or the rates can be loaded in later if needed.\n\t\tvar fxSetup = root.fxSetup || {\n\t\t\trates : {},\n\t\t\tbase : \"\"\n\t\t};\n\n\t\t// Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\t\tfx.rates = fxSetup.rates;\n\n\t\t// Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\t\tfx.base = fxSetup.base;\n\n\t\t// Default from / to currencies for conversion via fx.convert():\n\t\tfx.settings = {\n\t\t\tfrom : fxSetup.from || fx.base,\n\t\t\tto : fxSetup.to || fx.base\n\t\t};\n\n\n\t\t/* --- Conversion --- */\n\n\t\t// The base function of the library: converts a value from one currency to another\n\t\tvar convert = fx.convert = function(val, opts) {\n\t\t\t// Convert arrays recursively\n\t\t\tif (typeof val === 'object' && val.length) {\n\t\t\t\tfor (var i = 0; i< val.length; i++ ) {\n\t\t\t\t\tval[i] = convert(val[i], opts);\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// Make sure we gots some opts\n\t\t\topts = opts || {};\n\n\t\t\t// We need to know the `from` and `to` currencies\n\t\t\tif( !opts.from ) opts.from = fx.settings.from;\n\t\t\tif( !opts.to ) opts.to = fx.settings.to;\n\n\t\t\t// Multiple the value by the exchange rate\n\t\t\tif ( !!opts.rates ) {\n\t\t\t\treturn val * getRatesCustom( opts.to, opts.from, opts.rates );\n\t\t\t}\n\t\t\treturn val * getRate( opts.to, opts.from );\n\t\t};\n\n\t\t// Returns the exchange rate to `target` currency from `base` currency\n\t\tvar getRate = fx.getRate = function(to, from) {\n\t\t\t// Save bytes in minified version\n\t\t\tvar rates = fx.rates;\n\n\t\t\t// Make sure the base rate is in the rates object:\n\t\t\trates[fx.base] = 1;\n\n\t\t\t// Throw an error if either rate isn't in the rates array\n\t\t\tif ( !rates[to] || !rates[from] ) {\n\t\t\t\tvar msg = 'Cannot convert ' + from + ' to ' + to + ': ';\n\n\t\t\t\tif ( !rates[to] && !rates[from] ) {\n\t\t\t\t\tmsg += 'exhange rates for both currencies are missing';\n\t\t\t\t} else if ( !rates[to] ) {\n\t\t\t\t\tmsg += 'exhange rate for ' + to + ' is missing';\n\t\t\t\t} else if ( !rates[from] ) {\n\t\t\t\t\tmsg += 'exhange rate for ' + from + ' is missing';\n\t\t\t\t}\n\n\t\t\t\tthrow new Error( msg );\n\t\t\t}\n\n\t\t\t// If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\t\t\tif ( from === fx.base ) {\n\t\t\t\treturn rates[to];\n\t\t\t}\n\n\t\t\t// If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\t\t\tif ( to === fx.base ) {\n\t\t\t\treturn 1 / rates[from];\n\t\t\t}\n\n\t\t\t// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n\t\t\t// relative exchange rate between the two currencies\n\t\t\treturn rates[to] * (1 / rates[from]);\n\t\t};\n\n\n\t\t/* --- OOP wrapper and chaining --- */\n\n\t\t// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\t\tvar fxWrapper = function(val) {\n\t\t\t// Experimental: parse strings to pull out currency code and value:\n\t\t\tif ( typeof\tval === \"string\" ) {\n\t\t\t\tthis._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n\t\t\t\tthis._fx = val.replace(/([^A-Za-z])/g, \"\");\n\t\t\t} else {\n\t\t\t\tthis._v = val;\n\t\t\t}\n\t\t};\n\n\t\t// Expose `wrapper.prototype` as `fx.prototype`\n\t\tvar fxProto = fx.prototype = fxWrapper.prototype;\n\n\t\t// fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\t\tfxProto.convert = function() {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tif (typeof this._v !== 'undefined') {\n\t\t\t\targs.unshift(this._v);\n\t\t\t}\n\t\t\treturn convert.apply(fx, args);\n\t\t};\n\n\t\t// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n\t\t// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\t\tfxProto.from = function(currency) {\n\t\t\tvar wrapped = fx(convert(this._v, {from: currency, to: fx.base}));\n\t\t\twrapped._fx = fx.base;\n\t\t\treturn wrapped;\n\t\t};\n\n\t\t// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\t\tfxProto.to = function(currency) {\n\t\t\treturn convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});\n\t\t};\n\n\t\treturn fx;\n\t};\n\t/* --- Module Definition --- */\n\n\t// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `fx` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = factory();\n\t\t}\n\t\texports.factory = factory;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn factory();\n\t\t});\n\t} else {\n\t\t// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n\t\t// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n\t\tfx.noConflict = (function(previousFx) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `fx` variable:\n\t\t\t\troot.fx = previousFx;\n\t\t\t\t// Delete the noConflict function:\n\t\t\t\tfx.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn fx;\n\t\t\t};\n\t\t})(root.fx);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['fx'] = factory();\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}