{"ast":null,"code":"import { useStore } from 'ra-core';\n/**\n * Read and update the theme mode (light or dark)\n *\n * @example\n * const [theme, setTheme] = useTheme('light');\n * const toggleTheme = () => {\n *    setTheme(theme === 'light' ? 'dark' : 'light');\n * };\n *\n * @example // legacy mode, stores the full theme object\n * // to be removed in v5\n * const [theme, setTheme] = useTheme({\n *    palette: {\n *       type: 'light',\n *   },\n * });\n */\nexport var useTheme = function (type) {\n  // FIXME: remove legacy mode in v5, and remove the RaThemeOptions type\n  var _a = useStore('theme', type),\n    theme = _a[0],\n    setter = _a[1];\n  return [theme, setter];\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAKlC;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,QAAQ,GAAG,UACpBC,IAAiC;EAEjC;EACM,SAAkBF,QAAQ,CAA6B,OAAO,EAAEE,IAAI,CAAC;IAApEC,KAAK;IAAEC,MAAM,QAAuD;EAC3E,OAAO,CAACD,KAAK,EAAEC,MAAM,CAAC;AAC1B,CAAC","names":["useStore","useTheme","type","theme","setter"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\layout\\Theme\\useTheme.ts"],"sourcesContent":["import { useStore } from 'ra-core';\nimport { RaThemeOptions, ThemeType } from './types';\n\nexport type ThemeSetter = (theme: ThemeType | RaThemeOptions) => void;\n\n/**\n * Read and update the theme mode (light or dark)\n *\n * @example\n * const [theme, setTheme] = useTheme('light');\n * const toggleTheme = () => {\n *    setTheme(theme === 'light' ? 'dark' : 'light');\n * };\n *\n * @example // legacy mode, stores the full theme object\n * // to be removed in v5\n * const [theme, setTheme] = useTheme({\n *    palette: {\n *       type: 'light',\n *   },\n * });\n */\nexport const useTheme = (\n    type?: ThemeType | RaThemeOptions\n): [ThemeType | RaThemeOptions, ThemeSetter] => {\n    // FIXME: remove legacy mode in v5, and remove the RaThemeOptions type\n    const [theme, setter] = useStore<ThemeType | RaThemeOptions>('theme', type);\n    return [theme, setter];\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}