{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageEye from '@mui/icons-material/RemoveRedEye';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useRecordContext, useCreatePath } from 'ra-core';\nimport isEqual from 'lodash/isEqual';\nimport { Button } from './Button';\n/**\n * Opens the Show view of a given record\n *\n * @example // basic usage\n * import { ShowButton, useRecordContext } from 'react-admin';\n *\n * const CommentShowButton = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ShowButton label=\"Show comment\" record={record} />\n *     );\n * };\n */\nvar ShowButton = function (props) {\n  var _a = props.icon,\n    icon = _a === void 0 ? defaultIcon : _a,\n    _b = props.label,\n    label = _b === void 0 ? 'ra.action.show' : _b,\n    recordProp = props.record,\n    resourceProp = props.resource,\n    _c = props.scrollToTop,\n    scrollToTop = _c === void 0 ? true : _c,\n    rest = __rest(props, [\"icon\", \"label\", \"record\", \"resource\", \"scrollToTop\"]);\n  var resource = useResourceContext(props);\n  var record = useRecordContext(props);\n  var createPath = useCreatePath();\n  if (!record) return null;\n  return React.createElement(Button, __assign({\n    component: Link,\n    to: createPath({\n      type: 'show',\n      resource: resource,\n      id: record.id\n    }),\n    state: scrollStates[String(scrollToTop)],\n    label: label,\n    onClick: stopPropagation\n  }, rest), icon);\n};\n// avoids using useMemo to get a constant value for the link state\nvar scrollStates = {\n  true: {\n    _scrollToTop: true\n  },\n  false: {}\n};\nvar defaultIcon = React.createElement(ImageEye, null);\n// useful to prevent click bubbling in a datagrid with rowClick\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\nShowButton.propTypes = {\n  icon: PropTypes.element,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  scrollToTop: PropTypes.bool\n};\nvar PureShowButton = memo(ShowButton, function (prevProps, nextProps) {\n  return prevProps.resource === nextProps.resource && (prevProps.record && nextProps.record ? prevProps.record.id === nextProps.record.id : prevProps.record == nextProps.record) &&\n  // eslint-disable-line eqeqeq\n  prevProps.label === nextProps.label && prevProps.disabled === nextProps.disabled && isEqual(prevProps.to, nextProps.to);\n});\nexport default PureShowButton;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAAsB,OAAO;AAC1C,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAEIC,kBAAkB,EAClBC,gBAAgB,EAChBC,aAAa,QACV,SAAS;AAChB,OAAOC,OAAO,MAAM,gBAAgB;AAEpC,SAASC,MAAM,QAAqB,UAAU;AAE9C;;;;;;;;;;;;;AAaA,IAAMC,UAAU,GAAG,UACfC,KAAkC;EAG9B,SAMAA,KAAK,KANa;IAAlBC,IAAI,mBAAGC,WAAW;IAClBC,KAKAH,KAAK,MALmB;IAAxBI,KAAK,mBAAG,gBAAgB;IAChBC,UAAU,GAIlBL,KAAK,OAJa;IACRM,YAAY,GAGtBN,KAAK,SAHiB;IACtBO,KAEAP,KAAK,YAFa;IAAlBQ,WAAW,mBAAG,IAAI;IACfC,IAAI,UACPT,KAAK,EAPH,sDAOL,CADU;EAEX,IAAMU,QAAQ,GAAGhB,kBAAkB,CAACM,KAAK,CAAC;EAC1C,IAAMW,MAAM,GAAGhB,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMY,UAAU,GAAGhB,aAAa,EAAE;EAClC,IAAI,CAACe,MAAM,EAAE,OAAO,IAAI;EACxB,OACItB,oBAACS,MAAM;IACHe,SAAS,EAAEpB,IAAI;IACfqB,EAAE,EAAEF,UAAU,CAAC;MAAEG,IAAI,EAAE,MAAM;MAAEL,QAAQ;MAAEM,EAAE,EAAEL,MAAM,CAACK;IAAE,CAAE,CAAC;IACzDC,KAAK,EAAEC,YAAY,CAACC,MAAM,CAACX,WAAW,CAAC,CAAC;IACxCJ,KAAK,EAAEA,KAAK;IACZgB,OAAO,EAAEC;EAAe,GACnBZ,IAAY,GAEhBR,IAAI,CACA;AAEjB,CAAC;AAED;AACA,IAAMiB,YAAY,GAAG;EACjBI,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAI,CAAE;EAC5BC,KAAK,EAAE;CACV;AAED,IAAMtB,WAAW,GAAGb,oBAACG,QAAQ,OAAG;AAEhC;AACA,IAAM6B,eAAe,GAAG,WAAC;EAAI,QAAC,CAACA,eAAe,EAAE;AAAnB,CAAmB;AAehDtB,UAAU,CAAC0B,SAAS,GAAG;EACnBxB,IAAI,EAAEV,SAAS,CAACmC,OAAO;EACvBtB,KAAK,EAAEb,SAAS,CAACoC,MAAM;EACvBhB,MAAM,EAAEpB,SAAS,CAACqC,GAAG;EACrBpB,WAAW,EAAEjB,SAAS,CAACsC;CAC1B;AAED,IAAMC,cAAc,GAAGxC,IAAI,CACvBS,UAAU,EACV,UAACgC,SAAS,EAAEC,SAAS;EACjB,gBAAS,CAACtB,QAAQ,KAAKsB,SAAS,CAACtB,QAAQ,KACxCqB,SAAS,CAACpB,MAAM,IAAIqB,SAAS,CAACrB,MAAM,GAC/BoB,SAAS,CAACpB,MAAM,CAACK,EAAE,KAAKgB,SAAS,CAACrB,MAAM,CAACK,EAAE,GAC3Ce,SAAS,CAACpB,MAAM,IAAIqB,SAAS,CAACrB,MAAM,CAAC;EAAI;EAC/CoB,SAAS,CAAC3B,KAAK,KAAK4B,SAAS,CAAC5B,KAAK,IACnC2B,SAAS,CAACE,QAAQ,KAAKD,SAAS,CAACC,QAAQ,IACzCpC,OAAO,CAACkC,SAAS,CAACjB,EAAE,EAAEkB,SAAS,CAAClB,EAAE,CAAC;AANnC,CAMmC,CAC1C;AAED,eAAegB,cAAc","names":["React","memo","PropTypes","ImageEye","Link","useResourceContext","useRecordContext","useCreatePath","isEqual","Button","ShowButton","props","icon","defaultIcon","_b","label","recordProp","resourceProp","_c","scrollToTop","rest","resource","record","createPath","component","to","type","id","state","scrollStates","String","onClick","stopPropagation","true","_scrollToTop","false","propTypes","element","string","any","bool","PureShowButton","prevProps","nextProps","disabled"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\button\\ShowButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageEye from '@mui/icons-material/RemoveRedEye';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\nimport isEqual from 'lodash/isEqual';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Show view of a given record\n *\n * @example // basic usage\n * import { ShowButton, useRecordContext } from 'react-admin';\n *\n * const CommentShowButton = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ShowButton label=\"Show comment\" record={record} />\n *     );\n * };\n */\nconst ShowButton = <RecordType extends RaRecord = any>(\n    props: ShowButtonProps<RecordType>\n) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.show',\n        record: recordProp,\n        resource: resourceProp,\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    if (!record) return null;\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'show', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ImageEye />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props<RecordType extends RaRecord = any> {\n    icon?: ReactElement;\n    label?: string;\n    record?: RecordType;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type ShowButtonProps<RecordType extends RaRecord = any> = Props<\n    RecordType\n> &\n    ButtonProps;\n\nShowButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    scrollToTop: PropTypes.bool,\n};\n\nconst PureShowButton = memo(\n    ShowButton,\n    (prevProps, nextProps) =>\n        prevProps.resource === nextProps.resource &&\n        (prevProps.record && nextProps.record\n            ? prevProps.record.id === nextProps.record.id\n            : prevProps.record == nextProps.record) && // eslint-disable-line eqeqeq\n        prevProps.label === nextProps.label &&\n        prevProps.disabled === nextProps.disabled &&\n        isEqual(prevProps.to, nextProps.to)\n);\n\nexport default PureShowButton;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}