{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { useReference, ResourceContextProvider, RecordContextProvider, useRecordContext, useCreatePath, useGetRecordRepresentation, useResourceDefinition, useTranslate } from 'ra-core';\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport var ReferenceField = function (props) {\n  var source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var id = get(record, source);\n  var translate = useTranslate();\n  return id == null ? emptyText ? React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, emptyText && translate(emptyText, {\n    _: emptyText\n  })) : null : React.createElement(NonEmptyReferenceField, __assign({}, rest, {\n    emptyText: emptyText,\n    record: record,\n    id: id\n  }));\n};\nReferenceField.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  // @ts-ignore\n  link: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]).isRequired\n};\nReferenceField.defaultProps = {\n  link: 'edit'\n};\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\nexport var NonEmptyReferenceField = function (_a) {\n  var children = _a.children,\n    id = _a.id,\n    reference = _a.reference,\n    queryOptions = _a.queryOptions,\n    link = _a.link,\n    props = __rest(_a, [\"children\", \"id\", \"reference\", \"queryOptions\", \"link\"]);\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(PureReferenceFieldView, __assign({\n    reference: reference\n  }, props, useReference({\n    reference: reference,\n    id: id,\n    options: queryOptions\n  }), {\n    resourceLinkPath: link\n  }), children));\n};\n// useful to prevent click bubbling in a datagrid with rowClick\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\nexport var ReferenceFieldView = function (props) {\n  var children = props.children,\n    className = props.className,\n    emptyText = props.emptyText,\n    error = props.error,\n    isLoading = props.isLoading,\n    reference = props.reference,\n    referenceRecord = props.referenceRecord,\n    resourceLinkPath = props.resourceLinkPath,\n    sx = props.sx;\n  var getRecordRepresentation = useGetRecordRepresentation(reference);\n  var translate = useTranslate();\n  var createPath = useCreatePath();\n  var resourceDefinition = useResourceDefinition({\n    resource: reference\n  });\n  if (error) {\n    return (/* eslint-disable jsx-a11y/role-supports-aria-props */\n      React.createElement(ErrorIcon, {\n        \"aria-errormessage\": error.message ? error.message : error,\n        role: \"presentation\",\n        color: \"error\",\n        fontSize: \"small\"\n      })\n      /* eslint-enable */\n    );\n  }\n\n  if (isLoading) {\n    return React.createElement(LinearProgress, null);\n  }\n  if (!referenceRecord) {\n    return emptyText ? React.createElement(React.Fragment, null, emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var link = resourceLinkPath === false || resourceLinkPath === 'edit' && !resourceDefinition.hasEdit || resourceLinkPath === 'show' && !resourceDefinition.hasShow ? false : createPath({\n    resource: reference,\n    id: referenceRecord.id,\n    type: typeof resourceLinkPath === 'function' ? resourceLinkPath(referenceRecord, reference) : resourceLinkPath\n  });\n  var child = children || React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, getRecordRepresentation(referenceRecord));\n  if (link) {\n    return React.createElement(Root, {\n      className: className,\n      sx: sx\n    }, React.createElement(RecordContextProvider, {\n      value: referenceRecord\n    }, React.createElement(Link, {\n      to: link,\n      className: ReferenceFieldClasses.link,\n      onClick: stopPropagation\n    }, child)));\n  }\n  return React.createElement(RecordContextProvider, {\n    value: referenceRecord\n  }, child);\n};\nReferenceFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  isLoading: PropTypes.bool,\n  record: PropTypes.any,\n  reference: PropTypes.string,\n  referenceRecord: PropTypes.any,\n  resource: PropTypes.string,\n  // @ts-ignore\n  resourceLinkPath: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]).isRequired,\n  source: PropTypes.string,\n  translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool])\n};\nvar PureReferenceFieldView = genericMemo(ReferenceFieldView);\nvar PREFIX = 'RaReferenceField';\nexport var ReferenceFieldClasses = {\n  link: \"\".concat(PREFIX, \"-link\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    lineHeight: 'initial'\n  }, _b[\"& .\".concat(ReferenceFieldClasses.link)] = {\n    '& > *': {\n      color: theme.palette.primary.main\n    }\n  }, _b;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,UAAU,QAAiB,eAAe;AACnD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SACIC,YAAY,EAGZC,uBAAuB,EACvBC,qBAAqB,EACrBC,gBAAgB,EAChBC,aAAa,EAEbC,0BAA0B,EAC1BC,qBAAqB,EACrBC,YAAY,QAET,SAAS;AAGhB,SAASC,cAAc,QAAQ,WAAW;AAC1C,SAASC,IAAI,QAAQ,SAAS;AAC9B,SAAqBC,cAAc,QAAQ,SAAS;AACpD,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAO,IAAMC,cAAc,GAAG,UAI1BC,KAA2D;EAEnD,UAAM,GAAyBA,KAAK,OAA9B;IAAEC,SAAS,GAAcD,KAAK,UAAnB;IAAKE,IAAI,UAAKF,KAAK,EAAtC,uBAA8B,CAAF;EAClC,IAAMG,MAAM,GAAGb,gBAAgB,CAAaU,KAAK,CAAC;EAClD,IAAMI,EAAE,GAAGrB,GAAG,CAACoB,MAAM,EAAEE,MAAM,CAAC;EAC9B,IAAMC,SAAS,GAAGZ,YAAY,EAAE;EAEhC,OAAOU,EAAE,IAAI,IAAI,GACbH,SAAS,GACLpB,oBAACG,UAAU;IAACuB,SAAS,EAAC,MAAM;IAACC,OAAO,EAAC;EAAO,GACvCP,SAAS,IAAIK,SAAS,CAACL,SAAS,EAAE;IAAEQ,CAAC,EAAER;EAAS,CAAE,CAAC,CAC3C,GACb,IAAI,GAERpB,oBAAC6B,sBAAsB,eACfR,IAAI;IACRD,SAAS,EAAEA,SAAS;IACpBE,MAAM,EAAEA,MAAM;IACdC,EAAE,EAAEA;EAAgB,GAE3B;AACL,CAAC;AAEDL,cAAc,CAACY,SAAS,GAAG;EACvBC,QAAQ,EAAE9B,SAAS,CAAC+B,IAAI;EACxBC,SAAS,EAAEhC,SAAS,CAACiC,MAAM;EAC3BC,aAAa,EAAElC,SAAS,CAACiC,MAAM;EAC/BE,eAAe,EAAEnC,SAAS,CAACiC,MAAM;EACjCG,KAAK,EAAErB,cAAc,CAACqB,KAAK;EAC3Bf,MAAM,EAAErB,SAAS,CAACqC,GAAG;EACrBC,SAAS,EAAEtC,SAAS,CAACiC,MAAM,CAACM,UAAU;EACtCC,QAAQ,EAAExC,SAAS,CAACiC,MAAM;EAC1BQ,MAAM,EAAEzC,SAAS,CAACiC,MAAM;EACxBS,WAAW,EAAE3B,cAAc,CAAC2B,WAAW;EACvCnB,MAAM,EAAEvB,SAAS,CAACiC,MAAM,CAACM,UAAU;EACnCI,eAAe,EAAE3C,SAAS,CAAC4C,SAAS,CAAC,CAAC5C,SAAS,CAAC6C,IAAI,EAAE7C,SAAS,CAAC8C,IAAI,CAAC,CAAC;EACtE;EACAC,IAAI,EAAE/C,SAAS,CAAC4C,SAAS,CAAC,CACtB5C,SAAS,CAACiC,MAAM,EAChBjC,SAAS,CAAC8C,IAAI,EACd9C,SAAS,CAAC6C,IAAI,CACjB,CAAC,CAACN;CACN;AAEDtB,cAAc,CAAC+B,YAAY,GAAG;EAC1BD,IAAI,EAAE;CACT;AAiBD;;;;AAIA,OAAO,IAAMnB,sBAAsB,GAAG,UAGpCqB,EASD;EARG,YAAQ;IACR3B,EAAE;IACFgB,SAAS;IACTY,YAAY;IACZH,IAAI;IACD7B,KAAK,cANV,uDAOD,CADW;EAIR,OACInB,oBAACO,uBAAuB;IAAC6C,KAAK,EAAEb;EAAS,GAErCvC,oBAACqD,sBAAsB;IACnBd,SAAS,EAAEA;EAAS,GAChBpB,KAAK,EACLb,YAAY,CAAsB;IAClCiC,SAAS;IACThB,EAAE;IACF+B,OAAO,EAAEH;GACZ,CAAC;IACFI,gBAAgB,EAAEP;EAAI,IAErBjB,QAAQ,CACY,CACH;AAElC,CAAC;AAED;AACA,IAAMyB,eAAe,GAAG,WAAC;EAAI,QAAC,CAACA,eAAe,EAAE;AAAnB,CAAmB;AAEhD,OAAO,IAAMC,kBAAkB,GAAG,UAG9BtC,KAA0C;EAGtC,YAAQ,GASRA,KAAK,SATG;IACRc,SAAS,GAQTd,KAAK,UARI;IACTC,SAAS,GAOTD,KAAK,UAPI;IACTuC,KAAK,GAMLvC,KAAK,MANA;IACLwC,SAAS,GAKTxC,KAAK,UALI;IACToB,SAAS,GAITpB,KAAK,UAJI;IACTyC,eAAe,GAGfzC,KAAK,gBAHU;IACfoC,gBAAgB,GAEhBpC,KAAK,iBAFW;IAChB0C,EAAE,GACF1C,KAAK,GADH;EAEN,IAAM2C,uBAAuB,GAAGnD,0BAA0B,CAAC4B,SAAS,CAAC;EACrE,IAAMd,SAAS,GAAGZ,YAAY,EAAE;EAChC,IAAMkD,UAAU,GAAGrD,aAAa,EAAE;EAClC,IAAMsD,kBAAkB,GAAGpD,qBAAqB,CAAC;IAAE6B,QAAQ,EAAEF;EAAS,CAAE,CAAC;EAEzE,IAAImB,KAAK,EAAE;IACP,OACI;MACA1D,oBAACK,SAAS;QAAA,qBACaqD,KAAK,CAACO,OAAO,GAAGP,KAAK,CAACO,OAAO,GAAGP,KAAK;QACxDQ,IAAI,EAAC,cAAc;QACnBC,KAAK,EAAC,OAAO;QACbC,QAAQ,EAAC;MAAO;MAEpB;IAAA;;;EAGR,IAAIT,SAAS,EAAE;IACX,OAAO3D,oBAACc,cAAc,OAAG;;EAE7B,IAAI,CAAC8C,eAAe,EAAE;IAClB,OAAOxC,SAAS,GACZpB,0CAAGoB,SAAS,IAAIK,SAAS,CAACL,SAAS,EAAE;MAAEQ,CAAC,EAAER;IAAS,CAAE,CAAC,CAAI,GAC1D,IAAI;;EAGZ,IAAM4B,IAAI,GACNO,gBAAgB,KAAK,KAAK,IACzBA,gBAAgB,KAAK,MAAM,IAAI,CAACS,kBAAkB,CAACK,OAAQ,IAC3Dd,gBAAgB,KAAK,MAAM,IAAI,CAACS,kBAAkB,CAACM,OAAQ,GACtD,KAAK,GACLP,UAAU,CAAC;IACPtB,QAAQ,EAAEF,SAAS;IACnBhB,EAAE,EAAEqC,eAAe,CAACrC,EAAE;IACtBgD,IAAI,EACA,OAAOhB,gBAAgB,KAAK,UAAU,GAChCA,gBAAgB,CAACK,eAAe,EAAErB,SAAS,CAAC,GAC5CgB;GACb,CAAC;EAEZ,IAAIiB,KAAK,GAAGzC,QAAQ,IAChB/B,oBAACG,UAAU;IAACuB,SAAS,EAAC,MAAM;IAACC,OAAO,EAAC;EAAO,GACvCmC,uBAAuB,CAACF,eAAe,CAAC,CAEhD;EAED,IAAIZ,IAAI,EAAE;IACN,OACIhD,oBAACyE,IAAI;MAACxC,SAAS,EAAEA,SAAS;MAAE4B,EAAE,EAAEA;IAAE,GAC9B7D,oBAACQ,qBAAqB;MAAC4C,KAAK,EAAEQ;IAAe,GACzC5D,oBAACe,IAAI;MACD2D,EAAE,EAAE1B,IAAI;MACRf,SAAS,EAAE0C,qBAAqB,CAAC3B,IAAI;MACrC4B,OAAO,EAAEpB;IAAe,GAEvBgB,KAAK,CACH,CACa,CACrB;;EAIf,OACIxE,oBAACQ,qBAAqB;IAAC4C,KAAK,EAAEQ;EAAe,GACxCY,KAAK,CACc;AAEhC,CAAC;AAEDf,kBAAkB,CAAC3B,SAAS,GAAG;EAC3BC,QAAQ,EAAE9B,SAAS,CAAC4E,OAAO;EAC3B5C,SAAS,EAAEhC,SAAS,CAACiC,MAAM;EAC3ByB,SAAS,EAAE1D,SAAS,CAAC8C,IAAI;EACzBzB,MAAM,EAAErB,SAAS,CAACqC,GAAG;EACrBC,SAAS,EAAEtC,SAAS,CAACiC,MAAM;EAC3B0B,eAAe,EAAE3D,SAAS,CAACqC,GAAG;EAC9BG,QAAQ,EAAExC,SAAS,CAACiC,MAAM;EAC1B;EACAqB,gBAAgB,EAAEtD,SAAS,CAAC4C,SAAS,CAAC,CAClC5C,SAAS,CAACiC,MAAM,EAChBjC,SAAS,CAAC8C,IAAI,EACd9C,SAAS,CAAC6C,IAAI,CACjB,CAAC,CAACN,UAAU;EACbhB,MAAM,EAAEvB,SAAS,CAACiC,MAAM;EACxBU,eAAe,EAAE3C,SAAS,CAAC4C,SAAS,CAAC,CAAC5C,SAAS,CAAC6C,IAAI,EAAE7C,SAAS,CAAC8C,IAAI,CAAC;CACxE;AAeD,IAAMM,sBAAsB,GAAGpC,WAAW,CAACwC,kBAAkB,CAAC;AAE9D,IAAMqB,MAAM,GAAG,kBAAkB;AAEjC,OAAO,IAAMH,qBAAqB,GAAG;EACjC3B,IAAI,EAAE,UAAG8B,MAAM;CAClB;AAED,IAAML,IAAI,GAAGrE,MAAM,CAAC,MAAM,EAAE;EACxB2E,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,UAAC7D,KAAK,EAAE8D,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAChC,EAAS;;MAAPiC,KAAK;EAAO;IACdC,UAAU,EAAE;KACZC,GAAC,aAAMV,qBAAqB,CAAC3B,IAAI,CAAE,IAAG;IAClC,OAAO,EAAE;MACLmB,KAAK,EAAEgB,KAAK,CAACG,OAAO,CAACC,OAAO,CAACC;;GAEpC;AANa,CAOhB,CAAC","names":["React","PropTypes","get","Typography","styled","ErrorIcon","useReference","ResourceContextProvider","RecordContextProvider","useRecordContext","useCreatePath","useGetRecordRepresentation","useResourceDefinition","useTranslate","LinearProgress","Link","fieldPropTypes","genericMemo","ReferenceField","props","emptyText","rest","record","id","source","translate","component","variant","_","NonEmptyReferenceField","propTypes","children","node","className","string","cellClassName","headerClassName","label","any","reference","isRequired","resource","sortBy","sortByOrder","translateChoice","oneOfType","func","bool","link","defaultProps","_a","queryOptions","value","PureReferenceFieldView","options","resourceLinkPath","stopPropagation","ReferenceFieldView","error","isLoading","referenceRecord","sx","getRecordRepresentation","createPath","resourceDefinition","message","role","color","fontSize","hasEdit","hasShow","type","child","Root","to","ReferenceFieldClasses","onClick","element","PREFIX","name","overridesResolver","styles","root","theme","lineHeight","_b","palette","primary","main"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\field\\ReferenceField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport {\n    useReference,\n    UseReferenceResult,\n    LinkToType,\n    ResourceContextProvider,\n    RecordContextProvider,\n    useRecordContext,\n    useCreatePath,\n    Identifier,\n    useGetRecordRepresentation,\n    useResourceDefinition,\n    useTranslate,\n    RaRecord,\n} from 'ra-core';\nimport { UseQueryOptions } from 'react-query';\n\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport const ReferenceField = <\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: ReferenceFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const { source, emptyText, ...rest } = props;\n    const record = useRecordContext<RecordType>(props);\n    const id = get(record, source);\n    const translate = useTranslate();\n\n    return id == null ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null\n    ) : (\n        <NonEmptyReferenceField<RecordType, ReferenceRecordType>\n            {...rest}\n            emptyText={emptyText}\n            record={record}\n            id={id as Identifier}\n        />\n    );\n};\n\nReferenceField.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cellClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    // @ts-ignore\n    link: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]).isRequired,\n};\n\nReferenceField.defaultProps = {\n    link: 'edit',\n};\n\nexport interface ReferenceFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n> extends Omit<FieldProps<RecordType>, 'source'>,\n        Required<Pick<FieldProps<RecordType>, 'source'>> {\n    children?: ReactNode;\n    queryOptions?: UseQueryOptions<ReferenceRecordType[], Error> & {\n        meta?: any;\n    };\n    reference: string;\n    translateChoice?: Function | boolean;\n    link?: LinkToType<ReferenceRecordType>;\n    sx?: SxProps;\n}\n\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\nexport const NonEmptyReferenceField = <\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n>({\n    children,\n    id,\n    reference,\n    queryOptions,\n    link,\n    ...props\n}: Omit<ReferenceFieldProps<RecordType, ReferenceRecordType>, 'source'> & {\n    id: Identifier;\n}) => {\n    return (\n        <ResourceContextProvider value={reference}>\n            {/* @ts-ignore */}\n            <PureReferenceFieldView<RecordType, ReferenceRecordType>\n                reference={reference}\n                {...props}\n                {...useReference<ReferenceRecordType>({\n                    reference,\n                    id,\n                    options: queryOptions,\n                })}\n                resourceLinkPath={link}\n            >\n                {children}\n            </PureReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nexport const ReferenceFieldView = <\n    RecordType extends Record<string, any> = Record<string, any>\n>(\n    props: ReferenceFieldViewProps<RecordType>\n) => {\n    const {\n        children,\n        className,\n        emptyText,\n        error,\n        isLoading,\n        reference,\n        referenceRecord,\n        resourceLinkPath,\n        sx,\n    } = props;\n    const getRecordRepresentation = useGetRecordRepresentation(reference);\n    const translate = useTranslate();\n    const createPath = useCreatePath();\n    const resourceDefinition = useResourceDefinition({ resource: reference });\n\n    if (error) {\n        return (\n            /* eslint-disable jsx-a11y/role-supports-aria-props */\n            <ErrorIcon\n                aria-errormessage={error.message ? error.message : error}\n                role=\"presentation\"\n                color=\"error\"\n                fontSize=\"small\"\n            />\n            /* eslint-enable */\n        );\n    }\n    if (isLoading) {\n        return <LinearProgress />;\n    }\n    if (!referenceRecord) {\n        return emptyText ? (\n            <>{emptyText && translate(emptyText, { _: emptyText })}</>\n        ) : null;\n    }\n\n    const link =\n        resourceLinkPath === false ||\n        (resourceLinkPath === 'edit' && !resourceDefinition.hasEdit) ||\n        (resourceLinkPath === 'show' && !resourceDefinition.hasShow)\n            ? false\n            : createPath({\n                  resource: reference,\n                  id: referenceRecord.id,\n                  type:\n                      typeof resourceLinkPath === 'function'\n                          ? resourceLinkPath(referenceRecord, reference)\n                          : resourceLinkPath,\n              });\n\n    let child = children || (\n        <Typography component=\"span\" variant=\"body2\">\n            {getRecordRepresentation(referenceRecord)}\n        </Typography>\n    );\n\n    if (link) {\n        return (\n            <Root className={className} sx={sx}>\n                <RecordContextProvider value={referenceRecord}>\n                    <Link\n                        to={link}\n                        className={ReferenceFieldClasses.link}\n                        onClick={stopPropagation}\n                    >\n                        {child}\n                    </Link>\n                </RecordContextProvider>\n            </Root>\n        );\n    }\n\n    return (\n        <RecordContextProvider value={referenceRecord}>\n            {child}\n        </RecordContextProvider>\n    );\n};\n\nReferenceFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    isLoading: PropTypes.bool,\n    record: PropTypes.any,\n    reference: PropTypes.string,\n    referenceRecord: PropTypes.any,\n    resource: PropTypes.string,\n    // @ts-ignore\n    resourceLinkPath: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]).isRequired,\n    source: PropTypes.string,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n};\n\nexport interface ReferenceFieldViewProps<\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n> extends FieldProps<RecordType>,\n        UseReferenceResult {\n    children?: ReactNode;\n    reference: string;\n    resource?: string;\n    translateChoice?: Function | boolean;\n    resourceLinkPath?: LinkToType<ReferenceRecordType>;\n    sx?: SxProps;\n}\n\nconst PureReferenceFieldView = genericMemo(ReferenceFieldView);\n\nconst PREFIX = 'RaReferenceField';\n\nexport const ReferenceFieldClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    lineHeight: 'initial',\n    [`& .${ReferenceFieldClasses.link}`]: {\n        '& > *': {\n            color: theme.palette.primary.main,\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}