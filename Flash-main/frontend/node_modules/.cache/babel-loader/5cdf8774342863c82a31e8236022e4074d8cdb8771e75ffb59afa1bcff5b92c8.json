{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useChoices, useRecordContext, useTranslate } from 'ra-core';\nimport { Typography } from '@mui/material';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nvar SelectFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    choices = props.choices,\n    optionValue = props.optionValue,\n    optionText = props.optionText,\n    translateChoice = props.translateChoice,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var _a = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _a.getChoiceText,\n    getChoiceValue = _a.getChoiceValue;\n  var translate = useTranslate();\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n};\nSelectFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nSelectFieldImpl.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nSelectFieldImpl.displayName = 'SelectFieldImpl';\nexport var SelectField = genericMemo(SelectFieldImpl);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAEIC,UAAU,EACVC,gBAAgB,EAChBC,YAAY,QACT,SAAS;AAChB,SAASC,UAAU,QAAyB,eAAe;AAE3D,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAAqBC,cAAc,QAAQ,SAAS;AACpD,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,IAAMC,eAAe,GAAG,UAGpBC,KAAmC;EAG/B,aAAS,GAQTA,KAAK,UARI;IACTC,SAAS,GAOTD,KAAK,UAPI;IACTE,MAAM,GAMNF,KAAK,OANC;IACNG,OAAO,GAKPH,KAAK,QALE;IACPI,WAAW,GAIXJ,KAAK,YAJM;IACXK,UAAU,GAGVL,KAAK,WAHK;IACVM,eAAe,GAEfN,KAAK,gBAFU;IACZO,IAAI,UACPP,KAAK,EATH,+FASL,CADU;EAEX,IAAMQ,MAAM,GAAGf,gBAAgB,CAACO,KAAK,CAAC;EACtC,IAAMS,KAAK,GAAGlB,GAAG,CAACiB,MAAM,EAAEN,MAAM,CAAC;EAC3B,SAAoCV,UAAU,CAAC;MACjDa,UAAU;MACVD,WAAW;MACXE,eAAe;KAClB,CAAC;IAJMI,aAAa;IAAEC,cAAc,oBAInC;EACF,IAAMC,SAAS,GAAGlB,YAAY,EAAE;EAEhC,IAAMmB,MAAM,GAAGV,OAAO,CAACW,IAAI,CAAC,gBAAM;IAAI,qBAAc,CAACD,MAAM,CAAC,KAAKJ,KAAK;EAAhC,CAAgC,CAAC;EAEvE,IAAI,CAACI,MAAM,EAAE;IACT,OAAOZ,SAAS,GACZZ,oBAACM,UAAU;MACPoB,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBrB,sBAAsB,CAACW,IAAI,CAAC,GAE/BN,SAAS,IAAIW,SAAS,CAACX,SAAS,EAAE;MAAEiB,CAAC,EAAEjB;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,IAAIkB,UAAU,GAAGT,aAAa,CAACG,MAAM,CAAC;EAEtC,OACIxB,oBAACM,UAAU;IACPoB,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfC,SAAS,EAAEA;EAAS,GAChBrB,sBAAsB,CAACW,IAAI,CAAC,GAE/BY,UAAU,CACF;AAErB,CAAC;AAEDpB,eAAe,CAACqB,SAAS,kCAElBzB,UAAU,CAACyB,SAAS,GACpBvB,cAAc;EACjBM,OAAO,EAAEb,SAAS,CAAC+B,OAAO,CAAC/B,SAAS,CAACgC,MAAM,CAAC,CAACC,UAAU;EACvDlB,UAAU,EAAEf,SAAS,CAACkC,SAAS,CAAC,CAC5BlC,SAAS,CAACmC,MAAM,EAChBnC,SAAS,CAACoC,IAAI,EACdpC,SAAS,CAACqC,OAAO,CACpB,CAAC;EACFvB,WAAW,EAAEd,SAAS,CAACmC,MAAM;EAC7BnB,eAAe,EAAEhB,SAAS,CAACsC;AAAI,EAClC;AAED7B,eAAe,CAAC8B,YAAY,GAAG;EAC3BxB,UAAU,EAAE,MAAM;EAClBD,WAAW,EAAE,IAAI;EACjBE,eAAe,EAAE;CACpB;AACDP,eAAe,CAAC+B,WAAW,GAAG,iBAAiB;AAE/C,OAAO,IAAMC,WAAW,GAAGjC,WAAW,CAACC,eAAe,CAAC","names":["React","PropTypes","get","useChoices","useRecordContext","useTranslate","Typography","sanitizeFieldRestProps","fieldPropTypes","genericMemo","SelectFieldImpl","props","emptyText","source","choices","optionValue","optionText","translateChoice","rest","record","value","getChoiceText","getChoiceValue","translate","choice","find","component","variant","className","_","choiceText","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","defaultProps","displayName","SelectField"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\field\\SelectField.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport {\n    ChoicesProps,\n    useChoices,\n    useRecordContext,\n    useTranslate,\n} from 'ra-core';\nimport { Typography, TypographyProps } from '@mui/material';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nconst SelectFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: SelectFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        source,\n        choices,\n        optionValue,\n        optionText,\n        translateChoice,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n    const translate = useTranslate();\n\n    const choice = choices.find(choice => getChoiceValue(choice) === value);\n\n    if (!choice) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    let choiceText = getChoiceText(choice);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {choiceText}\n        </Typography>\n    );\n};\n\nSelectFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectFieldImpl.defaultProps = {\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\nSelectFieldImpl.displayName = 'SelectFieldImpl';\n\nexport const SelectField = genericMemo(SelectFieldImpl);\n\nexport interface SelectFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends ChoicesProps,\n        FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}