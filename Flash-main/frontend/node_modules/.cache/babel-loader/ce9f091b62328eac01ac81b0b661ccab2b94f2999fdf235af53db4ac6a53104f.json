{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useInfiniteGetList } from '../../dataProvider';\nimport { defaultExporter } from '../../export';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n/**\n * Prepare data for the InfiniteList view\n *\n * @param {Object} props The props passed to the InfiniteList component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useInfiniteListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useInfiniteListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport var useInfiniteListController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _a = props.debounce,\n    debounce = _a === void 0 ? 500 : _a,\n    disableAuthentication = props.disableAuthentication,\n    disableSyncWithLocation = props.disableSyncWithLocation,\n    _b = props.exporter,\n    exporter = _b === void 0 ? defaultExporter : _b,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    _c = props.perPage,\n    perPage = _c === void 0 ? 10 : _c,\n    _d = props.queryOptions,\n    queryOptions = _d === void 0 ? {} : _d,\n    sort = props.sort,\n    storeKey = props.storeKey;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  if (!resource) {\n    throw new Error(\"<InfiniteList> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.\");\n  }\n  if (filter && isValidElement(filter)) {\n    throw new Error('<InfiniteList> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n  var translate = useTranslate();\n  var notify = useNotify();\n  var _e = useListParams({\n      debounce: debounce,\n      disableSyncWithLocation: disableSyncWithLocation,\n      filterDefaultValues: filterDefaultValues,\n      perPage: perPage,\n      resource: resource,\n      sort: sort,\n      storeKey: storeKey\n    }),\n    query = _e[0],\n    queryModifiers = _e[1];\n  var _f = useRecordSelection(resource),\n    selectedIds = _f[0],\n    selectionModifiers = _f[1];\n  var _g = useInfiniteGetList(resource, {\n      pagination: {\n        page: query.page,\n        perPage: query.perPage\n      },\n      sort: {\n        field: query.sort,\n        order: query.order\n      },\n      filter: __assign(__assign({}, query.filter), filter),\n      meta: meta\n    }, __assign({\n      keepPreviousData: true,\n      retry: false,\n      onError: function (error) {\n        return notify((error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: error === null || error === void 0 ? void 0 : error.message\n          }\n        });\n      }\n    }, otherQueryOptions)),\n    data = _g.data,\n    total = _g.total,\n    error = _g.error,\n    isLoading = _g.isLoading,\n    isFetching = _g.isFetching,\n    hasNextPage = _g.hasNextPage,\n    hasPreviousPage = _g.hasPreviousPage,\n    fetchNextPage = _g.fetchNextPage,\n    isFetchingNextPage = _g.isFetchingNextPage,\n    fetchPreviousPage = _g.fetchPreviousPage,\n    isFetchingPreviousPage = _g.isFetchingPreviousPage,\n    refetch = _g.refetch;\n  // change page if there is no data\n  useEffect(function () {\n    if (query.page <= 0 || !isFetching && query.page > 1 && (data == null || (data === null || data === void 0 ? void 0 : data.pages.length) === 0)) {\n      // Query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n      return;\n    }\n    if (total == null) {\n      return;\n    }\n    var totalPages = Math.ceil(total / query.perPage) || 1;\n    if (!isFetching && query.page > totalPages) {\n      // Query for a page out of bounds, set page to the last existing page\n      // It occurs when deleting the last element of the last page\n      queryModifiers.setPage(totalPages);\n    }\n  }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.list', {\n    name: getResourceLabel(resource, 2)\n  });\n  var unwrappedData = useMemo(function () {\n    var _a;\n    return (_a = data === null || data === void 0 ? void 0 : data.pages) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, page) {\n      return __spreadArray(__spreadArray([], acc, true), page.data, true);\n    }, []);\n  }, [data]);\n  return {\n    sort: currentSort,\n    data: unwrappedData,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    error: error,\n    exporter: exporter,\n    filter: filter,\n    filterValues: query.filterValues,\n    hideFilter: queryModifiers.hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    showFilter: queryModifiers.showFilter,\n    total: total,\n    hasNextPage: hasNextPage,\n    hasPreviousPage: hasPreviousPage,\n    fetchNextPage: fetchNextPage,\n    isFetchingNextPage: isFetchingNextPage,\n    fetchPreviousPage: fetchPreviousPage,\n    isFetchingPreviousPage: isFetchingPreviousPage\n  };\n};","map":{"version":3,"mappings":"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","names":["isValidElement","useEffect","useMemo","useAuthenticated","useTranslate","useNotify","useInfiniteGetList","defaultExporter","useResourceContext","useGetResourceLabel","useRecordSelection","useListParams","useInfiniteListController","props","debounce","disableAuthentication","disableSyncWithLocation","_b","exporter","filter","filterDefaultValues","_c","perPage","_d","queryOptions","sort","storeKey","enabled","resource","otherQueryOptions","Error","translate","notify","query","queryModifiers","selectedIds","selectionModifiers","pagination","page","field","order","meta","keepPreviousData","retry","onError","error","message","type","messageArgs","_","data","total","isLoading","isFetching","hasNextPage","hasPreviousPage","fetchNextPage","isFetchingNextPage","fetchPreviousPage","isFetchingPreviousPage","refetch","pages","length","setPage","totalPages","Math","ceil","currentSort","getResourceLabel","defaultTitle","name","unwrappedData","reduce","acc","displayedFilters","filterValues","hideFilter","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","setFilters","setPerPage","setSort","showFilter"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-core\\src\\controller\\list\\useInfiniteListController.ts"],"sourcesContent":["import { isValidElement, useEffect, useMemo } from 'react';\nimport {\n    UseInfiniteQueryOptions,\n    InfiniteQueryObserverBaseResult,\n} from 'react-query';\n\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useInfiniteGetList } from '../../dataProvider';\nimport { defaultExporter } from '../../export';\nimport {\n    RaRecord,\n    SortPayload,\n    FilterPayload,\n    Exporter,\n    GetInfiniteListResult,\n} from '../../types';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n\nimport { ListControllerResult } from './useListController';\n\n/**\n * Prepare data for the InfiniteList view\n *\n * @param {Object} props The props passed to the InfiniteList component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useInfiniteListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useInfiniteListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport const useInfiniteListController = <RecordType extends RaRecord = any>(\n    props: InfiniteListControllerProps<RecordType> = {}\n): InfiniteListControllerResult<RecordType> => {\n    const {\n        debounce = 500,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter = defaultExporter,\n        filter,\n        filterDefaultValues,\n        perPage = 10,\n        queryOptions = {},\n        sort,\n        storeKey,\n    } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    if (!resource) {\n        throw new Error(\n            `<InfiniteList> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.`\n        );\n    }\n    if (filter && isValidElement(filter)) {\n        throw new Error(\n            '<InfiniteList> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.'\n        );\n    }\n\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const [query, queryModifiers] = useListParams({\n        debounce,\n        disableSyncWithLocation,\n        filterDefaultValues,\n        perPage,\n        resource,\n        sort,\n        storeKey,\n    });\n\n    const [selectedIds, selectionModifiers] = useRecordSelection(resource);\n\n    const {\n        data,\n        total,\n        error,\n        isLoading,\n        isFetching,\n        hasNextPage,\n        hasPreviousPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        fetchPreviousPage,\n        isFetchingPreviousPage,\n        refetch,\n    } = useInfiniteGetList<RecordType>(\n        resource,\n        {\n            pagination: {\n                page: query.page,\n                perPage: query.perPage,\n            },\n            sort: { field: query.sort, order: query.order },\n            filter: { ...query.filter, ...filter },\n            meta,\n        },\n        {\n            keepPreviousData: true,\n            retry: false,\n            onError: error =>\n                notify(error?.message || 'ra.notification.http_error', {\n                    type: 'error',\n                    messageArgs: {\n                        _: error?.message,\n                    },\n                }),\n            ...otherQueryOptions,\n        }\n    );\n\n    // change page if there is no data\n    useEffect(() => {\n        if (\n            query.page <= 0 ||\n            (!isFetching &&\n                query.page > 1 &&\n                (data == null || data?.pages.length === 0))\n        ) {\n            // Query for a page that doesn't exist, set page to 1\n            queryModifiers.setPage(1);\n            return;\n        }\n        if (total == null) {\n            return;\n        }\n        const totalPages = Math.ceil(total / query.perPage) || 1;\n        if (!isFetching && query.page > totalPages) {\n            // Query for a page out of bounds, set page to the last existing page\n            // It occurs when deleting the last element of the last page\n            queryModifiers.setPage(totalPages);\n        }\n    }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: query.sort,\n            order: query.order,\n        }),\n        [query.sort, query.order]\n    );\n\n    const getResourceLabel = useGetResourceLabel();\n    const defaultTitle = translate('ra.page.list', {\n        name: getResourceLabel(resource, 2),\n    });\n\n    const unwrappedData = useMemo(\n        () => data?.pages?.reduce((acc, page) => [...acc, ...page.data], []),\n        [data]\n    );\n\n    return {\n        sort: currentSort,\n        data: unwrappedData,\n        defaultTitle,\n        displayedFilters: query.displayedFilters,\n        error,\n        exporter,\n        filter,\n        filterValues: query.filterValues,\n        hideFilter: queryModifiers.hideFilter,\n        isFetching,\n        isLoading,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page: query.page,\n        perPage: query.perPage,\n        refetch,\n        resource,\n        selectedIds,\n        setFilters: queryModifiers.setFilters,\n        setPage: queryModifiers.setPage,\n        setPerPage: queryModifiers.setPerPage,\n        setSort: queryModifiers.setSort,\n        showFilter: queryModifiers.showFilter,\n        total: total,\n        hasNextPage,\n        hasPreviousPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        fetchPreviousPage,\n        isFetchingPreviousPage,\n    };\n};\n\nexport interface InfiniteListControllerProps<\n    RecordType extends RaRecord = any\n> {\n    debounce?: number;\n    disableAuthentication?: boolean;\n    /**\n     * Whether to disable the synchronization of the list parameters with the current location (URL search parameters)\n     */\n    disableSyncWithLocation?: boolean;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterDefaultValues?: object;\n    perPage?: number;\n    // FIXME: Make it generic, but Parameters<typeof useInfiniteQuery<RecordType>>[2] doesn't work\n    queryOptions?: UseInfiniteQueryOptions<\n        GetInfiniteListResult<RecordType>,\n        Error\n    >;\n    resource?: string;\n    sort?: SortPayload;\n    storeKey?: string | false;\n}\n\nexport interface InfiniteListControllerResult<RecordType extends RaRecord = any>\n    extends ListControllerResult<RecordType> {\n    fetchNextPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['fetchNextPage'];\n    fetchPreviousPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['fetchPreviousPage'];\n    isFetchingNextPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['isFetchingNextPage'];\n    isFetchingPreviousPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['isFetchingPreviousPage'];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}