{"ast":null,"code":"import { useState as n, useRef as e, useCallback as t, useEffect as o, useLayoutEffect as r } from \"react\";\nimport { flushSync as i } from \"react-dom\";\nimport l from \"tiny-warning\";\nfunction a() {\n  return a = Object.assign || function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var o in t) Object.prototype.hasOwnProperty.call(t, o) && (n[o] = t[o]);\n    }\n    return n;\n  }, a.apply(this, arguments);\n}\nfunction u(n, e) {\n  if (null == n) return {};\n  var t,\n    o,\n    r = {},\n    i = Object.keys(n);\n  for (o = 0; o < i.length; o++) e.indexOf(t = i[o]) >= 0 || (r[t] = n[t]);\n  return r;\n}\nvar c = function () {};\nfunction d(n) {\n  return null != n && n.current ? n.current.scrollHeight : (l(!0, \"useCollapse was not able to find a ref to the collapse element via `getCollapseProps`. Ensure that the element exposes its `ref` prop. If it exposes the ref prop under a different name (like `innerRef`), use the `refKey` property to change it. Example:\\n\\n{...getCollapseProps({refKey: 'innerRef'})}\"), \"auto\");\n}\nvar s = function () {\n  var n = arguments;\n  return function () {\n    var e = arguments;\n    return [].slice.call(n).forEach(function (n) {\n      return n && n.apply(void 0, [].slice.call(e));\n    });\n  };\n};\nfunction f(n, e) {\n  if (null != n) if (\"function\" == typeof n) n(e);else try {\n    n.current = e;\n  } catch (t) {\n    throw new Error('Cannot assign value \"' + e + '\" to ref \"' + n + '\"');\n  }\n}\nvar p = \"undefined\" != typeof window ? r : o,\n  h = !1,\n  v = 0,\n  g = function () {\n    return ++v;\n  },\n  m = [\"duration\", \"easing\", \"collapseStyles\", \"expandStyles\", \"onExpandStart\", \"onExpandEnd\", \"onCollapseStart\", \"onCollapseEnd\", \"isExpanded\", \"defaultExpanded\", \"hasDisabledAnimation\"],\n  x = [\"disabled\", \"onClick\"],\n  y = [\"style\", \"onTransitionEnd\", \"refKey\"];\nfunction E(r) {\n  var v,\n    E,\n    b = void 0 === r ? {} : r,\n    C = b.duration,\n    w = b.easing,\n    S = void 0 === w ? \"cubic-bezier(0.4, 0, 0.2, 1)\" : w,\n    k = b.collapseStyles,\n    A = void 0 === k ? {} : k,\n    O = b.expandStyles,\n    P = void 0 === O ? {} : O,\n    T = b.onExpandStart,\n    q = void 0 === T ? c : T,\n    D = b.onExpandEnd,\n    F = void 0 === D ? c : D,\n    K = b.onCollapseStart,\n    j = void 0 === K ? c : K,\n    N = b.onCollapseEnd,\n    z = void 0 === N ? c : N,\n    H = b.isExpanded,\n    I = b.defaultExpanded,\n    M = void 0 !== I && I,\n    R = b.hasDisabledAnimation,\n    B = void 0 !== R && R,\n    V = u(b, m),\n    _ = function (r, i) {\n      var a = n(i || !1),\n        u = a[0],\n        c = a[1],\n        d = e(null != r),\n        s = d.current ? r : u,\n        f = t(function (n) {\n          d.current || c(n);\n        }, []);\n      return o(function () {\n        l(!(d.current && null == r), \"useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.\"), l(!(!d.current && null != r), \"useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.\");\n      }, [r]), [s, f];\n    }(H, M),\n    G = _[0],\n    J = _[1],\n    L = function (e) {\n      var t = h ? g() : null,\n        r = n(t),\n        i = r[0],\n        l = r[1];\n      return p(function () {\n        null === i && l(g());\n      }, []), o(function () {\n        !1 === h && (h = !0);\n      }, []), null != i ? String(i) : void 0;\n    }(),\n    Q = e(null);\n  v = Q, E = function (n) {}, \"production\" !== process.env.NODE_ENV && (E = function (n) {\n    if (null != n && n.current) {\n      var e = window.getComputedStyle(n.current),\n        t = e.paddingTop,\n        o = e.paddingBottom;\n      l(!(t && \"0px\" !== t || o && \"0px\" !== o), \"react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.\");\n    }\n  }), o(function () {\n    E(v);\n  }, [v]);\n  var U,\n    W,\n    X,\n    Y = (V.collapsedHeight || 0) + \"px\",\n    Z = {\n      display: \"0px\" === Y ? \"none\" : \"block\",\n      height: Y,\n      overflow: \"hidden\"\n    },\n    $ = n(G ? {} : Z),\n    nn = $[0],\n    en = $[1],\n    tn = function (n) {\n      i(function () {\n        en(n);\n      });\n    },\n    on = function (n) {\n      tn(function (e) {\n        return a({}, e, n);\n      });\n    };\n  function rn(n) {\n    if (B) return {};\n    var e = C || function (n) {\n      if (!n || \"string\" == typeof n) return 0;\n      var e = n / 36;\n      return Math.round(10 * (4 + 15 * Math.pow(e, .25) + e / 5));\n    }(n);\n    return {\n      transition: \"height \" + e + \"ms \" + S\n    };\n  }\n  U = function () {\n    G ? requestAnimationFrame(function () {\n      q(), on(a({}, P, {\n        willChange: \"height\",\n        display: \"block\",\n        overflow: \"hidden\"\n      })), requestAnimationFrame(function () {\n        var n = d(Q);\n        on(a({}, rn(n), {\n          height: n\n        }));\n      });\n    }) : requestAnimationFrame(function () {\n      j();\n      var n = d(Q);\n      on(a({}, A, rn(n), {\n        willChange: \"height\",\n        height: n\n      })), requestAnimationFrame(function () {\n        on({\n          height: Y,\n          overflow: \"hidden\"\n        });\n      });\n    });\n  }, W = [G, Y], X = e(!0), o(function () {\n    if (!X.current) return U();\n    X.current = !1;\n  }, W);\n  var ln = function (n) {\n    if (n.target === Q.current && \"height\" === n.propertyName) if (G) {\n      var e = d(Q);\n      e === nn.height ? tn({}) : on({\n        height: e\n      }), F();\n    } else nn.height === Y && (tn(Z), z());\n  };\n  return {\n    getToggleProps: function (n) {\n      var e = void 0 === n ? {} : n,\n        t = e.disabled,\n        o = void 0 !== t && t,\n        r = e.onClick,\n        i = void 0 === r ? c : r,\n        l = u(e, x);\n      return a({\n        type: \"button\",\n        role: \"button\",\n        id: \"react-collapsed-toggle-\" + L,\n        \"aria-controls\": \"react-collapsed-panel-\" + L,\n        \"aria-expanded\": G,\n        tabIndex: 0,\n        disabled: o\n      }, l, {\n        onClick: o ? c : s(i, function () {\n          return J(function (n) {\n            return !n;\n          });\n        })\n      });\n    },\n    getCollapseProps: function (n) {\n      var e,\n        t = void 0 === n ? {} : n,\n        o = t.style,\n        r = void 0 === o ? {} : o,\n        i = t.onTransitionEnd,\n        l = void 0 === i ? c : i,\n        d = t.refKey,\n        p = void 0 === d ? \"ref\" : d,\n        h = u(t, y);\n      return a({\n        id: \"react-collapsed-panel-\" + L,\n        \"aria-hidden\": !G\n      }, h, ((e = {})[p] = function () {\n        var n = [].slice.call(arguments);\n        return n.every(function (n) {\n          return null == n;\n        }) ? null : function (e) {\n          n.forEach(function (n) {\n            f(n, e);\n          });\n        };\n      }(Q, h[p]), e.onTransitionEnd = s(ln, l), e.style = a({\n        boxSizing: \"border-box\"\n      }, r, nn), e));\n    },\n    isExpanded: G,\n    setExpanded: J\n  };\n}\nexport { E as default };","map":{"version":3,"mappings":"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","names":["noop","getElementHeight","el","current","scrollHeight","warning","callAll","forEach","fn","assignRef","ref","value","error","Error","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","serverHandoffComplete","id","genId","useCollapse","element","warn","duration","easing","k","collapseStyles","O","expandStyles","T","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","configIsExpanded","isExpanded","defaultExpanded","hasDisabledAnimation","initialConfig","useState","stateExpanded","setStateExpanded","initiallyControlled","useRef","expanded","setExpanded","useCallback","n","useControlledState","uniqueId","idFromProps","initialId","r","setId","String","undefined","useUniqueId","process","env","NODE_ENV","getComputedStyle","paddingTop","paddingBottom","cb","dependencies","justMounted","collapsedHeight","collapsedStyles","display","height","overflow","$","styles","setStylesRaw","setStyles","newStyles","flushSync","mergeStyles","oldStyles","getTransitionStyles","_duration","constant","Math","round","getAutoHeightDuration","transition","requestAnimationFrame","willChange","handleTransitionEnd","e","target","propertyName","getToggleProps","t","disabled","onClick","rest","type","role","tabIndex","getCollapseProps","o","style","i","onTransitionEnd","refKey","refs","every","node","mergeRefs","boxSizing"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-collapsed\\src\\utils.ts","D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-collapsed\\src\\index.ts"],"sourcesContent":["import {\n  RefObject,\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useLayoutEffect,\n} from 'react'\nimport warning from 'tiny-warning'\nimport type { AssignableRef } from './types'\n\ntype AnyFunction = (...args: any[]) => unknown\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = (): void => {}\n\nexport function getElementHeight(\n  el: RefObject<HTMLElement> | { current?: { scrollHeight: number } }\n): string | number {\n  if (!el?.current) {\n    warning(\n      true,\n      `useCollapse was not able to find a ref to the collapse element via \\`getCollapseProps\\`. Ensure that the element exposes its \\`ref\\` prop. If it exposes the ref prop under a different name (like \\`innerRef\\`), use the \\`refKey\\` property to change it. Example:\n\n{...getCollapseProps({refKey: 'innerRef'})}`\n    )\n    return 'auto'\n  }\n  return el.current.scrollHeight\n}\n\n// Helper function for render props. Sets a function to be called, plus any additional functions passed in\nexport const callAll =\n  (...fns: AnyFunction[]) =>\n  (...args: any[]): void =>\n    fns.forEach((fn) => fn && fn(...args))\n\n// https://github.com/mui-org/material-ui/blob/da362266f7c137bf671d7e8c44c84ad5cfc0e9e2/packages/material-ui/src/styles/transitions.js#L89-L98\nexport function getAutoHeightDuration(height: number | string): number {\n  if (!height || typeof height === 'string') {\n    return 0\n  }\n\n  const constant = height / 36\n\n  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10)\n}\n\nexport function assignRef<RefValueType = any>(\n  ref: AssignableRef<RefValueType> | null | undefined,\n  value: any\n) {\n  if (ref == null) return\n  if (typeof ref === 'function') {\n    ref(value)\n  } else {\n    try {\n      ref.current = value\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`)\n    }\n  }\n}\n\n/**\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\n * dealing with components that need an explicit ref for DOM calculations but\n * also forwards refs assigned by an app.\n *\n * @param refs Refs to fork\n */\nexport function mergeRefs<RefValueType = any>(\n  ...refs: (AssignableRef<RefValueType> | null | undefined)[]\n) {\n  if (refs.every((ref) => ref == null)) {\n    return null\n  }\n  return (node: any) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useControlledState(\n  isExpanded?: boolean,\n  defaultExpanded?: boolean\n): [boolean, React.Dispatch<React.SetStateAction<boolean>>] {\n  const [stateExpanded, setStateExpanded] = useState(defaultExpanded || false)\n  const initiallyControlled = useRef(isExpanded != null)\n  const expanded = initiallyControlled.current\n    ? (isExpanded as boolean)\n    : stateExpanded\n  const setExpanded = useCallback((n) => {\n    if (!initiallyControlled.current) {\n      setStateExpanded(n)\n    }\n  }, [])\n\n  useEffect(() => {\n    warning(\n      !(initiallyControlled.current && isExpanded == null),\n      'useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.'\n    )\n    warning(\n      !(!initiallyControlled.current && isExpanded != null),\n      'useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.'\n    )\n  }, [isExpanded])\n\n  return [expanded, setExpanded]\n}\n\nexport function useEffectAfterMount(\n  cb: () => void,\n  dependencies: unknown[]\n): void {\n  const justMounted = useRef(true)\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (!justMounted.current) {\n      return cb()\n    }\n    justMounted.current = false\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies)\n}\n\n/**\n * Taken from Reach\n * https://github.com/reach/reach-ui/blob/d2b88c50caf52f473a7d20a4493e39e3c5e95b7b/packages/auto-id\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reach.tech/auto-id\n */\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\nlet serverHandoffComplete = false\nlet id = 0\nconst genId = () => ++id\nexport function useUniqueId(idFromProps?: string | null) {\n  /*\n   * If this instance isn't part of the initial render, we don't have to do the\n   * double render/patch-up dance. We can just generate the ID and return it.\n   */\n  const initialId = idFromProps || (serverHandoffComplete ? genId() : null)\n\n  const [id, setId] = useState(initialId)\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === null) {\n      /*\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n       * rendering flicker, though it'll make the first render slower (unlikely\n       * to matter, but you're welcome to measure your app and let us know if\n       * it's a problem).\n       */\n      setId(genId())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (serverHandoffComplete === false) {\n      /*\n       * Flag all future uses of `useId` to skip the update dance. This is in\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n       * accidentally bail out of the patch-up dance prematurely.\n       */\n      serverHandoffComplete = true\n    }\n  }, [])\n  return id != null ? String(id) : undefined\n}\n\nexport function usePaddingWarning(element: RefObject<HTMLElement>): void {\n  // @ts-ignore\n  let warn = (el?: RefObject<HTMLElement>): void => {}\n\n  if (process.env.NODE_ENV !== 'production') {\n    warn = (el) => {\n      if (!el?.current) {\n        return\n      }\n      const { paddingTop, paddingBottom } = window.getComputedStyle(el.current)\n      const hasPadding =\n        (paddingTop && paddingTop !== '0px') ||\n        (paddingBottom && paddingBottom !== '0px')\n\n      warning(\n        !hasPadding,\n        'react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.'\n      )\n    }\n  }\n\n  useEffect(() => {\n    warn(element)\n  }, [element])\n}\n","import { useState, useRef, TransitionEvent, CSSProperties } from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  noop,\n  callAll,\n  getElementHeight,\n  getAutoHeightDuration,\n  mergeRefs,\n  usePaddingWarning,\n  useUniqueId,\n  useEffectAfterMount,\n  useControlledState,\n} from './utils'\nimport {\n  UseCollapseInput,\n  UseCollapseOutput,\n  GetCollapsePropsOutput,\n  GetCollapsePropsInput,\n  GetTogglePropsOutput,\n  GetTogglePropsInput,\n} from './types'\n\nconst easeInOut = 'cubic-bezier(0.4, 0, 0.2, 1)'\n\nexport default function useCollapse({\n  duration,\n  easing = easeInOut,\n  collapseStyles = {},\n  expandStyles = {},\n  onExpandStart = noop,\n  onExpandEnd = noop,\n  onCollapseStart = noop,\n  onCollapseEnd = noop,\n  isExpanded: configIsExpanded,\n  defaultExpanded = false,\n  hasDisabledAnimation = false,\n  ...initialConfig\n}: UseCollapseInput = {}): UseCollapseOutput {\n  const [isExpanded, setExpanded] = useControlledState(\n    configIsExpanded,\n    defaultExpanded\n  )\n  const uniqueId = useUniqueId()\n  const el = useRef<HTMLElement | null>(null)\n  usePaddingWarning(el)\n  const collapsedHeight = `${initialConfig.collapsedHeight || 0}px`\n  const collapsedStyles = {\n    display: collapsedHeight === '0px' ? 'none' : 'block',\n    height: collapsedHeight,\n    overflow: 'hidden',\n  }\n  const [styles, setStylesRaw] = useState<CSSProperties>(\n    isExpanded ? {} : collapsedStyles\n  )\n  const setStyles = (newStyles: {} | ((oldStyles: {}) => {})): void => {\n    // We rely on reading information from layout\n    // at arbitrary times, so ensure all style changes\n    // happen before we might attempt to read them.\n    flushSync(() => {\n      setStylesRaw(newStyles)\n    })\n  }\n  const mergeStyles = (newStyles: {}): void => {\n    setStyles((oldStyles) => ({ ...oldStyles, ...newStyles }))\n  }\n\n  function getTransitionStyles(height: number | string): CSSProperties {\n    if (hasDisabledAnimation) {\n      return {}\n    }\n    const _duration = duration || getAutoHeightDuration(height)\n    return {\n      transition: `height ${_duration}ms ${easing}`,\n    }\n  }\n\n  useEffectAfterMount(() => {\n    if (isExpanded) {\n      requestAnimationFrame(() => {\n        onExpandStart()\n        mergeStyles({\n          ...expandStyles,\n          willChange: 'height',\n          display: 'block',\n          overflow: 'hidden',\n        })\n        requestAnimationFrame(() => {\n          const height = getElementHeight(el)\n          mergeStyles({\n            ...getTransitionStyles(height),\n            height,\n          })\n        })\n      })\n    } else {\n      requestAnimationFrame(() => {\n        onCollapseStart()\n        const height = getElementHeight(el)\n        mergeStyles({\n          ...collapseStyles,\n          ...getTransitionStyles(height),\n          willChange: 'height',\n          height,\n        })\n        requestAnimationFrame(() => {\n          mergeStyles({\n            height: collapsedHeight,\n            overflow: 'hidden',\n          })\n        })\n      })\n    }\n  }, [isExpanded, collapsedHeight])\n\n  const handleTransitionEnd = (e: TransitionEvent): void => {\n    // Sometimes onTransitionEnd is triggered by another transition,\n    // such as a nested collapse panel transitioning. But we only\n    // want to handle this if this component's element is transitioning\n    if (e.target !== el.current || e.propertyName !== 'height') {\n      return\n    }\n\n    // The height comparisons below are a final check before\n    // completing the transition\n    // Sometimes this callback is run even though we've already begun\n    // transitioning the other direction\n    // The conditions give us the opportunity to bail out,\n    // which will prevent the collapsed content from flashing on the screen\n    if (isExpanded) {\n      const height = getElementHeight(el)\n\n      // If the height at the end of the transition\n      // matches the height we're animating to,\n      if (height === styles.height) {\n        setStyles({})\n      } else {\n        // If the heights don't match, this could be due the height\n        // of the content changing mid-transition\n        mergeStyles({ height })\n      }\n\n      onExpandEnd()\n\n      // If the height we should be animating to matches the collapsed height,\n      // it's safe to apply the collapsed overrides\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles)\n      onCollapseEnd()\n    }\n  }\n\n  function getToggleProps({\n    disabled = false,\n    onClick = noop,\n    ...rest\n  }: GetTogglePropsInput = {}): GetTogglePropsOutput {\n    return {\n      type: 'button',\n      role: 'button',\n      id: `react-collapsed-toggle-${uniqueId}`,\n      'aria-controls': `react-collapsed-panel-${uniqueId}`,\n      'aria-expanded': isExpanded,\n      tabIndex: 0,\n      disabled,\n      ...rest,\n      onClick: disabled ? noop : callAll(onClick, () => setExpanded((n) => !n)),\n    }\n  }\n\n  function getCollapseProps({\n    style = {},\n    onTransitionEnd = noop,\n    refKey = 'ref',\n    ...rest\n  }: GetCollapsePropsInput = {}): GetCollapsePropsOutput {\n    const theirRef: any = rest[refKey]\n    return {\n      id: `react-collapsed-panel-${uniqueId}`,\n      'aria-hidden': !isExpanded,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: callAll(handleTransitionEnd, onTransitionEnd),\n      style: {\n        boxSizing: 'border-box',\n        // additional styles passed, e.g. getCollapseProps({style: {}})\n        ...style,\n        // style overrides from state\n        ...styles,\n      },\n    }\n  }\n\n  return {\n    getToggleProps,\n    getCollapseProps,\n    isExpanded,\n    setExpanded,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}