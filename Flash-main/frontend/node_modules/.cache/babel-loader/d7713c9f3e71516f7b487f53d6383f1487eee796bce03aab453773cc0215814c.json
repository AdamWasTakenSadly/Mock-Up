{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { Tooltip, Typography } from '@mui/material';\nimport { useTranslate, useRecordContext } from 'ra-core';\nimport { genericMemo } from './genericMemo';\nimport { fieldPropTypes } from './types';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nvar BooleanFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    valueLabelTrue = props.valueLabelTrue,\n    valueLabelFalse = props.valueLabelFalse,\n    _a = props.TrueIcon,\n    TrueIcon = _a === void 0 ? DoneIcon : _a,\n    _b = props.FalseIcon,\n    FalseIcon = _b === void 0 ? ClearIcon : _b,\n    _c = props.looseValue,\n    looseValue = _c === void 0 ? false : _c,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"valueLabelTrue\", \"valueLabelFalse\", \"TrueIcon\", \"FalseIcon\", \"looseValue\"]);\n  var record = useRecordContext(props);\n  var translate = useTranslate();\n  var value = get(record, source);\n  var isTruthyValue = value === true || looseValue && value;\n  var ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n  if (!ariaLabel) {\n    ariaLabel = isTruthyValue ? 'ra.boolean.true' : 'ra.boolean.false';\n  }\n  if (looseValue || value === false || value === true) {\n    return React.createElement(StyledTypography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), React.createElement(Tooltip, {\n      title: translate(ariaLabel, {\n        _: ariaLabel\n      })\n    }, isTruthyValue ? TrueIcon ? React.createElement(TrueIcon, {\n      \"data-testid\": \"true\",\n      fontSize: \"small\"\n    }) : React.createElement(React.Fragment, null) : FalseIcon ? React.createElement(FalseIcon, {\n      \"data-testid\": \"false\",\n      fontSize: \"small\"\n    }) : React.createElement(React.Fragment, null)));\n  }\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n    _: emptyText\n  }));\n};\nBooleanFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  valueLabelFalse: PropTypes.string,\n  valueLabelTrue: PropTypes.string,\n  TrueIcon: PropTypes.elementType,\n  FalseIcon: PropTypes.elementType,\n  looseValue: PropTypes.bool\n});\nBooleanFieldImpl.displayName = 'BooleanFieldImpl';\nexport var BooleanField = genericMemo(BooleanFieldImpl);\nvar PREFIX = 'RaBooleanField';\nvar StyledTypography = styled(Typography, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'inline-flex',\n  verticalAlign: 'middle',\n  lineHeight: 0\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAE7C,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAASC,OAAO,EAAEC,UAAU,QAAyB,eAAe;AACpE,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,SAAS;AACxD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAAqBC,cAAc,QAAQ,SAAS;AACpD,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,IAAMC,gBAAgB,GAAG,UAGrBC,KAAoC;EAGhC,aAAS,GASTA,KAAK,UATI;IACTC,SAAS,GAQTD,KAAK,UARI;IACTE,MAAM,GAONF,KAAK,OAPC;IACNG,cAAc,GAMdH,KAAK,eANS;IACdI,eAAe,GAKfJ,KAAK,gBALU;IACfK,KAIAL,KAAK,SAJc;IAAnBM,QAAQ,mBAAGhB,QAAQ;IACnBiB,KAGAP,KAAK,UAHgB;IAArBQ,SAAS,mBAAGjB,SAAS;IACrBkB,KAEAT,KAAK,WAFa;IAAlBU,UAAU,mBAAG,KAAK;IACfC,IAAI,UACPX,KAAK,EAVH,gHAUL,CADU;EAEX,IAAMY,MAAM,GAAGjB,gBAAgB,CAAaK,KAAK,CAAC;EAClD,IAAMa,SAAS,GAAGnB,YAAY,EAAE;EAEhC,IAAMoB,KAAK,GAAGzB,GAAG,CAACuB,MAAM,EAAEV,MAAM,CAAC;EACjC,IAAMa,aAAa,GAAGD,KAAK,KAAK,IAAI,IAAKJ,UAAU,IAAII,KAAM;EAC7D,IAAIE,SAAS,GAAGF,KAAK,GAAGX,cAAc,GAAGC,eAAe;EAExD,IAAI,CAACY,SAAS,EAAE;IACZA,SAAS,GAAGD,aAAa,GAAG,iBAAiB,GAAG,kBAAkB;;EAGtE,IAAIL,UAAU,IAAII,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,IAAI,EAAE;IACjD,OACI5B,oBAAC+B,gBAAgB;MACbC,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBtB,sBAAsB,CAACa,IAAI,CAAC,GAEhCzB,oBAACM,OAAO;MAAC6B,KAAK,EAAER,SAAS,CAACG,SAAS,EAAE;QAAEM,CAAC,EAAEN;MAAS,CAAE;IAAC,GACjDD,aAAa,GACVT,QAAQ,GACJpB,oBAACoB,QAAQ;MAAA,eAAa,MAAM;MAACiB,QAAQ,EAAC;IAAO,EAAG,GAEhDrC,yCACH,GACDsB,SAAS,GACTtB,oBAACsB,SAAS;MAAA,eAAa,OAAO;MAACe,QAAQ,EAAC;IAAO,EAAG,GAElDrC,yCACH,CACK,CACK;;EAI3B,OACIA,oBAACO,UAAU;IACPyB,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfC,SAAS,EAAEA;EAAS,GAChBtB,sBAAsB,CAACa,IAAI,CAAC,GAE/BV,SAAS,IAAIY,SAAS,CAACZ,SAAS,EAAE;IAAEqB,CAAC,EAAErB;EAAS,CAAE,CAAC,CAC3C;AAErB,CAAC;AAEDF,gBAAgB,CAACyB,SAAS,kCAEnB/B,UAAU,CAAC+B,SAAS,GACpB3B,cAAc;EACjBO,eAAe,EAAEhB,SAAS,CAACqC,MAAM;EACjCtB,cAAc,EAAEf,SAAS,CAACqC,MAAM;EAChCnB,QAAQ,EAAElB,SAAS,CAACsC,WAAW;EAC/BlB,SAAS,EAAEpB,SAAS,CAACsC,WAAW;EAChChB,UAAU,EAAEtB,SAAS,CAACuC;AAAI,EAC7B;AACD5B,gBAAgB,CAAC6B,WAAW,GAAG,kBAAkB;AAEjD,OAAO,IAAMC,YAAY,GAAGjC,WAAW,CAACG,gBAAgB,CAAC;AAazD,IAAM+B,MAAM,GAAG,gBAAgB;AAE/B,IAAMb,gBAAgB,GAAG9B,MAAM,CAACM,UAAU,EAAE;EACxCsC,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,UAAChC,KAAK,EAAEiC,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC;EACCC,OAAO,EAAE,aAAa;EACtBC,aAAa,EAAE,QAAQ;EACvBC,UAAU,EAAE;CACf,CAAC","names":["React","styled","PropTypes","get","DoneIcon","ClearIcon","Tooltip","Typography","useTranslate","useRecordContext","genericMemo","fieldPropTypes","sanitizeFieldRestProps","BooleanFieldImpl","props","emptyText","source","valueLabelTrue","valueLabelFalse","_a","TrueIcon","_b","FalseIcon","_c","looseValue","rest","record","translate","value","isTruthyValue","ariaLabel","StyledTypography","component","variant","className","title","_","fontSize","propTypes","string","elementType","bool","displayName","BooleanField","PREFIX","name","overridesResolver","styles","root","display","verticalAlign","lineHeight"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\field\\BooleanField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { SvgIconComponent } from '@mui/icons-material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { Tooltip, Typography, TypographyProps } from '@mui/material';\nimport { useTranslate, useRecordContext } from 'ra-core';\nimport { genericMemo } from './genericMemo';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\n\nconst BooleanFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: BooleanFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        source,\n        valueLabelTrue,\n        valueLabelFalse,\n        TrueIcon = DoneIcon,\n        FalseIcon = ClearIcon,\n        looseValue = false,\n        ...rest\n    } = props;\n    const record = useRecordContext<RecordType>(props);\n    const translate = useTranslate();\n\n    const value = get(record, source);\n    const isTruthyValue = value === true || (looseValue && value);\n    let ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n\n    if (!ariaLabel) {\n        ariaLabel = isTruthyValue ? 'ra.boolean.true' : 'ra.boolean.false';\n    }\n\n    if (looseValue || value === false || value === true) {\n        return (\n            <StyledTypography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                <Tooltip title={translate(ariaLabel, { _: ariaLabel })}>\n                    {isTruthyValue ? (\n                        TrueIcon ? (\n                            <TrueIcon data-testid=\"true\" fontSize=\"small\" />\n                        ) : (\n                            <></>\n                        )\n                    ) : FalseIcon ? (\n                        <FalseIcon data-testid=\"false\" fontSize=\"small\" />\n                    ) : (\n                        <></>\n                    )}\n                </Tooltip>\n            </StyledTypography>\n        );\n    }\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {emptyText && translate(emptyText, { _: emptyText })}\n        </Typography>\n    );\n};\n\nBooleanFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    valueLabelFalse: PropTypes.string,\n    valueLabelTrue: PropTypes.string,\n    TrueIcon: PropTypes.elementType,\n    FalseIcon: PropTypes.elementType,\n    looseValue: PropTypes.bool,\n};\nBooleanFieldImpl.displayName = 'BooleanFieldImpl';\n\nexport const BooleanField = genericMemo(BooleanFieldImpl);\n\nexport interface BooleanFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    valueLabelTrue?: string;\n    valueLabelFalse?: string;\n    TrueIcon?: SvgIconComponent | null;\n    FalseIcon?: SvgIconComponent | null;\n    looseValue?: boolean;\n}\n\nconst PREFIX = 'RaBooleanField';\n\nconst StyledTypography = styled(Typography, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'inline-flex',\n    verticalAlign: 'middle',\n    lineHeight: 0,\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}