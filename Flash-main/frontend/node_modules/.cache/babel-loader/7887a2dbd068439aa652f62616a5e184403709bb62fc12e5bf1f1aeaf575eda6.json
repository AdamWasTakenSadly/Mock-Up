{"ast":null,"code":"import debounce from 'lodash/debounce';\n/**\n * A version of lodash/debounce that always returns a promise but wait for the debounced function to return to resolve it.\n * @param func The function to debounce\n * @param wait The debounce delay\n * @returns A debounced function that returns a promise\n */\nexport function asyncDebounce(func, wait) {\n  var resolveSet = new Set();\n  var rejectSet = new Set();\n  var debounced = debounce(function (args) {\n    func.apply(void 0, args).then(function () {\n      var res = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        res[_i] = arguments[_i];\n      }\n      resolveSet.forEach(function (resolve) {\n        return resolve.apply(void 0, res);\n      });\n    }).catch(function () {\n      var res = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        res[_i] = arguments[_i];\n      }\n      rejectSet.forEach(function (reject) {\n        return reject.apply(void 0, res);\n      });\n    }).finally(function () {\n      resolveSet.clear();\n      rejectSet.clear();\n    });\n  }, wait);\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return new Promise(function (resolve, reject) {\n      resolveSet.add(resolve);\n      rejectSet.add(reject);\n      debounced(args);\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AAEtC;;;;;;AAMA,OAAM,SAAUC,aAAa,CAE3BC,IAAkB,EAAEC,IAAa;EAC/B,IAAMC,UAAU,GAAG,IAAIC,GAAG,EAAoB;EAC9C,IAAMC,SAAS,GAAG,IAAID,GAAG,EAAoB;EAE7C,IAAME,SAAS,GAAGP,QAAQ,CAAC,UAACQ,IAA8B;IACtDN,IAAI,eAAIM,IAAI,EACPC,IAAI,CAAC;MAAC;WAAA,UAAM,EAANC,qBAAM,EAANA,IAAM;QAANC;;MACHP,UAAU,CAACQ,OAAO,CAAC,iBAAO;QAAI,cAAO,eAAID,GAAG;MAAd,CAAe,CAAC;IAClD,CAAC,CAAC,CACDE,KAAK,CAAC;MAAC;WAAA,UAAM,EAANH,qBAAM,EAANA,IAAM;QAANC;;MACJL,SAAS,CAACM,OAAO,CAAC,gBAAM;QAAI,aAAM,eAAID,GAAG;MAAb,CAAc,CAAC;IAC/C,CAAC,CAAC,CACDG,OAAO,CAAC;MACLV,UAAU,CAACW,KAAK,EAAE;MAClBT,SAAS,CAACS,KAAK,EAAE;IACrB,CAAC,CAAC;EACV,CAAC,EAAEZ,IAAI,CAAC;EAER,OAAO;IAAC;SAAA,UAAiC,EAAjCO,qBAAiC,EAAjCA,IAAiC;MAAjCF;;IACJ,WAAIQ,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;MACxBd,UAAU,CAACe,GAAG,CAACF,OAAO,CAAC;MACvBX,SAAS,CAACa,GAAG,CAACD,MAAM,CAAC;MACrBX,SAAS,CAACC,IAAI,CAAC;IACnB,CAAC,CAA6B;EAJ9B,CAI8B;AACtC","names":["debounce","asyncDebounce","func","wait","resolveSet","Set","rejectSet","debounced","args","then","_i","res","forEach","catch","finally","clear","Promise","resolve","reject","add"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-core\\src\\util\\asyncDebounce.ts"],"sourcesContent":["import debounce from 'lodash/debounce';\n\n/**\n * A version of lodash/debounce that always returns a promise but wait for the debounced function to return to resolve it.\n * @param func The function to debounce\n * @param wait The debounce delay\n * @returns A debounced function that returns a promise\n */\nexport function asyncDebounce<\n    FunctionType extends (...args: any[]) => Promise<any>\n>(func: FunctionType, wait?: number) {\n    const resolveSet = new Set<(p: any) => void>();\n    const rejectSet = new Set<(p: any) => void>();\n\n    const debounced = debounce((args: Parameters<FunctionType>) => {\n        func(...args)\n            .then((...res) => {\n                resolveSet.forEach(resolve => resolve(...res));\n            })\n            .catch((...res) => {\n                rejectSet.forEach(reject => reject(...res));\n            })\n            .finally(() => {\n                resolveSet.clear();\n                rejectSet.clear();\n            });\n    }, wait);\n\n    return (...args: Parameters<FunctionType>): ReturnType<FunctionType> =>\n        new Promise((resolve, reject) => {\n            resolveSet.add(resolve);\n            rejectSet.add(reject);\n            debounced(args);\n        }) as ReturnType<FunctionType>;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}