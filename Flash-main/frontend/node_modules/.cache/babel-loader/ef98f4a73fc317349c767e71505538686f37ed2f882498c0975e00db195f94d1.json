{"ast":null,"code":"import * as React from 'react';\nimport { FieldTitle, useResourceContext } from 'ra-core';\nimport { Switch, Typography } from '@mui/material';\nimport DragIcon from '@mui/icons-material/DragIndicator';\nimport { styled } from '@mui/material/styles';\n/**\n * UI to enable/disable a field\n */\nexport var FieldToggle = function (props) {\n  var selected = props.selected,\n    label = props.label,\n    onToggle = props.onToggle,\n    onMove = props.onMove,\n    source = props.source,\n    index = props.index;\n  var resource = useResourceContext();\n  var dropIndex = React.useRef(null);\n  var x = React.useRef(null);\n  var y = React.useRef(null);\n  var handleDocumentDragOver = React.useCallback(function (event) {\n    x.current = event.clientX;\n    y.current = event.clientY;\n  }, []);\n  var handleDragStart = function () {\n    document.addEventListener('dragover', handleDocumentDragOver);\n  };\n  var handleDrag = function (event) {\n    // imperative DOM manipulations using the native Drag API\n    var selectedItem = event.target;\n    selectedItem.classList.add('drag-active');\n    var list = selectedItem.parentNode;\n    var dropItem = document.elementFromPoint(x.current, y.current) === null ? selectedItem : document.elementFromPoint(x.current, y.current);\n    if (dropItem.classList.contains('dragIcon')) {\n      dropItem = dropItem.parentNode;\n    }\n    if (dropItem === selectedItem) {\n      return;\n    }\n    if (list === dropItem.parentNode) {\n      dropIndex.current = dropItem.dataset.index;\n      if (dropItem === selectedItem.nextSibling) {\n        dropItem = dropItem.nextSibling;\n      }\n      list.insertBefore(selectedItem, dropItem);\n    }\n  };\n  var handleDragEnd = function (event) {\n    var selectedItem = event.target;\n    onMove(selectedItem.dataset.index, dropIndex.current);\n    selectedItem.classList.remove('drag-active');\n    document.removeEventListener('dragover', handleDocumentDragOver);\n  };\n  var handleDragOver = function (event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n  return React.createElement(Root, {\n    key: source,\n    draggable: onMove ? 'true' : undefined,\n    onDrag: onMove ? handleDrag : undefined,\n    onDragStart: onMove ? handleDragStart : undefined,\n    onDragEnd: onMove ? handleDragEnd : undefined,\n    onDragOver: onMove ? handleDragOver : undefined,\n    \"data-index\": index\n  }, React.createElement(\"label\", {\n    htmlFor: \"switch_\".concat(index)\n  }, React.createElement(Switch, {\n    checked: selected,\n    onChange: onToggle,\n    name: index,\n    id: \"switch_\".concat(index),\n    size: \"small\",\n    sx: {\n      mr: 0.5,\n      ml: -0.5\n    }\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"span\"\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource\n  }))), onMove && React.createElement(DragIcon, {\n    className: \"dragIcon\",\n    color: \"disabled\",\n    fontSize: \"small\"\n  }));\n};\nvar Root = styled('div')(function (_a) {\n  var theme = _a.theme;\n  return {\n    display: 'flex',\n    justifyContent: 'space-between',\n    '& svg': {\n      cursor: 'move'\n    },\n    '&.drag-active': {\n      background: 'transparent',\n      color: 'transparent',\n      outline: \"1px solid \".concat(theme.palette.action.selected),\n      '& .MuiSwitch-root, & svg': {\n        visibility: 'hidden'\n      }\n    }\n  };\n});","map":{"version":3,"mappings":"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","names":["React","FieldTitle","useResourceContext","Switch","Typography","DragIcon","styled","FieldToggle","props","label","onToggle","onMove","source","index","resource","dropIndex","useRef","x","y","handleDocumentDragOver","useCallback","current","event","clientX","clientY","handleDragStart","document","addEventListener","handleDrag","selectedItem","target","classList","add","list","parentNode","dropItem","elementFromPoint","contains","dataset","nextSibling","insertBefore","handleDragEnd","remove","removeEventListener","handleDragOver","preventDefault","dataTransfer","dropEffect","Root","key","draggable","undefined","onDrag","onDragStart","onDragEnd","onDragOver","htmlFor","checked","selected","onChange","name","id","size","sx","mr","ml","variant","component","className","color","fontSize","_a","theme","display","justifyContent","cursor","background","outline","palette","action","visibility"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\preferences\\FieldToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FieldTitle, useResourceContext } from 'ra-core';\nimport { Switch, Typography } from '@mui/material';\nimport DragIcon from '@mui/icons-material/DragIndicator';\nimport { styled } from '@mui/material/styles';\n\n/**\n * UI to enable/disable a field\n */\nexport const FieldToggle = props => {\n    const { selected, label, onToggle, onMove, source, index } = props;\n    const resource = useResourceContext();\n    const dropIndex = React.useRef<number>(null);\n    const x = React.useRef<number>(null);\n    const y = React.useRef<number>(null);\n\n    const handleDocumentDragOver = React.useCallback(event => {\n        x.current = event.clientX;\n        y.current = event.clientY;\n    }, []);\n\n    const handleDragStart = () => {\n        document.addEventListener('dragover', handleDocumentDragOver);\n    };\n\n    const handleDrag = event => {\n        // imperative DOM manipulations using the native Drag API\n        const selectedItem = event.target;\n        selectedItem.classList.add('drag-active');\n        const list = selectedItem.parentNode;\n        let dropItem =\n            document.elementFromPoint(x.current, y.current) === null\n                ? selectedItem\n                : document.elementFromPoint(x.current, y.current);\n        if (dropItem.classList.contains('dragIcon')) {\n            dropItem = dropItem.parentNode;\n        }\n        if (dropItem === selectedItem) {\n            return;\n        }\n        if (list === dropItem.parentNode) {\n            dropIndex.current = dropItem.dataset.index;\n            if (dropItem === selectedItem.nextSibling) {\n                dropItem = dropItem.nextSibling;\n            }\n            list.insertBefore(selectedItem, dropItem);\n        }\n    };\n\n    const handleDragEnd = event => {\n        const selectedItem = event.target;\n        onMove(selectedItem.dataset.index, dropIndex.current);\n        selectedItem.classList.remove('drag-active');\n        document.removeEventListener('dragover', handleDocumentDragOver);\n    };\n\n    const handleDragOver = event => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    };\n\n    return (\n        <Root\n            key={source}\n            draggable={onMove ? 'true' : undefined}\n            onDrag={onMove ? handleDrag : undefined}\n            onDragStart={onMove ? handleDragStart : undefined}\n            onDragEnd={onMove ? handleDragEnd : undefined}\n            onDragOver={onMove ? handleDragOver : undefined}\n            data-index={index}\n        >\n            <label htmlFor={`switch_${index}`}>\n                <Switch\n                    checked={selected}\n                    onChange={onToggle}\n                    name={index}\n                    id={`switch_${index}`}\n                    size=\"small\"\n                    sx={{ mr: 0.5, ml: -0.5 }}\n                />\n                <Typography variant=\"body2\" component=\"span\">\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                    />\n                </Typography>\n            </label>\n            {onMove && (\n                <DragIcon\n                    className=\"dragIcon\"\n                    color=\"disabled\"\n                    fontSize=\"small\"\n                />\n            )}\n        </Root>\n    );\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    display: 'flex',\n    justifyContent: 'space-between',\n    '& svg': {\n        cursor: 'move',\n    },\n    '&.drag-active': {\n        background: 'transparent',\n        color: 'transparent',\n        outline: `1px solid ${theme.palette.action.selected}`,\n        '& .MuiSwitch-root, & svg': {\n            visibility: 'hidden',\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}