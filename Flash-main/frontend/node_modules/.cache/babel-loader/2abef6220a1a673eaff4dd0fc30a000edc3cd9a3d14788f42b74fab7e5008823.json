{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha } from '@mui/material/styles';\nimport { useUpdateMany, useRefresh, useNotify, useUnselectAll, useResourceContext, useListContext } from 'ra-core';\nimport { Button } from './Button';\nexport var BulkUpdateWithUndoButton = function (props) {\n  var selectedIds = useListContext(props).selectedIds;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var unselectAll = useUnselectAll(resource);\n  var refresh = useRefresh();\n  var data = props.data,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.action.update' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b,\n    onClick = props.onClick,\n    _c = props.onSuccess,\n    onSuccess = _c === void 0 ? function () {\n      notify('ra.notification.updated', {\n        type: 'info',\n        messageArgs: {\n          smart_count: selectedIds.length\n        },\n        undoable: true\n      });\n      unselectAll();\n      refresh();\n    } : _c,\n    _d = props.onError,\n    onError = _d === void 0 ? function (error) {\n      notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n      refresh();\n    } : _d,\n    _e = props.mutationOptions,\n    mutationOptions = _e === void 0 ? {} : _e,\n    rest = __rest(props, [\"data\", \"label\", \"icon\", \"onClick\", \"onSuccess\", \"onError\", \"mutationOptions\"]);\n  var mutationMeta = mutationOptions.meta,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n  var _f = useUpdateMany(resource, {\n      ids: selectedIds,\n      data: data,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: onSuccess,\n      onError: onError,\n      mutationMode: 'undoable'\n    }, otherMutationOptions)),\n    updateMany = _f[0],\n    isLoading = _f[1].isLoading;\n  var handleClick = function (e) {\n    updateMany();\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n  return React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label,\n    disabled: isLoading\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(ActionUpdate, null);\nvar sanitizeRestProps = function (_a) {\n  var filterValues = _a.filterValues,\n    label = _a.label,\n    selectedIds = _a.selectedIds,\n    onSuccess = _a.onSuccess,\n    onError = _a.onError,\n    rest = __rest(_a, [\"filterValues\", \"label\", \"selectedIds\", \"onSuccess\", \"onError\"]);\n  return rest;\n};\nBulkUpdateWithUndoButton.propTypes = {\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  data: PropTypes.any.isRequired\n};\nvar PREFIX = 'RaBulkUpdateWithUndoButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});","map":{"version":3,"mappings":"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","names":["React","styled","PropTypes","ActionUpdate","alpha","useUpdateMany","useRefresh","useNotify","useUnselectAll","useResourceContext","useListContext","Button","BulkUpdateWithUndoButton","props","notify","resource","unselectAll","refresh","_a","label","_b","icon","defaultIcon","onClick","_c","onSuccess","type","messageArgs","smart_count","selectedIds","length","undoable","_d","onError","error","message","_","undefined","_e","mutationOptions","rest","mutationMeta","otherMutationOptions","ids","data","meta","mutationMode","updateMany","isLoading","handleClick","e","StyledButton","disabled","sanitizeRestProps","propTypes","string","arrayOf","any","element","isRequired","PREFIX","name","overridesResolver","styles","root","theme","color","palette","primary","main","backgroundColor"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\button\\BulkUpdateWithUndoButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    useListContext,\n    RaRecord,\n    UpdateManyParams,\n} from 'ra-core';\nimport { UseMutationOptions } from 'react-query';\n\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkUpdateWithUndoButton = (\n    props: BulkUpdateWithUndoButtonProps\n) => {\n    const { selectedIds } = useListContext(props);\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const refresh = useRefresh();\n\n    const {\n        data,\n        label = 'ra.action.update',\n        icon = defaultIcon,\n        onClick,\n        onSuccess = () => {\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: selectedIds.length },\n                undoable: true,\n            });\n            unselectAll();\n            refresh();\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                }\n            );\n            refresh();\n        },\n        mutationOptions = {},\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n\n    const [updateMany, { isLoading }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data, meta: mutationMeta },\n        {\n            onSuccess,\n            onError,\n            mutationMode: 'undoable',\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        updateMany();\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isLoading}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionUpdate />;\n\nconst sanitizeRestProps = ({\n    filterValues,\n    label,\n    selectedIds,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<BulkUpdateWithUndoButtonProps, 'resource' | 'icon' | 'data'>) => rest;\n\nexport interface BulkUpdateWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> extends BulkActionProps,\n        ButtonProps {\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateManyParams<RecordType>\n    > & { meta?: any };\n}\n\nBulkUpdateWithUndoButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    data: PropTypes.any.isRequired,\n};\n\nconst PREFIX = 'RaBulkUpdateWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}