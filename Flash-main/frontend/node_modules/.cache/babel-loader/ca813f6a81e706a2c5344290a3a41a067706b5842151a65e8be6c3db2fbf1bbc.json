{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport get from 'lodash/get';\nimport Chip from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\nvar ChipFieldImpl = function (props) {\n  var className = props.className,\n    source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var translate = useTranslate();\n  if (value == null && emptyText) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    }));\n  }\n  return React.createElement(StyledChip, __assign({\n    className: clsx(ChipFieldClasses.chip, className),\n    label: value\n  }, sanitizeFieldRestProps(rest)));\n};\nChipFieldImpl.propTypes = __assign(__assign({}, Chip.propTypes), fieldPropTypes);\nChipFieldImpl.displayName = 'ChipFieldImpl';\nexport var ChipField = genericMemo(ChipFieldImpl);\nvar PREFIX = 'RaChipField';\nvar ChipFieldClasses = {\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledChip = styled(Chip, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"&.\".concat(ChipFieldClasses.chip)] = {\n  margin: 4,\n  cursor: 'inherit'\n}, _a));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,IAAmB,MAAM,oBAAoB;AACpD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAAqBC,cAAc,QAAQ,SAAS;AACpD,SAASC,WAAW,QAAQ,eAAe;AAE3C,IAAMC,aAAa,GAAG,UAGlBC,KAAiC;EAEzB,aAAS,GAAiCA,KAAK,UAAtC;IAAEC,MAAM,GAAyBD,KAAK,OAA9B;IAAEE,SAAS,GAAcF,KAAK,UAAnB;IAAKG,IAAI,UAAKH,KAAK,EAAjD,oCAAyC,CAAF;EAC7C,IAAMI,MAAM,GAAGV,gBAAgB,CAAaM,KAAK,CAAC;EAClD,IAAMK,KAAK,GAAGf,GAAG,CAACc,MAAM,EAAEH,MAAM,CAAC;EACjC,IAAMK,SAAS,GAAGX,YAAY,EAAE;EAEhC,IAAIU,KAAK,IAAI,IAAI,IAAIH,SAAS,EAAE;IAC5B,OACId,oBAACI,UAAU;MACPe,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBb,sBAAsB,CAACO,IAAI,CAAC,GAE/BD,SAAS,IAAII,SAAS,CAACJ,SAAS,EAAE;MAAEQ,CAAC,EAAER;IAAS,CAAE,CAAC,CAC3C;;EAIrB,OACId,oBAACuB,UAAU;IACPF,SAAS,EAAEhB,IAAI,CAACmB,gBAAgB,CAACC,IAAI,EAAEJ,SAAS,CAAC;IACjDK,KAAK,EAAET;EAAK,GACRT,sBAAsB,CAACO,IAAI,CAAC,EAClC;AAEV,CAAC;AAEDJ,aAAa,CAACgB,SAAS,yBAEhBxB,IAAI,CAACwB,SAAS,GACdlB,cAAc,CACpB;AACDE,aAAa,CAACiB,WAAW,GAAG,eAAe;AAE3C,OAAO,IAAMC,SAAS,GAAGnB,WAAW,CAACC,aAAa,CAAC;AAYnD,IAAMmB,MAAM,GAAG,aAAa;AAE5B,IAAMN,gBAAgB,GAAG;EACrBC,IAAI,EAAE,UAAGK,MAAM;CAClB;AAED,IAAMP,UAAU,GAAGtB,MAAM,CAACE,IAAI,EAAE;EAC5B4B,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,UAACpB,KAAK,EAAEqB,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,WACEC,GAAC,YAAKX,gBAAgB,CAACC,IAAI,CAAE,IAAG;EAAEW,MAAM,EAAE,CAAC;EAAEC,MAAM,EAAE;AAAS,CAAE,MAClE","names":["React","styled","get","Chip","Typography","clsx","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","ChipFieldImpl","props","source","emptyText","rest","record","value","translate","component","variant","className","_","StyledChip","ChipFieldClasses","chip","label","propTypes","displayName","ChipField","PREFIX","name","overridesResolver","styles","root","_a","margin","cursor"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\field\\ChipField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport get from 'lodash/get';\nimport Chip, { ChipProps } from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\nconst ChipFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: ChipFieldProps<RecordType>\n) => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext<RecordType>(props);\n    const value = get(record, source);\n    const translate = useTranslate();\n\n    if (value == null && emptyText) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        );\n    }\n\n    return (\n        <StyledChip\n            className={clsx(ChipFieldClasses.chip, className)}\n            label={value}\n            {...sanitizeFieldRestProps(rest)}\n        />\n    );\n};\n\nChipFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Chip.propTypes,\n    ...fieldPropTypes,\n};\nChipFieldImpl.displayName = 'ChipFieldImpl';\n\nexport const ChipField = genericMemo(ChipFieldImpl);\n\nexport interface ChipFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<ChipProps, 'label' | 'children'> {\n    /**\n     * @internal do not use (prop required for TS to be able to cast ChipField as FunctionComponent)\n     */\n    children?: React.ReactNode;\n}\n\nconst PREFIX = 'RaChipField';\n\nconst ChipFieldClasses = {\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledChip = styled(Chip, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`&.${ChipFieldClasses.chip}`]: { margin: 4, cursor: 'inherit' },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}