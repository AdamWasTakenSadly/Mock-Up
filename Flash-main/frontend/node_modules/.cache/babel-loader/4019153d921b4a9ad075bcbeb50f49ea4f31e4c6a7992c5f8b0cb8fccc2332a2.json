{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { isElement } from 'react-is';\nimport { styled } from '@mui/material/styles';\nimport { memo } from 'react';\nimport { IconButton, ListItem, ListItemButton, ListItemText, ListItemSecondaryAction } from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport { useTranslate, useListFilterContext, shallowEqual, useEvent } from 'ra-core';\nimport matches from 'lodash/matches';\nimport pickBy from 'lodash/pickBy';\nvar arePropsEqual = function (prevProps, nextProps) {\n  return prevProps.label === nextProps.label && shallowEqual(prevProps.value, nextProps.value);\n};\n/**\n * Button to enable/disable a list filter.\n *\n * Expects 2 props:\n *\n * - label: The text (or React element) to be displayed for this item.\n *   If it's a string, the component will translate it.\n * - value: An object to be merged into the filter value when enabling the filter\n *   (e.g. { is_published: true, published_at_gte: '2020-07-08' })\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@mui/material';\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * @example // The value prop can contain multiple keys\n *\n * import * as React from 'react';\n * import {\n *     endOfYesterday,\n *     startOfWeek,\n *     subWeeks,\n *     startOfMonth,\n *     subMonths,\n * } from 'date-fns';\n * import { Card, CardContent } from '@mui/material';\n * import AccessTimeIcon from '@mui/icons-material/AccessTime';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Last visited\"\n *                 icon={<AccessTimeIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Today\"\n *                     value={{\n *                         last_seen_gte: endOfYesterday().toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This week\"\n *                     value={{\n *                         last_seen_gte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last week\"\n *                     value={{\n *                         last_seen_gte: subWeeks(\n *                             startOfWeek(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This month\"\n *                     value={{\n *                         last_seen_gte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last month\"\n *                     value={{\n *                         last_seen_gte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Earlier\"\n *                     value={{\n *                         last_seen_gte: undefined,\n *                         last_seen_lte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                     }}\n *                 />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport var FilterListItem = memo(function (props) {\n  var label = props.label,\n    value = props.value,\n    _a = props.isSelected,\n    getIsSelected = _a === void 0 ? DefaultIsSelected : _a,\n    _b = props.toggleFilter,\n    userToggleFilter = _b === void 0 ? DefaultToggleFilter : _b,\n    rest = __rest(props, [\"label\", \"value\", \"isSelected\", \"toggleFilter\"]);\n  var _c = useListFilterContext(),\n    filterValues = _c.filterValues,\n    setFilters = _c.setFilters;\n  var translate = useTranslate();\n  var toggleFilter = useEvent(userToggleFilter);\n  // We can't wrap this function with useEvent as it is called in the render phase\n  var isSelected = getIsSelected(value, filterValues);\n  var handleClick = function () {\n    return setFilters(toggleFilter(value, filterValues), null, false);\n  };\n  return React.createElement(StyledListItem, __assign({\n    onClick: handleClick,\n    selected: isSelected,\n    disablePadding: true\n  }, rest), React.createElement(ListItemButton, {\n    disableGutters: true,\n    className: FilterListItemClasses.listItemButton\n  }, React.createElement(ListItemText, {\n    primary: isElement(label) ? label : translate(label, {\n      _: label\n    }),\n    className: FilterListItemClasses.listItemText,\n    \"data-selected\": isSelected ? 'true' : 'false'\n  }), isSelected && React.createElement(ListItemSecondaryAction, {\n    onClick: function (event) {\n      event.stopPropagation();\n      handleClick();\n    }\n  }, React.createElement(IconButton, {\n    size: \"small\"\n  }, React.createElement(CancelIcon, null)))));\n}, arePropsEqual);\nvar DefaultIsSelected = function (value, filters) {\n  return matches(pickBy(value, function (val) {\n    return typeof val !== 'undefined';\n  }))(filters);\n};\nvar DefaultToggleFilter = function (value, filters) {\n  var isSelected = matches(pickBy(value, function (val) {\n    return typeof val !== 'undefined';\n  }))(filters);\n  if (isSelected) {\n    var keysToRemove_1 = Object.keys(value);\n    return Object.keys(filters).reduce(function (acc, key) {\n      var _a;\n      return keysToRemove_1.includes(key) ? acc : __assign(__assign({}, acc), (_a = {}, _a[key] = filters[key], _a));\n    }, {});\n  }\n  return __assign(__assign({}, filters), value);\n};\nvar PREFIX = 'RaFilterListItem';\nexport var FilterListItemClasses = {\n  listItemButton: \"\".concat(PREFIX, \"-listItemButton\"),\n  listItemText: \"\".concat(PREFIX, \"-listItemText\")\n};\nvar StyledListItem = styled(ListItem, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(FilterListItemClasses.listItemButton)] = {\n  paddingRight: '2em',\n  paddingLeft: '2em'\n}, _a[\"& .\".concat(FilterListItemClasses.listItemText)] = {\n  margin: 0\n}, _a));","map":{"version":3,"mappings":"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","names":["React","isElement","styled","memo","IconButton","ListItem","ListItemButton","ListItemText","ListItemSecondaryAction","CancelIcon","useTranslate","useListFilterContext","shallowEqual","useEvent","matches","pickBy","arePropsEqual","prevProps","nextProps","label","value","FilterListItem","props","_a","getIsSelected","DefaultIsSelected","_b","userToggleFilter","DefaultToggleFilter","rest","filterValues","setFilters","translate","toggleFilter","isSelected","handleClick","StyledListItem","onClick","selected","disablePadding","disableGutters","className","FilterListItemClasses","listItemButton","primary","_","listItemText","event","stopPropagation","size","filters","val","keysToRemove_1","Object","keys","reduce","acc","key","includes","__assign","PREFIX","name","overridesResolver","styles","root","paddingRight","paddingLeft","margin"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\list\\filter\\FilterListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isElement } from 'react-is';\nimport { styled } from '@mui/material/styles';\nimport { memo, ReactElement } from 'react';\nimport {\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemProps,\n    ListItemText,\n    ListItemSecondaryAction,\n} from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport {\n    useTranslate,\n    useListFilterContext,\n    shallowEqual,\n    useEvent,\n} from 'ra-core';\nimport matches from 'lodash/matches';\nimport pickBy from 'lodash/pickBy';\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    prevProps.label === nextProps.label &&\n    shallowEqual(prevProps.value, nextProps.value);\n\n/**\n * Button to enable/disable a list filter.\n *\n * Expects 2 props:\n *\n * - label: The text (or React element) to be displayed for this item.\n *   If it's a string, the component will translate it.\n * - value: An object to be merged into the filter value when enabling the filter\n *   (e.g. { is_published: true, published_at_gte: '2020-07-08' })\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@mui/material';\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * @example // The value prop can contain multiple keys\n *\n * import * as React from 'react';\n * import {\n *     endOfYesterday,\n *     startOfWeek,\n *     subWeeks,\n *     startOfMonth,\n *     subMonths,\n * } from 'date-fns';\n * import { Card, CardContent } from '@mui/material';\n * import AccessTimeIcon from '@mui/icons-material/AccessTime';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Last visited\"\n *                 icon={<AccessTimeIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Today\"\n *                     value={{\n *                         last_seen_gte: endOfYesterday().toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This week\"\n *                     value={{\n *                         last_seen_gte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last week\"\n *                     value={{\n *                         last_seen_gte: subWeeks(\n *                             startOfWeek(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This month\"\n *                     value={{\n *                         last_seen_gte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last month\"\n *                     value={{\n *                         last_seen_gte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Earlier\"\n *                     value={{\n *                         last_seen_gte: undefined,\n *                         last_seen_lte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                     }}\n *                 />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterListItem = memo((props: FilterListItemProps) => {\n    const {\n        label,\n        value,\n        isSelected: getIsSelected = DefaultIsSelected,\n        toggleFilter: userToggleFilter = DefaultToggleFilter,\n        ...rest\n    } = props;\n    const { filterValues, setFilters } = useListFilterContext();\n    const translate = useTranslate();\n    const toggleFilter = useEvent(userToggleFilter);\n\n    // We can't wrap this function with useEvent as it is called in the render phase\n    const isSelected = getIsSelected(value, filterValues);\n\n    const handleClick = () =>\n        setFilters(toggleFilter(value, filterValues), null, false);\n\n    return (\n        <StyledListItem\n            onClick={handleClick}\n            selected={isSelected}\n            disablePadding\n            {...rest}\n        >\n            <ListItemButton\n                disableGutters\n                className={FilterListItemClasses.listItemButton}\n            >\n                <ListItemText\n                    primary={\n                        isElement(label)\n                            ? label\n                            : translate(label, { _: label })\n                    }\n                    className={FilterListItemClasses.listItemText}\n                    data-selected={isSelected ? 'true' : 'false'}\n                />\n                {isSelected && (\n                    <ListItemSecondaryAction\n                        onClick={event => {\n                            event.stopPropagation();\n                            handleClick();\n                        }}\n                    >\n                        <IconButton size=\"small\">\n                            <CancelIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                )}\n            </ListItemButton>\n        </StyledListItem>\n    );\n}, arePropsEqual);\n\nconst DefaultIsSelected = (value, filters) =>\n    matches(pickBy(value, val => typeof val !== 'undefined'))(filters);\n\nconst DefaultToggleFilter = (value, filters) => {\n    const isSelected = matches(\n        pickBy(value, val => typeof val !== 'undefined')\n    )(filters);\n\n    if (isSelected) {\n        const keysToRemove = Object.keys(value);\n        return Object.keys(filters).reduce(\n            (acc, key) =>\n                keysToRemove.includes(key)\n                    ? acc\n                    : { ...acc, [key]: filters[key] },\n            {}\n        );\n    }\n\n    return { ...filters, ...value };\n};\n\nconst PREFIX = 'RaFilterListItem';\n\nexport const FilterListItemClasses = {\n    listItemButton: `${PREFIX}-listItemButton`,\n    listItemText: `${PREFIX}-listItemText`,\n};\n\nconst StyledListItem = styled(ListItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${FilterListItemClasses.listItemButton}`]: {\n        paddingRight: '2em',\n        paddingLeft: '2em',\n    },\n    [`& .${FilterListItemClasses.listItemText}`]: {\n        margin: 0,\n    },\n});\n\nexport interface FilterListItemProps extends Omit<ListItemProps, 'value'> {\n    label: string | ReactElement;\n    value: any;\n    toggleFilter?: (value: any, filters: any) => any;\n    isSelected?: (value: any, filters: any) => boolean;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}