{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppBar as MuiAppBar, Toolbar, useMediaQuery } from '@mui/material';\nimport { ComponentPropType, useLocales } from 'ra-core';\nimport { SidebarToggleButton } from './SidebarToggleButton';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { UserMenu } from './UserMenu';\nimport { HideOnScroll } from './HideOnScroll';\nimport { TitlePortal } from './TitlePortal';\nimport { LocalesMenuButton } from '../button';\nimport { useThemesContext } from './Theme/useThemesContext';\nimport { ToggleThemeButton } from '../button/ToggleThemeButton';\n/**\n * The AppBar component renders a custom MuiAppBar.\n *\n * @param {Object} props\n * @param {ReactNode} props.children React node/s to be rendered as children of the AppBar\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.color The color of the AppBar\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\n *\n * @example // add a custom button to the AppBar\n *\n * const MyAppBar = () => (\n *   <AppBar>\n *     <TitlePortal />\n *     <MyCustomButton />\n *   </AppBar>\n * );\n *\n * @example // without a user menu\n *\n * const MyAppBar = () => <AppBar userMenu={false} />;\n */\nexport var AppBar = memo(function (props) {\n  var alwaysOn = props.alwaysOn,\n    children = props.children,\n    className = props.className,\n    _a = props.color,\n    color = _a === void 0 ? 'secondary' : _a,\n    open = props.open,\n    title = props.title,\n    _b = props.toolbar,\n    toolbar = _b === void 0 ? defaultToolbarElement : _b,\n    _c = props.userMenu,\n    userMenu = _c === void 0 ? DefaultUserMenu : _c,\n    _d = props.container,\n    Container = _d === void 0 ? alwaysOn ? 'div' : HideOnScroll : _d,\n    rest = __rest(props, [\"alwaysOn\", \"children\", \"className\", \"color\", \"open\", \"title\", \"toolbar\", \"userMenu\", \"container\"]);\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  return React.createElement(Container, {\n    className: className\n  }, React.createElement(StyledAppBar, __assign({\n    className: AppBarClasses.appBar,\n    color: color\n  }, rest), React.createElement(Toolbar, {\n    disableGutters: true,\n    variant: isXSmall ? 'regular' : 'dense',\n    className: AppBarClasses.toolbar\n  }, React.createElement(SidebarToggleButton, {\n    className: AppBarClasses.menuButton\n  }), Children.count(children) === 0 ? React.createElement(TitlePortal, {\n    className: AppBarClasses.title\n  }) : children, toolbar, typeof userMenu === 'boolean' ? userMenu === true ? React.createElement(UserMenu, null) : null : userMenu)));\n});\nvar DefaultToolbar = function () {\n  var locales = useLocales();\n  var darkTheme = useThemesContext().darkTheme;\n  return React.createElement(React.Fragment, null, locales && locales.length > 1 ? React.createElement(LocalesMenuButton, null) : null, darkTheme && React.createElement(ToggleThemeButton, null), React.createElement(LoadingIndicator, null));\n};\nvar defaultToolbarElement = React.createElement(DefaultToolbar, null);\nAppBar.propTypes = {\n  alwaysOn: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']),\n  container: ComponentPropType,\n  /**\n   * @deprecated\n   */\n  open: PropTypes.bool,\n  toolbar: PropTypes.element,\n  userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool])\n};\nvar DefaultUserMenu = React.createElement(UserMenu, null);\nvar PREFIX = 'RaAppBar';\nexport var AppBarClasses = {\n  appBar: \"\".concat(PREFIX, \"-appBar\"),\n  toolbar: \"\".concat(PREFIX, \"-toolbar\"),\n  menuButton: \"\".concat(PREFIX, \"-menuButton\"),\n  menuButtonIconClosed: \"\".concat(PREFIX, \"-menuButtonIconClosed\"),\n  menuButtonIconOpen: \"\".concat(PREFIX, \"-menuButtonIconOpen\"),\n  title: \"\".concat(PREFIX, \"-title\")\n};\nvar StyledAppBar = styled(MuiAppBar, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b, _c;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(AppBarClasses.toolbar)] = (_c = {\n    padding: \"0 \".concat(theme.spacing(1))\n  }, _c[theme.breakpoints.down('md')] = {\n    minHeight: theme.spacing(6)\n  }, _c), _b[\"& .\".concat(AppBarClasses.menuButton)] = {\n    marginRight: '0.2em'\n  }, _b[\"& .\".concat(AppBarClasses.title)] = {}, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","Children","memo","PropTypes","AppBar","MuiAppBar","Toolbar","useMediaQuery","ComponentPropType","useLocales","SidebarToggleButton","LoadingIndicator","UserMenu","HideOnScroll","TitlePortal","LocalesMenuButton","useThemesContext","ToggleThemeButton","props","children","className","_a","color","open","title","_b","toolbar","defaultToolbarElement","_c","userMenu","DefaultUserMenu","_d","Container","alwaysOn","rest","isXSmall","breakpoints","down","StyledAppBar","AppBarClasses","appBar","disableGutters","variant","menuButton","count","DefaultToolbar","locales","length","darkTheme","propTypes","bool","node","string","oneOf","container","element","oneOfType","PREFIX","menuButtonIconClosed","menuButtonIconOpen","name","overridesResolver","styles","root","theme","padding","spacing","minHeight","marginRight"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\layout\\AppBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    AppBar as MuiAppBar,\n    AppBarProps as MuiAppBarProps,\n    Toolbar,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { ComponentPropType, useLocales } from 'ra-core';\n\nimport { SidebarToggleButton } from './SidebarToggleButton';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { UserMenu } from './UserMenu';\nimport { HideOnScroll } from './HideOnScroll';\nimport { TitlePortal } from './TitlePortal';\nimport { LocalesMenuButton } from '../button';\nimport { useThemesContext } from './Theme/useThemesContext';\nimport { ToggleThemeButton } from '../button/ToggleThemeButton';\n\n/**\n * The AppBar component renders a custom MuiAppBar.\n *\n * @param {Object} props\n * @param {ReactNode} props.children React node/s to be rendered as children of the AppBar\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.color The color of the AppBar\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\n *\n * @example // add a custom button to the AppBar\n *\n * const MyAppBar = () => (\n *   <AppBar>\n *     <TitlePortal />\n *     <MyCustomButton />\n *   </AppBar>\n * );\n *\n * @example // without a user menu\n *\n * const MyAppBar = () => <AppBar userMenu={false} />;\n */\nexport const AppBar: FC<AppBarProps> = memo(props => {\n    const {\n        alwaysOn,\n        children,\n        className,\n        color = 'secondary',\n        open,\n        title,\n        toolbar = defaultToolbarElement,\n        userMenu = DefaultUserMenu,\n        container: Container = alwaysOn ? 'div' : HideOnScroll,\n        ...rest\n    } = props;\n\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n\n    return (\n        <Container className={className}>\n            <StyledAppBar\n                className={AppBarClasses.appBar}\n                color={color}\n                {...rest}\n            >\n                <Toolbar\n                    disableGutters\n                    variant={isXSmall ? 'regular' : 'dense'}\n                    className={AppBarClasses.toolbar}\n                >\n                    <SidebarToggleButton className={AppBarClasses.menuButton} />\n                    {Children.count(children) === 0 ? (\n                        <TitlePortal className={AppBarClasses.title} />\n                    ) : (\n                        children\n                    )}\n                    {toolbar}\n                    {typeof userMenu === 'boolean' ? (\n                        userMenu === true ? (\n                            <UserMenu />\n                        ) : null\n                    ) : (\n                        userMenu\n                    )}\n                </Toolbar>\n            </StyledAppBar>\n        </Container>\n    );\n});\n\nconst DefaultToolbar = () => {\n    const locales = useLocales();\n    const { darkTheme } = useThemesContext();\n    return (\n        <>\n            {locales && locales.length > 1 ? <LocalesMenuButton /> : null}\n            {darkTheme && <ToggleThemeButton />}\n            <LoadingIndicator />\n        </>\n    );\n};\n\nconst defaultToolbarElement = <DefaultToolbar />;\n\nAppBar.propTypes = {\n    alwaysOn: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: PropTypes.oneOf([\n        'default',\n        'inherit',\n        'primary',\n        'secondary',\n        'transparent',\n    ]),\n    container: ComponentPropType,\n    /**\n     * @deprecated\n     */\n    open: PropTypes.bool,\n    toolbar: PropTypes.element,\n    userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n};\n\nconst DefaultUserMenu = <UserMenu />;\n\nexport interface AppBarProps extends Omit<MuiAppBarProps, 'title'> {\n    /**\n     * This prop is injected by Layout. You should not use it directly unless\n     * you are using a custom layout.\n     * If you are using the default layout, use `<Layout appBarAlwaysOn>` instead.\n     */\n    alwaysOn?: boolean;\n    container?: React.ElementType<any>;\n    /**\n     * @deprecated injected by Layout but not used by this AppBar\n     */\n    open?: boolean;\n    /**\n     * @deprecated injected by Layout but not used by this AppBar\n     */\n    title?: string | JSX.Element;\n    toolbar?: JSX.Element;\n    userMenu?: JSX.Element | boolean;\n}\n\nconst PREFIX = 'RaAppBar';\n\nexport const AppBarClasses = {\n    appBar: `${PREFIX}-appBar`,\n    toolbar: `${PREFIX}-toolbar`,\n    menuButton: `${PREFIX}-menuButton`,\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n    title: `${PREFIX}-title`,\n};\n\nconst StyledAppBar = styled(MuiAppBar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AppBarClasses.toolbar}`]: {\n        padding: `0 ${theme.spacing(1)}`,\n        [theme.breakpoints.down('md')]: {\n            minHeight: theme.spacing(6),\n        },\n    },\n    [`& .${AppBarClasses.menuButton}`]: {\n        marginRight: '0.2em',\n    },\n    [`& .${AppBarClasses.title}`]: {},\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}