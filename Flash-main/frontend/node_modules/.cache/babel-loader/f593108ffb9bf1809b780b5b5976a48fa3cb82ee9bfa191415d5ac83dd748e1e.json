{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\nimport { useReferenceOneFieldController, useRecordContext, ResourceContextProvider, useCreatePath, useTranslate } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport { ReferenceFieldView } from './ReferenceField';\n/**\n * Render the related record in a one-to-one relationship\n *\n * Expects a single field as child\n *\n * @example // display the bio of the current author\n * <ReferenceOneField reference=\"bios\" target=\"author_id\">\n *     <TextField source=\"body\" />\n * </ReferenceOneField>\n */\nexport var ReferenceOneField = function (props) {\n  var children = props.children,\n    reference = props.reference,\n    source = props.source,\n    target = props.target,\n    emptyText = props.emptyText,\n    sort = props.sort,\n    filter = props.filter,\n    _a = props.link,\n    link = _a === void 0 ? false : _a,\n    queryOptions = props.queryOptions;\n  var record = useRecordContext(props);\n  var createPath = useCreatePath();\n  var translate = useTranslate();\n  var _b = useReferenceOneFieldController({\n      record: record,\n      reference: reference,\n      source: source,\n      target: target,\n      sort: sort,\n      filter: filter,\n      queryOptions: queryOptions\n    }),\n    isLoading = _b.isLoading,\n    isFetching = _b.isFetching,\n    referenceRecord = _b.referenceRecord,\n    error = _b.error,\n    refetch = _b.refetch;\n  var resourceLinkPath = link === false ? false : createPath({\n    resource: reference,\n    id: referenceRecord === null || referenceRecord === void 0 ? void 0 : referenceRecord.id,\n    type: typeof link === 'function' ? link(record, reference) : link\n  });\n  return !record || !isLoading && referenceRecord == null ? emptyText ? React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, emptyText && translate(emptyText, {\n    _: emptyText\n  })) : null : React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ReferenceFieldView, {\n    isLoading: isLoading,\n    isFetching: isFetching,\n    referenceRecord: referenceRecord,\n    resourceLinkPath: resourceLinkPath,\n    reference: reference,\n    refetch: refetch,\n    error: error\n  }, children));\n};\nReferenceOneField.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  source: PropTypes.string.isRequired,\n  target: PropTypes.string.isRequired,\n  queryOptions: PropTypes.any\n};\nReferenceOneField.defaultProps = {\n  source: 'id',\n  // disable sorting on this field by default as its default source prop ('id')\n  // will match the default sort ({ field: 'id', order: 'DESC'})\n  // leading to an incorrect sort indicator in a datagrid header\n  sortable: false\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAoB,MAAM,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SACIC,8BAA8B,EAC9BC,gBAAgB,EAChBC,uBAAuB,EAEvBC,aAAa,EACbC,YAAY,QAGT,SAAS;AAEhB,SAASC,cAAc,QAAoB,SAAS;AACpD,SAASC,kBAAkB,QAAQ,kBAAkB;AAErD;;;;;;;;;;AAUA,OAAO,IAAMC,iBAAiB,GAAG,UAI7BC,KAA8D;EAG1D,YAAQ,GASRA,KAAK,SATG;IACRC,SAAS,GAQTD,KAAK,UARI;IACTE,MAAM,GAONF,KAAK,OAPC;IACNG,MAAM,GAMNH,KAAK,OANC;IACNI,SAAS,GAKTJ,KAAK,UALI;IACTK,IAAI,GAIJL,KAAK,KAJD;IACJM,MAAM,GAGNN,KAAK,OAHC;IACNO,KAEAP,KAAK,KAFO;IAAZQ,IAAI,mBAAG,KAAK;IACZC,YAAY,GACZT,KAAK,aADO;EAEhB,IAAMU,MAAM,GAAGjB,gBAAgB,CAAaO,KAAK,CAAC;EAClD,IAAMW,UAAU,GAAGhB,aAAa,EAAE;EAClC,IAAMiB,SAAS,GAAGhB,YAAY,EAAE;EAE1B,SAMFJ,8BAA8B,CAAsB;MACpDkB,MAAM;MACNT,SAAS;MACTC,MAAM;MACNC,MAAM;MACNE,IAAI;MACJC,MAAM;MACNG,YAAY;KACf,CAAC;IAbEI,SAAS;IACTC,UAAU;IACVC,eAAe;IACfC,KAAK;IACLC,OAAO,aAST;EAEF,IAAMC,gBAAgB,GAClBV,IAAI,KAAK,KAAK,GACR,KAAK,GACLG,UAAU,CAAC;IACPQ,QAAQ,EAAElB,SAAS;IACnBmB,EAAE,EAAEL,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEK,EAAE;IACvBC,IAAI,EACA,OAAOb,IAAI,KAAK,UAAU,GACpBA,IAAI,CAACE,MAAM,EAAET,SAAS,CAAC,GACvBO;GACb,CAAC;EAEZ,OAAO,CAACE,MAAM,IAAK,CAACG,SAAS,IAAIE,eAAe,IAAI,IAAK,GACrDX,SAAS,GACLf,oBAACE,UAAU;IAAC+B,SAAS,EAAC,MAAM;IAACC,OAAO,EAAC;EAAO,GACvCnB,SAAS,IAAIQ,SAAS,CAACR,SAAS,EAAE;IAAEoB,CAAC,EAAEpB;EAAS,CAAE,CAAC,CAC3C,GACb,IAAI,GAERf,oBAACK,uBAAuB;IAAC+B,KAAK,EAAExB;EAAS,GACrCZ,oBAACS,kBAAkB;IACfe,SAAS,EAAEA,SAAS;IACpBC,UAAU,EAAEA,UAAU;IACtBC,eAAe,EAAEA,eAAe;IAChCG,gBAAgB,EAAEA,gBAAgB;IAClCjB,SAAS,EAAEA,SAAS;IACpBgB,OAAO,EAAEA,OAAO;IAChBD,KAAK,EAAEA;EAAK,GAEXU,QAAQ,CACQ,CAE5B;AACL,CAAC;AAkBD3B,iBAAiB,CAAC4B,SAAS,GAAG;EAC1BD,QAAQ,EAAEpC,SAAS,CAACsC,IAAI;EACxBC,SAAS,EAAEvC,SAAS,CAACwC,MAAM;EAC3BC,KAAK,EAAElC,cAAc,CAACkC,KAAK;EAC3BrB,MAAM,EAAEpB,SAAS,CAAC0C,GAAG;EACrB/B,SAAS,EAAEX,SAAS,CAACwC,MAAM,CAACG,UAAU;EACtC/B,MAAM,EAAEZ,SAAS,CAACwC,MAAM,CAACG,UAAU;EACnC9B,MAAM,EAAEb,SAAS,CAACwC,MAAM,CAACG,UAAU;EACnCxB,YAAY,EAAEnB,SAAS,CAAC0C;CAC3B;AAEDjC,iBAAiB,CAACmC,YAAY,GAAG;EAC7BhC,MAAM,EAAE,IAAI;EACZ;EACA;EACA;EACAiC,QAAQ,EAAE;CACb","names":["React","PropTypes","Typography","useReferenceOneFieldController","useRecordContext","ResourceContextProvider","useCreatePath","useTranslate","fieldPropTypes","ReferenceFieldView","ReferenceOneField","props","reference","source","target","emptyText","sort","filter","_a","link","queryOptions","record","createPath","translate","isLoading","isFetching","referenceRecord","error","refetch","resourceLinkPath","resource","id","type","component","variant","_","value","children","propTypes","node","className","string","label","any","isRequired","defaultProps","sortable"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\field\\ReferenceOneField.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { UseQueryOptions } from 'react-query';\nimport { Typography } from '@mui/material';\nimport {\n    useReferenceOneFieldController,\n    useRecordContext,\n    ResourceContextProvider,\n    LinkToType,\n    useCreatePath,\n    useTranslate,\n    SortPayload,\n    RaRecord,\n} from 'ra-core';\n\nimport { fieldPropTypes, FieldProps } from './types';\nimport { ReferenceFieldView } from './ReferenceField';\n\n/**\n * Render the related record in a one-to-one relationship\n *\n * Expects a single field as child\n *\n * @example // display the bio of the current author\n * <ReferenceOneField reference=\"bios\" target=\"author_id\">\n *     <TextField source=\"body\" />\n * </ReferenceOneField>\n */\nexport const ReferenceOneField = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: ReferenceOneFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const {\n        children,\n        reference,\n        source,\n        target,\n        emptyText,\n        sort,\n        filter,\n        link = false,\n        queryOptions,\n    } = props;\n    const record = useRecordContext<RecordType>(props);\n    const createPath = useCreatePath();\n    const translate = useTranslate();\n\n    const {\n        isLoading,\n        isFetching,\n        referenceRecord,\n        error,\n        refetch,\n    } = useReferenceOneFieldController<ReferenceRecordType>({\n        record,\n        reference,\n        source,\n        target,\n        sort,\n        filter,\n        queryOptions,\n    });\n\n    const resourceLinkPath =\n        link === false\n            ? false\n            : createPath({\n                  resource: reference,\n                  id: referenceRecord?.id,\n                  type:\n                      typeof link === 'function'\n                          ? link(record, reference)\n                          : link,\n              });\n\n    return !record || (!isLoading && referenceRecord == null) ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null\n    ) : (\n        <ResourceContextProvider value={reference}>\n            <ReferenceFieldView\n                isLoading={isLoading}\n                isFetching={isFetching}\n                referenceRecord={referenceRecord}\n                resourceLinkPath={resourceLinkPath}\n                reference={reference}\n                refetch={refetch}\n                error={error}\n            >\n                {children}\n            </ReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceOneFieldProps<\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n> extends FieldProps<RecordType> {\n    children?: ReactNode;\n    reference: string;\n    target: string;\n    sort?: SortPayload;\n    filter?: any;\n    link?: LinkToType<RecordType>;\n    queryOptions?: UseQueryOptions<{\n        data: ReferenceRecordType[];\n        total: number;\n    }> & { meta?: any };\n}\n\nReferenceOneField.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    source: PropTypes.string.isRequired,\n    target: PropTypes.string.isRequired,\n    queryOptions: PropTypes.any,\n};\n\nReferenceOneField.defaultProps = {\n    source: 'id',\n    // disable sorting on this field by default as its default source prop ('id')\n    // will match the default sort ({ field: 'id', order: 'DESC'})\n    // leading to an incorrect sort indicator in a datagrid header\n    sortable: false,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}