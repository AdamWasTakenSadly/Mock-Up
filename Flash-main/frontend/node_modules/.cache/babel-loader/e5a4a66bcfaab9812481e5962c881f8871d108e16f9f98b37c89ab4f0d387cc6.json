{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useEffect } from 'react';\nimport { useController } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\nimport { composeValidators } from './validate';\nimport isRequired from './isRequired';\nimport { useFormGroupContext } from './useFormGroupContext';\nimport { useGetValidationErrorMessage } from './useGetValidationErrorMessage';\nimport { useFormGroups } from './useFormGroups';\nimport { useApplyInputDefaultValues } from './useApplyInputDefaultValues';\nimport { useEvent } from '../util';\n// replace null or undefined values by empty string to avoid controlled/uncontrolled input warning\nvar defaultFormat = function (value) {\n  return value == null ? '' : value;\n};\n// parse empty string into null as it's more suitable for a majority of backends\nvar defaultParse = function (value) {\n  return value === '' ? null : value;\n};\nexport var useInput = function (props) {\n  var defaultValue = props.defaultValue,\n    _a = props.format,\n    format = _a === void 0 ? defaultFormat : _a,\n    id = props.id,\n    isRequiredOption = props.isRequired,\n    name = props.name,\n    initialOnBlur = props.onBlur,\n    initialOnChange = props.onChange,\n    _b = props.parse,\n    parse = _b === void 0 ? defaultParse : _b,\n    source = props.source,\n    validate = props.validate,\n    options = __rest(props, [\"defaultValue\", \"format\", \"id\", \"isRequired\", \"name\", \"onBlur\", \"onChange\", \"parse\", \"source\", \"validate\"]);\n  var finalName = name || source;\n  var formGroupName = useFormGroupContext();\n  var formGroups = useFormGroups();\n  var record = useRecordContext();\n  var getValidationErrorMessage = useGetValidationErrorMessage();\n  useEffect(function () {\n    if (!formGroups || formGroupName == null) {\n      return;\n    }\n    formGroups.registerField(source, formGroupName);\n    return function () {\n      formGroups.unregisterField(source, formGroupName);\n    };\n  }, [formGroups, formGroupName, source]);\n  var sanitizedValidate = Array.isArray(validate) ? composeValidators(validate) : validate;\n  // Fetch the defaultValue from the record if available or apply the provided defaultValue.\n  // This ensures dynamically added inputs have their value set correctly (ArrayInput for example).\n  // We don't do this for the form level defaultValues so that it works as it should in react-hook-form\n  // (i.e. field level defaultValue override form level defaultValues for this field).\n  var _c = useController(__assign({\n      name: finalName,\n      defaultValue: get(record, source, defaultValue),\n      rules: {\n        validate: function (value, values) {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var error;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  if (!sanitizedValidate) return [2 /*return*/, true];\n                  return [4 /*yield*/, sanitizedValidate(value, values, props)];\n                case 1:\n                  error = _a.sent();\n                  if (!error) return [2 /*return*/, true];\n                  return [2 /*return*/, getValidationErrorMessage(error)];\n              }\n            });\n          });\n        }\n      }\n    }, options)),\n    controllerField = _c.field,\n    fieldState = _c.fieldState,\n    formState = _c.formState;\n  // Because our forms may receive an asynchronously loaded record for instance,\n  // they may reset their default values which would override the input default value.\n  // This hook ensures that the input default value is applied when a new record is loaded but has\n  // no value for the input.\n  useApplyInputDefaultValues({\n    inputProps: props\n  });\n  var onBlur = useEvent(function () {\n    var event = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      event[_i] = arguments[_i];\n    }\n    controllerField.onBlur();\n    if (initialOnBlur) {\n      initialOnBlur.apply(void 0, event);\n    }\n  });\n  var onChange = useEvent(function () {\n    var _a, _b, _c, _d, _e;\n    var event = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      event[_i] = arguments[_i];\n    }\n    var eventOrValue = props.type === 'checkbox' && ((_b = (_a = event[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.value) === 'on' ? event[0].target.checked : (_e = (_d = (_c = event[0]) === null || _c === void 0 ? void 0 : _c.target) === null || _d === void 0 ? void 0 : _d.value) !== null && _e !== void 0 ? _e : event[0];\n    controllerField.onChange(parse ? parse(eventOrValue) : eventOrValue);\n    if (initialOnChange) {\n      initialOnChange.apply(void 0, event);\n    }\n  });\n  var field = __assign(__assign({}, controllerField), {\n    value: format ? format(controllerField.value) : controllerField.value,\n    onBlur: onBlur,\n    onChange: onChange\n  });\n  return {\n    id: id || source,\n    field: field,\n    fieldState: fieldState,\n    formState: formState,\n    isRequired: isRequiredOption || isRequired(validate)\n  };\n};","map":{"version":3,"mappings":"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","names":["useEffect","useController","get","useRecordContext","composeValidators","isRequired","useFormGroupContext","useGetValidationErrorMessage","useFormGroups","useApplyInputDefaultValues","useEvent","defaultFormat","value","defaultParse","useInput","props","_a","format","id","isRequiredOption","name","initialOnBlur","initialOnChange","_b","parse","source","validate","options","finalName","formGroupName","formGroups","record","getValidationErrorMessage","registerField","unregisterField","sanitizedValidate","Array","isArray","defaultValue","rules","values","error","controllerField","fieldState","formState","inputProps","onBlur","_i","event","onChange","eventOrValue","type","target","checked","field"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-core\\src\\form\\useInput.ts"],"sourcesContent":["import { ReactElement, useEffect } from 'react';\nimport {\n    ControllerFieldState,\n    ControllerRenderProps,\n    useController,\n    UseControllerProps,\n    UseControllerReturn,\n    UseFormStateReturn,\n} from 'react-hook-form';\nimport get from 'lodash/get';\n\nimport { useRecordContext } from '../controller';\nimport { composeValidators, Validator } from './validate';\nimport isRequired from './isRequired';\nimport { useFormGroupContext } from './useFormGroupContext';\nimport { useGetValidationErrorMessage } from './useGetValidationErrorMessage';\nimport { useFormGroups } from './useFormGroups';\nimport { useApplyInputDefaultValues } from './useApplyInputDefaultValues';\nimport { useEvent } from '../util';\n\n// replace null or undefined values by empty string to avoid controlled/uncontrolled input warning\nconst defaultFormat = (value: any) => (value == null ? '' : value);\n// parse empty string into null as it's more suitable for a majority of backends\nconst defaultParse = (value: string) => (value === '' ? null : value);\n\nexport const useInput = <ValueType = any>(\n    props: InputProps<ValueType>\n): UseInputValue => {\n    const {\n        defaultValue,\n        format = defaultFormat,\n        id,\n        isRequired: isRequiredOption,\n        name,\n        onBlur: initialOnBlur,\n        onChange: initialOnChange,\n        parse = defaultParse,\n        source,\n        validate,\n        ...options\n    } = props;\n    const finalName = name || source;\n    const formGroupName = useFormGroupContext();\n    const formGroups = useFormGroups();\n    const record = useRecordContext();\n    const getValidationErrorMessage = useGetValidationErrorMessage();\n\n    useEffect(() => {\n        if (!formGroups || formGroupName == null) {\n            return;\n        }\n\n        formGroups.registerField(source, formGroupName);\n\n        return () => {\n            formGroups.unregisterField(source, formGroupName);\n        };\n    }, [formGroups, formGroupName, source]);\n\n    const sanitizedValidate = Array.isArray(validate)\n        ? composeValidators(validate)\n        : validate;\n\n    // Fetch the defaultValue from the record if available or apply the provided defaultValue.\n    // This ensures dynamically added inputs have their value set correctly (ArrayInput for example).\n    // We don't do this for the form level defaultValues so that it works as it should in react-hook-form\n    // (i.e. field level defaultValue override form level defaultValues for this field).\n    const { field: controllerField, fieldState, formState } = useController({\n        name: finalName,\n        defaultValue: get(record, source, defaultValue),\n        rules: {\n            validate: async (value, values) => {\n                if (!sanitizedValidate) return true;\n                const error = await sanitizedValidate(value, values, props);\n\n                if (!error) return true;\n                return getValidationErrorMessage(error);\n            },\n        },\n        ...options,\n    });\n\n    // Because our forms may receive an asynchronously loaded record for instance,\n    // they may reset their default values which would override the input default value.\n    // This hook ensures that the input default value is applied when a new record is loaded but has\n    // no value for the input.\n    useApplyInputDefaultValues({ inputProps: props });\n\n    const onBlur = useEvent((...event: any[]) => {\n        controllerField.onBlur();\n        if (initialOnBlur) {\n            initialOnBlur(...event);\n        }\n    });\n\n    const onChange = useEvent((...event: any[]) => {\n        const eventOrValue = (props.type === 'checkbox' &&\n        event[0]?.target?.value === 'on'\n            ? event[0].target.checked\n            : event[0]?.target?.value ?? event[0]) as any;\n        controllerField.onChange(parse ? parse(eventOrValue) : eventOrValue);\n        if (initialOnChange) {\n            initialOnChange(...event);\n        }\n    });\n\n    const field = {\n        ...controllerField,\n        value: format ? format(controllerField.value) : controllerField.value,\n        onBlur,\n        onChange,\n    };\n\n    return {\n        id: id || source,\n        field,\n        fieldState,\n        formState,\n        isRequired: isRequiredOption || isRequired(validate),\n    };\n};\n\nexport type InputProps<ValueType = any> = Omit<\n    UseControllerProps,\n    'name' | 'defaultValue' | 'rules'\n> &\n    Partial<UseControllerReturn> & {\n        alwaysOn?: any;\n        defaultValue?: any;\n        format?: (value: ValueType) => any;\n        id?: string;\n        isRequired?: boolean;\n        label?: string | ReactElement | false;\n        helperText?: string | ReactElement | false;\n        name?: string;\n        onBlur?: (...event: any[]) => void;\n        onChange?: (...event: any[]) => void;\n        parse?: (value: any) => ValueType;\n        type?: string;\n        resource?: string;\n        source: string;\n        validate?: Validator | Validator[];\n    };\n\nexport type UseInputValue = {\n    id: string;\n    isRequired: boolean;\n    field: ControllerRenderProps;\n    formState: UseFormStateReturn<Record<string, string>>;\n    fieldState: ControllerFieldState;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}