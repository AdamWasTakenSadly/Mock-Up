{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, useCallback, useMemo, useRef, useState } from 'react';\nimport { styled } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { FormDataConsumer, useRecordContext, useTranslate } from 'ra-core';\nimport { useArrayInput } from './useArrayInput';\nimport { SimpleFormIteratorClasses, SimpleFormIteratorPrefix } from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport { SimpleFormIteratorItem } from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\nimport { ClearArrayButton } from './ClearArrayButton';\nimport { Confirm } from '../../layout';\nexport var SimpleFormIterator = function (props) {\n  var _a = props.addButton,\n    addButton = _a === void 0 ? React.createElement(DefaultAddItemButton, null) : _a,\n    _b = props.removeButton,\n    removeButton = _b === void 0 ? React.createElement(DefaultRemoveItemButton, null) : _b,\n    _c = props.reOrderButtons,\n    reOrderButtons = _c === void 0 ? React.createElement(DefaultReOrderButtons, null) : _c,\n    children = props.children,\n    className = props.className,\n    resource = props.resource,\n    source = props.source,\n    disabled = props.disabled,\n    disableAdd = props.disableAdd,\n    disableClear = props.disableClear,\n    disableRemove = props.disableRemove,\n    disableReordering = props.disableReordering,\n    inline = props.inline,\n    _d = props.getItemLabel,\n    getItemLabel = _d === void 0 ? false : _d,\n    fullWidth = props.fullWidth,\n    sx = props.sx;\n  var _e = useState(false),\n    confirmIsOpen = _e[0],\n    setConfirmIsOpen = _e[1];\n  var _f = useArrayInput(props),\n    append = _f.append,\n    fields = _f.fields,\n    move = _f.move,\n    remove = _f.remove,\n    replace = _f.replace;\n  var translate = useTranslate();\n  var record = useRecordContext(props);\n  var initialDefaultValue = useRef({});\n  var removeField = useCallback(function (index) {\n    remove(index);\n  }, [remove]);\n  if (fields.length > 0) {\n    var _g = fields[0],\n      id = _g.id,\n      rest = __rest(_g, [\"id\"]);\n    initialDefaultValue.current = rest;\n    for (var k in initialDefaultValue.current) initialDefaultValue.current[k] = null;\n  }\n  var addField = useCallback(function (item) {\n    if (item === void 0) {\n      item = undefined;\n    }\n    var defaultValue = item;\n    if (item == null) {\n      defaultValue = initialDefaultValue.current;\n      if (Children.count(children) === 1 && React.isValidElement(Children.only(children)) &&\n      // @ts-ignore\n      !Children.only(children).props.source &&\n      // Make sure it's not a FormDataConsumer\n      Children.map(children, function (input) {\n        return React.isValidElement(input) && input.type !== FormDataConsumer;\n      }).some(Boolean)) {\n        // ArrayInput used for an array of scalar values\n        // (e.g. tags: ['foo', 'bar'])\n        defaultValue = '';\n      } else {\n        // ArrayInput used for an array of objects\n        // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n        defaultValue = defaultValue || {};\n        Children.forEach(children, function (input) {\n          var _a;\n          if (React.isValidElement(input) && input.type !== FormDataConsumer && input.props.source) {\n            defaultValue[input.props.source] = (_a = input.props.defaultValue) !== null && _a !== void 0 ? _a : null;\n          }\n        });\n      }\n    }\n    append(defaultValue);\n  }, [append, children]);\n  // add field and call the onClick event of the button passed as addButton prop\n  var handleAddButtonClick = function (originalOnClickHandler) {\n    return function (event) {\n      addField();\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  };\n  var handleReorder = useCallback(function (origin, destination) {\n    move(origin, destination);\n  }, [move]);\n  var handleArrayClear = useCallback(function () {\n    replace([]);\n    setConfirmIsOpen(false);\n  }, [replace]);\n  var records = get(record, source);\n  var context = useMemo(function () {\n    return {\n      total: fields.length,\n      add: addField,\n      remove: removeField,\n      reOrder: handleReorder,\n      source: source\n    };\n  }, [addField, fields.length, handleReorder, removeField, source]);\n  return fields ? React.createElement(SimpleFormIteratorContext.Provider, {\n    value: context\n  }, React.createElement(Root, {\n    className: clsx(className, fullWidth && 'fullwidth', disabled && 'disabled'),\n    sx: sx\n  }, React.createElement(\"ul\", {\n    className: SimpleFormIteratorClasses.list\n  }, fields.map(function (member, index) {\n    return React.createElement(SimpleFormIteratorItem, {\n      key: member.id,\n      disabled: disabled,\n      disableRemove: disableRemove,\n      disableReordering: disableReordering,\n      fields: fields,\n      getItemLabel: getItemLabel,\n      index: index,\n      member: \"\".concat(source, \".\").concat(index),\n      onRemoveField: removeField,\n      onReorder: handleReorder,\n      record: records && records[index] || {},\n      removeButton: removeButton,\n      reOrderButtons: reOrderButtons,\n      resource: resource,\n      source: source,\n      inline: inline\n    }, children);\n  })), !disabled && !(disableAdd && (disableClear || disableRemove)) && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.buttons\n  }, !disableAdd && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.add\n  }, cloneElement(addButton, {\n    className: clsx('button-add', \"button-add-\".concat(source)),\n    onClick: handleAddButtonClick(addButton.props.onClick)\n  })), fields.length > 0 && !disableClear && !disableRemove && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.clear\n  }, React.createElement(Confirm, {\n    isOpen: confirmIsOpen,\n    title: translate('ra.action.clear_array_input'),\n    content: translate('ra.message.clear_array_input'),\n    onConfirm: handleArrayClear,\n    onClose: function () {\n      return setConfirmIsOpen(false);\n    }\n  }), React.createElement(ClearArrayButton, {\n    onClick: function () {\n      return setConfirmIsOpen(true);\n    }\n  }))))) : null;\n};\nSimpleFormIterator.defaultProps = {\n  disableAdd: false,\n  disableRemove: false\n};\nSimpleFormIterator.propTypes = {\n  addButton: PropTypes.element,\n  removeButton: PropTypes.element,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  field: PropTypes.object,\n  fields: PropTypes.array,\n  fieldState: PropTypes.object,\n  formState: PropTypes.object,\n  fullWidth: PropTypes.bool,\n  inline: PropTypes.bool,\n  record: PropTypes.object,\n  source: PropTypes.string,\n  resource: PropTypes.string,\n  translate: PropTypes.func,\n  disableAdd: PropTypes.bool,\n  disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  TransitionProps: PropTypes.shape({})\n};\nvar Root = styled('div', {\n  name: SimpleFormIteratorPrefix,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b, _c, _d;\n  var theme = _a.theme;\n  return _b = {\n    '& > ul': {\n      padding: 0,\n      marginTop: 0,\n      marginBottom: 0\n    },\n    '& > ul > li:last-child': {\n      // hide the last separator\n      borderBottom: 'none'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line)] = (_c = {\n    display: 'flex',\n    listStyleType: 'none',\n    borderBottom: \"solid 1px \".concat(theme.palette.divider)\n  }, _c[theme.breakpoints.down('sm')] = {\n    display: 'block'\n  }, _c), _b[\"& .\".concat(SimpleFormIteratorClasses.index)] = (_d = {\n    display: 'flex',\n    alignItems: 'top',\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  }, _d[theme.breakpoints.down('md')] = {\n    display: 'none'\n  }, _d), _b[\"& .\".concat(SimpleFormIteratorClasses.form)] = {\n    alignItems: 'flex-start',\n    display: 'flex',\n    flexDirection: 'column'\n  }, _b[\"&.fullwidth > ul > li > .\".concat(SimpleFormIteratorClasses.form)] = {\n    flex: 2\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.inline)] = {\n    flexDirection: 'row',\n    columnGap: '1em',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.action)] = {\n    marginTop: theme.spacing(0.5),\n    visibility: 'hidden',\n    '@media(hover:none)': {\n      visibility: 'visible'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.buttons)] = {\n    display: 'flex'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.add)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.clear)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line, \":hover > .\").concat(SimpleFormIteratorClasses.action)] = {\n    visibility: 'visible'\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","Children","cloneElement","useCallback","useMemo","useRef","useState","styled","clsx","get","PropTypes","FormDataConsumer","useRecordContext","useTranslate","useArrayInput","SimpleFormIteratorClasses","SimpleFormIteratorPrefix","SimpleFormIteratorContext","SimpleFormIteratorItem","AddItemButton","DefaultAddItemButton","RemoveItemButton","DefaultRemoveItemButton","ReOrderButtons","DefaultReOrderButtons","ClearArrayButton","Confirm","SimpleFormIterator","props","addButton","_b","removeButton","_c","reOrderButtons","children","className","resource","source","disabled","disableAdd","disableClear","disableRemove","disableReordering","inline","_d","getItemLabel","fullWidth","sx","confirmIsOpen","setConfirmIsOpen","append","fields","move","remove","replace","translate","record","initialDefaultValue","removeField","index","length","_g","id","rest","current","k","addField","item","defaultValue","count","isValidElement","only","map","input","type","some","Boolean","forEach","handleAddButtonClick","originalOnClickHandler","event","handleReorder","origin","destination","handleArrayClear","records","context","total","add","reOrder","Provider","value","Root","list","member","key","onRemoveField","onReorder","buttons","onClick","clear","isOpen","title","content","onConfirm","onClose","defaultProps","propTypes","element","node","string","field","object","array","fieldState","formState","bool","func","oneOfType","TransitionProps","shape","name","overridesResolver","styles","root","_a","theme","padding","marginTop","marginBottom","borderBottom","line","display","listStyleType","palette","divider","breakpoints","down","alignItems","marginRight","spacing","form","flexDirection","flex","columnGap","flexWrap","action","visibility"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\input\\ArrayInput\\SimpleFormIterator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useCallback,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { styled, SxProps } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport {\n    FormDataConsumer,\n    RaRecord,\n    useRecordContext,\n    useTranslate,\n} from 'ra-core';\nimport { UseFieldArrayReturn } from 'react-hook-form';\n\nimport { useArrayInput } from './useArrayInput';\nimport {\n    SimpleFormIteratorClasses,\n    SimpleFormIteratorPrefix,\n} from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport {\n    DisableRemoveFunction,\n    SimpleFormIteratorItem,\n} from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\nimport { ClearArrayButton } from './ClearArrayButton';\nimport { Confirm } from '../../layout';\n\nexport const SimpleFormIterator = (props: SimpleFormIteratorProps) => {\n    const {\n        addButton = <DefaultAddItemButton />,\n        removeButton = <DefaultRemoveItemButton />,\n        reOrderButtons = <DefaultReOrderButtons />,\n        children,\n        className,\n        resource,\n        source,\n        disabled,\n        disableAdd,\n        disableClear,\n        disableRemove,\n        disableReordering,\n        inline,\n        getItemLabel = false,\n        fullWidth,\n        sx,\n    } = props;\n    const [confirmIsOpen, setConfirmIsOpen] = useState<boolean>(false);\n    const { append, fields, move, remove, replace } = useArrayInput(props);\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const initialDefaultValue = useRef({});\n\n    const removeField = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove]\n    );\n\n    if (fields.length > 0) {\n        const { id, ...rest } = fields[0];\n        initialDefaultValue.current = rest;\n        for (const k in initialDefaultValue.current)\n            initialDefaultValue.current[k] = null;\n    }\n\n    const addField = useCallback(\n        (item: any = undefined) => {\n            let defaultValue = item;\n            if (item == null) {\n                defaultValue = initialDefaultValue.current;\n                if (\n                    Children.count(children) === 1 &&\n                    React.isValidElement(Children.only(children)) &&\n                    // @ts-ignore\n                    !Children.only(children).props.source &&\n                    // Make sure it's not a FormDataConsumer\n                    Children.map(\n                        children,\n                        input =>\n                            React.isValidElement(input) &&\n                            input.type !== FormDataConsumer\n                    ).some(Boolean)\n                ) {\n                    // ArrayInput used for an array of scalar values\n                    // (e.g. tags: ['foo', 'bar'])\n                    defaultValue = '';\n                } else {\n                    // ArrayInput used for an array of objects\n                    // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n                    defaultValue =\n                        defaultValue || ({} as Record<string, unknown>);\n                    Children.forEach(children, input => {\n                        if (\n                            React.isValidElement(input) &&\n                            input.type !== FormDataConsumer &&\n                            input.props.source\n                        ) {\n                            defaultValue[input.props.source] =\n                                input.props.defaultValue ?? null;\n                        }\n                    });\n                }\n            }\n            append(defaultValue);\n        },\n        [append, children]\n    );\n\n    // add field and call the onClick event of the button passed as addButton prop\n    const handleAddButtonClick = (\n        originalOnClickHandler: MouseEventHandler\n    ) => (event: MouseEvent) => {\n        addField();\n        if (originalOnClickHandler) {\n            originalOnClickHandler(event);\n        }\n    };\n\n    const handleReorder = useCallback(\n        (origin: number, destination: number) => {\n            move(origin, destination);\n        },\n        [move]\n    );\n\n    const handleArrayClear = useCallback(() => {\n        replace([]);\n        setConfirmIsOpen(false);\n    }, [replace]);\n\n    const records = get(record, source);\n\n    const context = useMemo(\n        () => ({\n            total: fields.length,\n            add: addField,\n            remove: removeField,\n            reOrder: handleReorder,\n            source,\n        }),\n        [addField, fields.length, handleReorder, removeField, source]\n    );\n    return fields ? (\n        <SimpleFormIteratorContext.Provider value={context}>\n            <Root\n                className={clsx(\n                    className,\n                    fullWidth && 'fullwidth',\n                    disabled && 'disabled'\n                )}\n                sx={sx}\n            >\n                <ul className={SimpleFormIteratorClasses.list}>\n                    {fields.map((member, index) => (\n                        <SimpleFormIteratorItem\n                            key={member.id}\n                            disabled={disabled}\n                            disableRemove={disableRemove}\n                            disableReordering={disableReordering}\n                            fields={fields}\n                            getItemLabel={getItemLabel}\n                            index={index}\n                            member={`${source}.${index}`}\n                            onRemoveField={removeField}\n                            onReorder={handleReorder}\n                            record={(records && records[index]) || {}}\n                            removeButton={removeButton}\n                            reOrderButtons={reOrderButtons}\n                            resource={resource}\n                            source={source}\n                            inline={inline}\n                        >\n                            {children}\n                        </SimpleFormIteratorItem>\n                    ))}\n                </ul>\n                {!disabled && !(disableAdd && (disableClear || disableRemove)) && (\n                    <div className={SimpleFormIteratorClasses.buttons}>\n                        {!disableAdd && (\n                            <div className={SimpleFormIteratorClasses.add}>\n                                {cloneElement(addButton, {\n                                    className: clsx(\n                                        'button-add',\n                                        `button-add-${source}`\n                                    ),\n                                    onClick: handleAddButtonClick(\n                                        addButton.props.onClick\n                                    ),\n                                })}\n                            </div>\n                        )}\n                        {fields.length > 0 && !disableClear && !disableRemove && (\n                            <div className={SimpleFormIteratorClasses.clear}>\n                                <Confirm\n                                    isOpen={confirmIsOpen}\n                                    title={translate(\n                                        'ra.action.clear_array_input'\n                                    )}\n                                    content={translate(\n                                        'ra.message.clear_array_input'\n                                    )}\n                                    onConfirm={handleArrayClear}\n                                    onClose={() => setConfirmIsOpen(false)}\n                                />\n                                <ClearArrayButton\n                                    onClick={() => setConfirmIsOpen(true)}\n                                />\n                            </div>\n                        )}\n                    </div>\n                )}\n            </Root>\n        </SimpleFormIteratorContext.Provider>\n    ) : null;\n};\n\nSimpleFormIterator.defaultProps = {\n    disableAdd: false,\n    disableRemove: false,\n};\n\nSimpleFormIterator.propTypes = {\n    addButton: PropTypes.element,\n    removeButton: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    field: PropTypes.object,\n    fields: PropTypes.array,\n    fieldState: PropTypes.object,\n    formState: PropTypes.object,\n    fullWidth: PropTypes.bool,\n    inline: PropTypes.bool,\n    record: PropTypes.object,\n    source: PropTypes.string,\n    resource: PropTypes.string,\n    translate: PropTypes.func,\n    disableAdd: PropTypes.bool,\n    disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    TransitionProps: PropTypes.shape({}),\n};\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport interface SimpleFormIteratorProps extends Partial<UseFieldArrayReturn> {\n    addButton?: ReactElement;\n    children?: ReactNode;\n    className?: string;\n    disabled?: boolean;\n    disableAdd?: boolean;\n    disableClear?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    fullWidth?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    inline?: boolean;\n    meta?: {\n        // the type defined in FieldArrayRenderProps says error is boolean, which is wrong.\n        error?: any;\n        submitFailed?: boolean;\n    };\n    record?: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource?: string;\n    source?: string;\n    sx?: SxProps;\n}\n\nconst Root = styled('div', {\n    name: SimpleFormIteratorPrefix,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    '& > ul': {\n        padding: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n    '& > ul > li:last-child': {\n        // hide the last separator\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n        borderBottom: `solid 1px ${theme.palette.divider}`,\n        [theme.breakpoints.down('sm')]: { display: 'block' },\n    },\n    [`& .${SimpleFormIteratorClasses.index}`]: {\n        display: 'flex',\n        alignItems: 'top',\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        [theme.breakpoints.down('md')]: { display: 'none' },\n    },\n    [`& .${SimpleFormIteratorClasses.form}`]: {\n        alignItems: 'flex-start',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    [`&.fullwidth > ul > li > .${SimpleFormIteratorClasses.form}`]: {\n        flex: 2,\n    },\n    [`& .${SimpleFormIteratorClasses.inline}`]: {\n        flexDirection: 'row',\n        columnGap: '1em',\n        flexWrap: 'wrap',\n    },\n    [`& .${SimpleFormIteratorClasses.action}`]: {\n        marginTop: theme.spacing(0.5),\n        visibility: 'hidden',\n        '@media(hover:none)': {\n            visibility: 'visible',\n        },\n    },\n    [`& .${SimpleFormIteratorClasses.buttons}`]: {\n        display: 'flex',\n    },\n    [`& .${SimpleFormIteratorClasses.add}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.clear}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}:hover > .${SimpleFormIteratorClasses.action}`]: {\n        visibility: 'visible',\n    },\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}