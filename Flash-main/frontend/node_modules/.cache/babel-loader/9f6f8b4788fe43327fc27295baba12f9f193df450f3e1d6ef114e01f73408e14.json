{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n/**\n * Form input to edit a Date string value in the \"YYYY-MM-DD\" format (e.g. '2021-06-23').\n *\n * Renders a date picker (the exact UI depends on the browser).\n *\n * @example\n * import { Edit, SimpleForm, DateInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <DateInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * // If the initial value is a Date object, DateInput converts it to a string\n * // but you must pass a custom parse method to convert the form value\n * // (which is always a date string) back to a Date object.\n * <DateInput source=\"published_at\" parse={val => new Date(val)} />\n */\nexport var DateInput = function (_a) {\n  var className = _a.className,\n    defaultValue = _a.defaultValue,\n    _b = _a.format,\n    format = _b === void 0 ? getStringFromDate : _b,\n    label = _a.label,\n    name = _a.name,\n    source = _a.source,\n    resource = _a.resource,\n    helperText = _a.helperText,\n    margin = _a.margin,\n    onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    parse = _a.parse,\n    validate = _a.validate,\n    variant = _a.variant,\n    rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"label\", \"name\", \"source\", \"resource\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"parse\", \"validate\", \"variant\"]);\n  var _c = useInput(__assign({\n      defaultValue: defaultValue,\n      name: name,\n      format: format,\n      parse: parse,\n      onBlur: onBlur,\n      onChange: onChange,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _c.field,\n    fieldState = _c.fieldState,\n    formState = _c.formState,\n    id = _c.id,\n    isRequired = _c.isRequired;\n  var error = fieldState.error,\n    invalid = fieldState.invalid,\n    isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n  var renderHelperText = helperText !== false || (isTouched || isSubmitted) && invalid;\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"date\",\n    size: \"small\",\n    variant: variant,\n    margin: margin,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: renderHelperText ? React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }) : null,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: defaultInputLabelProps\n  }, sanitizeInputRestProps(rest)));\n};\nDateInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\n/**\n * Convert Date object to String\n *\n * @param {Date} value value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n  var pad = '00';\n  var yyyy = value.getFullYear().toString();\n  var MM = (value.getMonth() + 1).toString();\n  var dd = value.getDate().toString();\n  return \"\".concat(yyyy, \"-\").concat((pad + MM).slice(-2), \"-\").concat((pad + dd).slice(-2));\n};\nvar dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\nvar defaultInputLabelProps = {\n  shrink: true\n};\nvar getStringFromDate = function (value) {\n  // null, undefined and empty string values should not go through dateFormatter\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  }\n  // valid dates should not be converted\n  if (dateRegex.test(value)) {\n    return value;\n  }\n  return convertDateToString(new Date(value));\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","sanitizeInputRestProps","InputHelperText","DateInput","_a","defaultValue","_b","format","getStringFromDate","label","name","source","resource","helperText","margin","onBlur","onChange","parse","validate","variant","rest","field","fieldState","formState","id","isRequired","invalid","isTouched","renderHelperText","isSubmitted","className","type","size","error","touched","message","InputLabelProps","defaultInputLabelProps","propTypes","oneOfType","string","bool","element","convertDateToString","value","Date","isNaN","getDate","pad","yyyy","getFullYear","toString","MM","getMonth","dd","slice","dateRegex","shrink","test"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\input\\DateInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Form input to edit a Date string value in the \"YYYY-MM-DD\" format (e.g. '2021-06-23').\n *\n * Renders a date picker (the exact UI depends on the browser).\n *\n * @example\n * import { Edit, SimpleForm, DateInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <DateInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * // If the initial value is a Date object, DateInput converts it to a string\n * // but you must pass a custom parse method to convert the form value\n * // (which is always a date string) back to a Date object.\n * <DateInput source=\"published_at\" parse={val => new Date(val)} />\n */\nexport const DateInput = ({\n    className,\n    defaultValue,\n    format = getStringFromDate,\n    label,\n    name,\n    source,\n    resource,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    parse,\n    validate,\n    variant,\n    ...rest\n}: DateInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        name,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n    const renderHelperText =\n        helperText !== false || ((isTouched || isSubmitted) && invalid);\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"date\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                renderHelperText ? (\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                ) : null\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nDateInput.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type DateInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\n/**\n * Convert Date object to String\n *\n * @param {Date} value value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const pad = '00';\n    const yyyy = value.getFullYear().toString();\n    const MM = (value.getMonth() + 1).toString();\n    const dd = value.getDate().toString();\n    return `${yyyy}-${(pad + MM).slice(-2)}-${(pad + dd).slice(-2)}`;\n};\n\nconst dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\nconst getStringFromDate = (value: string | Date) => {\n    // null, undefined and empty string values should not go through dateFormatter\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n\n    // valid dates should not be converted\n    if (dateRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}