{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback, useMemo, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSaveContext } from '../controller';\nimport { useRecordContext } from '../controller';\nimport getFormInitialValues from './getFormInitialValues';\nimport { getSimpleValidationResolver } from './getSimpleValidationResolver';\nimport { setSubmissionErrors } from './setSubmissionErrors';\nimport { useNotifyIsFormInvalid } from './useNotifyIsFormInvalid';\nimport { useWarnWhenUnsavedChanges } from './useWarnWhenUnsavedChanges';\nimport { sanitizeEmptyValues as sanitizeValues } from './sanitizeEmptyValues';\n/**\n * Wrapper around react-hook-form's useForm\n *\n * This hook adds the following features to react-hook-form's useForm:\n *\n * - form initialization based on RecordContext\n * - validation based on a validate function\n * - sanitization of empty values\n * - notification on invalid form\n * - stop form submission event propagation\n */\nexport var useAugmentedForm = function (props) {\n  var _a = props.criteriaMode,\n    criteriaMode = _a === void 0 ? 'firstError' : _a,\n    defaultValues = props.defaultValues,\n    formRootPathname = props.formRootPathname,\n    resolver = props.resolver,\n    _b = props.reValidateMode,\n    reValidateMode = _b === void 0 ? 'onChange' : _b,\n    onSubmit = props.onSubmit,\n    sanitizeEmptyValues = props.sanitizeEmptyValues,\n    warnWhenUnsavedChanges = props.warnWhenUnsavedChanges,\n    validate = props.validate,\n    rest = __rest(props, [\"criteriaMode\", \"defaultValues\", \"formRootPathname\", \"resolver\", \"reValidateMode\", \"onSubmit\", \"sanitizeEmptyValues\", \"warnWhenUnsavedChanges\", \"validate\"]);\n  var record = useRecordContext(props);\n  var saveContext = useSaveContext();\n  var defaultValuesIncludingRecord = useMemo(function () {\n    return getFormInitialValues(defaultValues, record);\n  },\n  // eslint-disable-next-line\n  [\n  // eslint-disable-next-line\n  JSON.stringify({\n    defaultValues: typeof defaultValues === 'function' ? 'function' : defaultValues,\n    record: record\n  })]);\n  var finalResolver = resolver ? resolver : validate ? getSimpleValidationResolver(validate) : undefined;\n  var form = useForm(__assign({\n    criteriaMode: criteriaMode,\n    values: defaultValuesIncludingRecord,\n    reValidateMode: reValidateMode,\n    resolver: finalResolver\n  }, rest));\n  var formRef = useRef(form);\n  // notify on invalid form\n  useNotifyIsFormInvalid(form.control);\n  // warn when unsaved change\n  useWarnWhenUnsavedChanges(Boolean(warnWhenUnsavedChanges), formRootPathname, form.control);\n  // submit callbacks\n  var handleSubmit = useCallback(function (values, event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var errors, finalValues;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            finalValues = sanitizeEmptyValues ? sanitizeValues(values, record) : values;\n            if (!onSubmit) return [3 /*break*/, 2];\n            return [4 /*yield*/, onSubmit(finalValues, event)];\n          case 1:\n            errors = _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!(onSubmit == null && (saveContext === null || saveContext === void 0 ? void 0 : saveContext.save))) return [3 /*break*/, 4];\n            return [4 /*yield*/, saveContext.save(finalValues, event)];\n          case 3:\n            errors = _a.sent();\n            _a.label = 4;\n          case 4:\n            if (errors != null) {\n              setSubmissionErrors(errors, formRef.current.setError);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [onSubmit, saveContext, sanitizeEmptyValues, record]);\n  var formHandleSubmit = useCallback(function (event) {\n    if (!event.defaultPrevented) {\n      // Prevent outer forms to receive the event\n      event.stopPropagation();\n      form.handleSubmit(handleSubmit)(event);\n    }\n    return;\n  }, [form, handleSubmit]);\n  return {\n    form: form,\n    handleSubmit: handleSubmit,\n    formHandleSubmit: formHandleSubmit\n  };\n};","map":{"version":3,"mappings":"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","names":["useCallback","useMemo","useRef","useForm","useSaveContext","useRecordContext","getFormInitialValues","getSimpleValidationResolver","setSubmissionErrors","useNotifyIsFormInvalid","useWarnWhenUnsavedChanges","sanitizeEmptyValues","sanitizeValues","useAugmentedForm","props","criteriaMode","defaultValues","formRootPathname","resolver","_b","reValidateMode","onSubmit","warnWhenUnsavedChanges","validate","rest","record","saveContext","defaultValuesIncludingRecord","JSON","stringify","finalResolver","undefined","form","values","formRef","control","Boolean","handleSubmit","event","finalValues","errors","_a","save","current","setError","formHandleSubmit","defaultPrevented","stopPropagation"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-core\\src\\form\\useAugmentedForm.ts"],"sourcesContent":["import { BaseSyntheticEvent, useCallback, useMemo, useRef } from 'react';\nimport {\n    FieldValues,\n    SubmitHandler,\n    useForm,\n    UseFormProps,\n} from 'react-hook-form';\n\nimport { RaRecord } from '../types';\nimport { useSaveContext } from '../controller';\nimport { useRecordContext } from '../controller';\nimport getFormInitialValues from './getFormInitialValues';\nimport {\n    getSimpleValidationResolver,\n    ValidateForm,\n} from './getSimpleValidationResolver';\nimport { setSubmissionErrors } from './setSubmissionErrors';\nimport { useNotifyIsFormInvalid } from './useNotifyIsFormInvalid';\nimport { useWarnWhenUnsavedChanges } from './useWarnWhenUnsavedChanges';\nimport { sanitizeEmptyValues as sanitizeValues } from './sanitizeEmptyValues';\n\n/**\n * Wrapper around react-hook-form's useForm\n *\n * This hook adds the following features to react-hook-form's useForm:\n *\n * - form initialization based on RecordContext\n * - validation based on a validate function\n * - sanitization of empty values\n * - notification on invalid form\n * - stop form submission event propagation\n */\nexport const useAugmentedForm = (props: UseAugmentedFormProps) => {\n    const {\n        criteriaMode = 'firstError',\n        defaultValues,\n        formRootPathname,\n        resolver,\n        reValidateMode = 'onChange',\n        onSubmit,\n        sanitizeEmptyValues,\n        warnWhenUnsavedChanges,\n        validate,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const saveContext = useSaveContext();\n\n    const defaultValuesIncludingRecord = useMemo(\n        () => getFormInitialValues(defaultValues, record),\n        // eslint-disable-next-line\n        [\n            // eslint-disable-next-line\n            JSON.stringify({\n                defaultValues:\n                    typeof defaultValues === 'function'\n                        ? 'function'\n                        : defaultValues,\n                record,\n            }),\n        ]\n    );\n\n    const finalResolver = resolver\n        ? resolver\n        : validate\n        ? getSimpleValidationResolver(validate)\n        : undefined;\n\n    const form = useForm({\n        criteriaMode,\n        values: defaultValuesIncludingRecord,\n        reValidateMode,\n        resolver: finalResolver,\n        ...rest,\n    });\n\n    const formRef = useRef(form);\n\n    // notify on invalid form\n    useNotifyIsFormInvalid(form.control);\n\n    // warn when unsaved change\n    useWarnWhenUnsavedChanges(\n        Boolean(warnWhenUnsavedChanges),\n        formRootPathname,\n        form.control\n    );\n\n    // submit callbacks\n    const handleSubmit = useCallback(\n        async (values, event) => {\n            let errors;\n            const finalValues = sanitizeEmptyValues\n                ? sanitizeValues(values, record)\n                : values;\n            if (onSubmit) {\n                errors = await onSubmit(finalValues, event);\n            }\n            if (onSubmit == null && saveContext?.save) {\n                errors = await saveContext.save(finalValues, event);\n            }\n            if (errors != null) {\n                setSubmissionErrors(errors, formRef.current.setError);\n            }\n        },\n        [onSubmit, saveContext, sanitizeEmptyValues, record]\n    );\n\n    const formHandleSubmit = useCallback(\n        (event: BaseSyntheticEvent) => {\n            if (!event.defaultPrevented) {\n                // Prevent outer forms to receive the event\n                event.stopPropagation();\n                form.handleSubmit(handleSubmit)(event);\n            }\n            return;\n        },\n        [form, handleSubmit]\n    );\n\n    return {\n        form,\n        handleSubmit,\n        formHandleSubmit,\n    };\n};\n\nexport type UseAugmentedFormProps = UseFormOwnProps &\n    Omit<UseFormProps, 'onSubmit'> & {\n        validate?: ValidateForm;\n    };\n\nexport interface UseFormOwnProps {\n    defaultValues?: any;\n    formRootPathname?: string;\n    record?: Partial<RaRecord>;\n    onSubmit?: SubmitHandler<FieldValues>;\n    warnWhenUnsavedChanges?: boolean;\n    sanitizeEmptyValues?: boolean;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}