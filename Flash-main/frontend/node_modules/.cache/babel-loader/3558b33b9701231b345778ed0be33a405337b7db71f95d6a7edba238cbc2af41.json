{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Select, MenuItem, InputLabel, FormHelperText, FormControl, Chip, OutlinedInput } from '@mui/material';\nimport { FieldTitle, useInput, useChoicesContext, useChoices } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { LinearProgress } from '../layout';\nimport { Labeled } from '../Labeled';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport var SelectArrayInput = function (props) {\n  var _a;\n  var choicesProp = props.choices,\n    className = props.className,\n    create = props.create,\n    createLabel = props.createLabel,\n    createValue = props.createValue,\n    disableValue = props.disableValue,\n    format = props.format,\n    helperText = props.helperText,\n    label = props.label,\n    isFetchingProp = props.isFetching,\n    isLoadingProp = props.isLoading,\n    margin = props.margin,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onCreate = props.onCreate,\n    options = props.options,\n    optionText = props.optionText,\n    optionValue = props.optionValue,\n    parse = props.parse,\n    resourceProp = props.resource,\n    _b = props.size,\n    size = _b === void 0 ? 'small' : _b,\n    sourceProp = props.source,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    variant = props.variant,\n    rest = __rest(props, [\"choices\", \"className\", \"create\", \"createLabel\", \"createValue\", \"disableValue\", \"format\", \"helperText\", \"label\", \"isFetching\", \"isLoading\", \"margin\", \"onBlur\", \"onChange\", \"onCreate\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"size\", \"source\", \"translateChoice\", \"validate\", \"variant\"]);\n  var inputLabel = useRef(null);\n  var _c = useChoicesContext({\n      choices: choicesProp,\n      isLoading: isLoadingProp,\n      isFetching: isFetchingProp,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _c.allChoices,\n    isLoading = _c.isLoading,\n    fetchError = _c.error,\n    source = _c.source,\n    resource = _c.resource;\n  var _d = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      disableValue: disableValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _d.getChoiceText,\n    getChoiceValue = _d.getChoiceValue,\n    getDisableValue = _d.getDisableValue;\n  var _e = useInput(__assign({\n      format: format,\n      onBlur: onBlur,\n      onChange: onChange,\n      parse: parse,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _e.field,\n    isRequired = _e.isRequired,\n    _f = _e.fieldState,\n    error = _f.error,\n    invalid = _f.invalid,\n    isTouched = _f.isTouched,\n    isSubmitted = _e.formState.isSubmitted;\n  var handleChange = useCallback(function (eventOrChoice) {\n    // We might receive an event from the mui component\n    // In this case, it will be the choice id\n    if (eventOrChoice === null || eventOrChoice === void 0 ? void 0 : eventOrChoice.target) {\n      // when used with different IDs types, unselection leads to double selection with both types\n      // instead of the value being removed from the array\n      // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n      // this snippet removes a value if it is present twice\n      eventOrChoice.target.value = eventOrChoice.target.value.reduce(function (acc, value) {\n        // eslint-disable-next-line eqeqeq\n        var index = acc.findIndex(function (v) {\n          return v == value;\n        });\n        return index < 0 ? __spreadArray(__spreadArray([], acc, true), [value], false) : __spreadArray(__spreadArray([], acc.slice(0, index), true), acc.slice(index + 1), true);\n      }, []);\n      field.onChange(eventOrChoice);\n    } else {\n      // Or we might receive a choice directly, for instance a newly created one\n      field.onChange(__spreadArray(__spreadArray([], field.value || [], true), [getChoiceValue(eventOrChoice)], false));\n    }\n  }, [field, getChoiceValue]);\n  var _g = useSupportCreateSuggestion({\n      create: create,\n      createLabel: createLabel,\n      createValue: createValue,\n      handleChange: handleChange,\n      onCreate: onCreate,\n      optionText: optionText\n    }),\n    getCreateItem = _g.getCreateItem,\n    handleChangeWithCreateSupport = _g.handleChange,\n    createElement = _g.createElement;\n  var createItem = create || onCreate ? getCreateItem() : null;\n  var finalChoices = create || onCreate ? __spreadArray(__spreadArray([], allChoices || [], true), [createItem], false) : allChoices || [];\n  var renderMenuItemOption = useCallback(function (choice) {\n    return !!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id && typeof optionText === 'function' ? createItem.name : getChoiceText(choice);\n  }, [createItem, getChoiceText, optionText]);\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: getDisableValue(choice)\n    }, renderMenuItemOption(!!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id ? createItem : choice)) : null;\n  }, [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]);\n  if (isLoading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: clsx('ra-input', \"ra-input-\".concat(source), className),\n      isRequired: isRequired\n    }, React.createElement(LinearProgress, null));\n  }\n  // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n  var finalValue = Array.isArray((_a = field.value) !== null && _a !== void 0 ? _a : []) ? field.value : field.value ? [field.value] : [];\n  var outlinedInputProps = variant === 'outlined' ? {\n    input: React.createElement(OutlinedInput, {\n      id: \"select-multiple-chip\",\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      })\n    })\n  } : {};\n  var renderHelperText = !!fetchError || helperText !== false || (isTouched || isSubmitted) && invalid;\n  return React.createElement(React.Fragment, null, React.createElement(StyledFormControl, __assign({\n    margin: margin,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    error: fetchError || (isTouched || isSubmitted) && invalid,\n    variant: variant\n  }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n    ref: inputLabel,\n    id: \"\".concat(label, \"-outlined-label\")\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(Select, __assign({\n    autoWidth: true,\n    labelId: \"\".concat(label, \"-outlined-label\"),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    multiple: true,\n    error: !!fetchError || (isTouched || isSubmitted) && invalid,\n    renderValue: function (selected) {\n      return React.createElement(\"div\", {\n        className: SelectArrayInputClasses.chips\n      }, (Array.isArray(selected) ? selected : []).map(function (item) {\n        return (allChoices || []).find(\n        // eslint-disable-next-line eqeqeq\n        function (choice) {\n          return getChoiceValue(choice) == item;\n        });\n      }).filter(function (item) {\n        return !!item;\n      }).map(function (item) {\n        return React.createElement(Chip, {\n          key: getChoiceValue(item),\n          label: renderMenuItemOption(item),\n          className: SelectArrayInputClasses.chip,\n          size: \"small\"\n        });\n      }));\n    },\n    \"data-testid\": \"selectArray\",\n    size: size\n  }, field, options, {\n    onChange: handleChangeWithCreateSupport,\n    value: finalValue\n  }, outlinedInputProps), finalChoices.map(renderMenuItem)), renderHelperText ? React.createElement(FormHelperText, {\n    error: fetchError || isTouched && !!error\n  }, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted || fetchError,\n    error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n    helperText: helperText\n  })) : null), createElement);\n};\nSelectArrayInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  disableValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nSelectArrayInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  disableValue: 'disabled',\n  translateChoice: true\n};\nvar sanitizeRestProps = function (_a) {\n  var alwaysOn = _a.alwaysOn,\n    choices = _a.choices,\n    classNamInputWithOptionsPropse = _a.classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst = _a.componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching = _a.crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne = _a.crudGetOInputWithOptionsPropsne,\n    defaultValue = _a.defaultValue,\n    disableValue = _a.disableValue,\n    emptyText = _a.emptyText,\n    enableGetChoices = _a.enableGetChoices,\n    filter = _a.filter,\n    filterToQuery = _a.filterToQuery,\n    formClassName = _a.formClassName,\n    initializeForm = _a.initializeForm,\n    initialValue = _a.initialValue,\n    input = _a.input,\n    isRequired = _a.isRequired,\n    label = _a.label,\n    limitChoicesToValue = _a.limitChoicesToValue,\n    loaded = _a.loaded,\n    locale = _a.locale,\n    meta = _a.meta,\n    onChange = _a.onChange,\n    options = _a.options,\n    optionValue = _a.optionValue,\n    optionText = _a.optionText,\n    perPage = _a.perPage,\n    record = _a.record,\n    reference = _a.reference,\n    resource = _a.resource,\n    setFilter = _a.setFilter,\n    setPagination = _a.setPagination,\n    setSort = _a.setSort,\n    sort = _a.sort,\n    source = _a.source,\n    textAlign = _a.textAlign,\n    translate = _a.translate,\n    translateChoice = _a.translateChoice,\n    validation = _a.validation,\n    rest = __rest(_a, [\"alwaysOn\", \"choices\", \"classNamInputWithOptionsPropse\", \"componenInputWithOptionsPropst\", \"crudGetMInputWithOptionsPropsatching\", \"crudGetOInputWithOptionsPropsne\", \"defaultValue\", \"disableValue\", \"emptyText\", \"enableGetChoices\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"initialValue\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"loaded\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n  return rest;\n};\nvar PREFIX = 'RaSelectArrayInput';\nexport var SelectArrayInputClasses = {\n  chips: \"\".concat(PREFIX, \"-chips\"),\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledFormControl = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    minWidth: theme.spacing(20)\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chips)] = {\n    display: 'flex',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chip)] = {\n    marginTop: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5)\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","useCallback","useRef","PropTypes","clsx","Select","MenuItem","InputLabel","FormHelperText","FormControl","Chip","OutlinedInput","FieldTitle","useInput","useChoicesContext","useChoices","InputHelperText","LinearProgress","Labeled","useSupportCreateSuggestion","SelectArrayInput","props","choicesProp","className","create","createLabel","createValue","disableValue","format","helperText","label","isFetchingProp","isLoadingProp","margin","onBlur","onChange","onCreate","options","optionText","optionValue","parse","resourceProp","_b","size","sourceProp","translateChoice","validate","variant","rest","inputLabel","choices","isLoading","isFetching","resource","source","allChoices","fetchError","getChoiceText","getChoiceValue","getDisableValue","field","isRequired","_f","error","invalid","isTouched","isSubmitted","handleChange","eventOrChoice","target","value","reduce","acc","index","findIndex","__spreadArray","slice","getCreateItem","handleChangeWithCreateSupport","createElement","createItem","finalChoices","renderMenuItemOption","choice","id","name","renderMenuItem","key","disabled","finalValue","Array","isArray","outlinedInputProps","input","renderHelperText","StyledFormControl","sanitizeRestProps","ref","autoWidth","labelId","multiple","renderValue","selected","SelectArrayInputClasses","chips","map","find","item","filter","chip","touched","message","propTypes","arrayOf","object","string","children","node","oneOfType","bool","element","func","defaultProps","_a","classNamInputWithOptionsPropse","componenInputWithOptionsPropst","crudGetMInputWithOptionsPropsatching","crudGetOInputWithOptionsPropsne","defaultValue","emptyText","enableGetChoices","filterToQuery","formClassName","initializeForm","initialValue","limitChoicesToValue","loaded","locale","meta","perPage","record","reference","setFilter","setPagination","setSort","sort","textAlign","translate","validation","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","display","flexWrap","marginTop","marginRight"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\input\\SelectArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    Select,\n    SelectProps,\n    MenuItem,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    Chip,\n    OutlinedInput,\n} from '@mui/material';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    useInput,\n    useChoicesContext,\n    useChoices,\n    RaRecord,\n} from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { FormControlProps } from '@mui/material/FormControl';\n\nimport { LinearProgress } from '../layout';\nimport { CommonInputProps } from './CommonInputProps';\nimport { Labeled } from '../Labeled';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\n\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport const SelectArrayInput = (props: SelectArrayInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        disableValue,\n        format,\n        helperText,\n        label,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        margin,\n        onBlur,\n        onChange,\n        onCreate,\n        options,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        size = 'small',\n        source: sourceProp,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const inputLabel = useRef(null);\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        source,\n        resource,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText,\n        optionValue,\n        disableValue,\n        translateChoice,\n    });\n\n    const {\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                // when used with different IDs types, unselection leads to double selection with both types\n                // instead of the value being removed from the array\n                // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n                // this snippet removes a value if it is present twice\n                eventOrChoice.target.value = eventOrChoice.target.value.reduce(\n                    (acc, value) => {\n                        // eslint-disable-next-line eqeqeq\n                        const index = acc.findIndex(v => v == value);\n                        return index < 0\n                            ? [...acc, value]\n                            : [...acc.slice(0, index), ...acc.slice(index + 1)];\n                    },\n                    []\n                );\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange([\n                    ...(field.value || []),\n                    getChoiceValue(eventOrChoice),\n                ]);\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    const finalChoices =\n        create || onCreate\n            ? [...(allChoices || []), createItem]\n            : allChoices || [];\n\n    const renderMenuItemOption = useCallback(\n        choice =>\n            !!createItem &&\n            choice?.id === createItem.id &&\n            typeof optionText === 'function'\n                ? createItem.name\n                : getChoiceText(choice),\n        [createItem, getChoiceText, optionText]\n    );\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <Labeled\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n    const finalValue = Array.isArray(field.value ?? [])\n        ? field.value\n        : field.value\n        ? [field.value]\n        : [];\n\n    const outlinedInputProps =\n        variant === 'outlined'\n            ? {\n                  input: (\n                      <OutlinedInput\n                          id=\"select-multiple-chip\"\n                          label={\n                              <FieldTitle\n                                  label={label}\n                                  source={source}\n                                  resource={resource}\n                                  isRequired={isRequired}\n                              />\n                          }\n                      />\n                  ),\n              }\n            : {};\n    const renderHelperText =\n        !!fetchError ||\n        helperText !== false ||\n        ((isTouched || isSubmitted) && invalid);\n\n    return (\n        <>\n            <StyledFormControl\n                margin={margin}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                error={fetchError || ((isTouched || isSubmitted) && invalid)}\n                variant={variant}\n                {...sanitizeRestProps(rest)}\n            >\n                <InputLabel ref={inputLabel} id={`${label}-outlined-label`}>\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                </InputLabel>\n                <Select\n                    autoWidth\n                    labelId={`${label}-outlined-label`}\n                    label={\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resource}\n                            isRequired={isRequired}\n                        />\n                    }\n                    multiple\n                    error={\n                        !!fetchError || ((isTouched || isSubmitted) && invalid)\n                    }\n                    renderValue={(selected: any[]) => (\n                        <div className={SelectArrayInputClasses.chips}>\n                            {(Array.isArray(selected) ? selected : [])\n                                .map(item =>\n                                    (allChoices || []).find(\n                                        // eslint-disable-next-line eqeqeq\n                                        choice => getChoiceValue(choice) == item\n                                    )\n                                )\n                                .filter(item => !!item)\n                                .map(item => (\n                                    <Chip\n                                        key={getChoiceValue(item)}\n                                        label={renderMenuItemOption(item)}\n                                        className={SelectArrayInputClasses.chip}\n                                        size=\"small\"\n                                    />\n                                ))}\n                        </div>\n                    )}\n                    data-testid=\"selectArray\"\n                    size={size}\n                    {...field}\n                    {...options}\n                    onChange={handleChangeWithCreateSupport}\n                    value={finalValue}\n                    {...outlinedInputProps}\n                >\n                    {finalChoices.map(renderMenuItem)}\n                </Select>\n                {renderHelperText ? (\n                    <FormHelperText\n                        error={fetchError || (isTouched && !!error)}\n                    >\n                        <InputHelperText\n                            touched={isTouched || isSubmitted || fetchError}\n                            error={error?.message || fetchError?.message}\n                            helperText={helperText}\n                        />\n                    </FormHelperText>\n                ) : null}\n            </StyledFormControl>\n            {createElement}\n        </>\n    );\n};\n\nexport type SelectArrayInputProps = ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<CommonInputProps, 'source'> &\n    Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> & {\n        options?: SelectProps;\n        disableValue?: string;\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n\nSelectArrayInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]).isRequired,\n    optionValue: PropTypes.string.isRequired,\n    disableValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectArrayInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    disableValue: 'disabled',\n    translateChoice: true,\n};\n\nconst sanitizeRestProps = ({\n    alwaysOn,\n    choices,\n    classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne,\n    defaultValue,\n    disableValue,\n    emptyText,\n    enableGetChoices,\n    filter,\n    filterToQuery,\n    formClassName,\n    initializeForm,\n    initialValue,\n    input,\n    isRequired,\n    label,\n    limitChoicesToValue,\n    loaded,\n    locale,\n    meta,\n    onChange,\n    options,\n    optionValue,\n    optionText,\n    perPage,\n    record,\n    reference,\n    resource,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    source,\n    textAlign,\n    translate,\n    translateChoice,\n    validation,\n    ...rest\n}: any) => rest;\n\nconst PREFIX = 'RaSelectArrayInput';\n\nexport const SelectArrayInputClasses = {\n    chips: `${PREFIX}-chips`,\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    minWidth: theme.spacing(20),\n    [`& .${SelectArrayInputClasses.chips}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n\n    [`& .${SelectArrayInputClasses.chip}`]: {\n        marginTop: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n    },\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}