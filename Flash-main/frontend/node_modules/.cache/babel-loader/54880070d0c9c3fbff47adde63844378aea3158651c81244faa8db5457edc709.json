{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { InfiniteListBase } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport { InfinitePagination } from './pagination';\nimport { ListView } from './ListView';\n/**\n * Infinite List page component\n *\n * The <InfiniteList> component renders the list layout (title, buttons, filters),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * It contains an <InfinitePagination> component, which fetches the next page of records\n * when the user scrolls to the bottom of the list.\n *\n * The <InfiniteList> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <InfiniteList\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport var InfiniteList = function (_a) {\n  var debounce = _a.debounce,\n    disableAuthentication = _a.disableAuthentication,\n    disableSyncWithLocation = _a.disableSyncWithLocation,\n    exporter = _a.exporter,\n    filter = _a.filter,\n    filterDefaultValues = _a.filterDefaultValues,\n    _b = _a.pagination,\n    pagination = _b === void 0 ? defaultPagination : _b,\n    perPage = _a.perPage,\n    queryOptions = _a.queryOptions,\n    resource = _a.resource,\n    sort = _a.sort,\n    storeKey = _a.storeKey,\n    rest = __rest(_a, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"pagination\", \"perPage\", \"queryOptions\", \"resource\", \"sort\", \"storeKey\"]);\n  return React.createElement(InfiniteListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: queryOptions,\n    resource: resource,\n    sort: sort,\n    storeKey: storeKey\n  }, React.createElement(ListView, __assign({}, rest, {\n    pagination: pagination\n  })));\n};\nvar defaultPagination = React.createElement(InfinitePagination, null);\nInfiniteList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  emptyWhileLoading: PropTypes.bool,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  sx: PropTypes.any,\n  title: TitlePropType,\n  // the props managed by react-admin\n  disableSyncWithLocation: PropTypes.bool,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string\n};\nInfiniteList.defaultProps = {\n  filter: {},\n  perPage: 10\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","InfiniteListBase","TitlePropType","InfinitePagination","ListView","InfiniteList","_a","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","_b","pagination","defaultPagination","perPage","queryOptions","resource","sort","storeKey","rest","debounce","propTypes","actions","oneOfType","bool","element","aside","children","node","isRequired","className","string","emptyWhileLoading","object","filters","arrayOf","number","shape","field","order","sx","any","title","hasCreate","hasEdit","hasList","hasShow","defaultProps"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\list\\InfiniteList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    InfiniteListBase,\n    InfiniteListControllerProps,\n    RaRecord,\n} from 'ra-core';\n\nimport { TitlePropType } from '../layout/Title';\nimport { InfinitePagination } from './pagination';\nimport { ListView, ListViewProps } from './ListView';\n\n/**\n * Infinite List page component\n *\n * The <InfiniteList> component renders the list layout (title, buttons, filters),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * It contains an <InfinitePagination> component, which fetches the next page of records\n * when the user scrolls to the bottom of the list.\n *\n * The <InfiniteList> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <InfiniteList\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const InfiniteList = <RecordType extends RaRecord = any>({\n    debounce,\n    disableAuthentication,\n    disableSyncWithLocation,\n    exporter,\n    filter,\n    filterDefaultValues,\n    pagination = defaultPagination,\n    perPage,\n    queryOptions,\n    resource,\n    sort,\n    storeKey,\n    ...rest\n}: InfiniteListProps<RecordType>): ReactElement => (\n    <InfiniteListBase<RecordType>\n        debounce={debounce}\n        disableAuthentication={disableAuthentication}\n        disableSyncWithLocation={disableSyncWithLocation}\n        exporter={exporter}\n        filter={filter}\n        filterDefaultValues={filterDefaultValues}\n        perPage={perPage}\n        queryOptions={queryOptions}\n        resource={resource}\n        sort={sort}\n        storeKey={storeKey}\n    >\n        <ListView<RecordType> {...rest} pagination={pagination} />\n    </InfiniteListBase>\n);\n\nconst defaultPagination = <InfinitePagination />;\n\nexport interface InfiniteListProps<RecordType extends RaRecord = any>\n    extends InfiniteListControllerProps<RecordType>,\n        ListViewProps {}\n\nInfiniteList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    emptyWhileLoading: PropTypes.bool,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    sx: PropTypes.any,\n    title: TitlePropType,\n    // the props managed by react-admin\n    disableSyncWithLocation: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    resource: PropTypes.string,\n};\n\nInfiniteList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}