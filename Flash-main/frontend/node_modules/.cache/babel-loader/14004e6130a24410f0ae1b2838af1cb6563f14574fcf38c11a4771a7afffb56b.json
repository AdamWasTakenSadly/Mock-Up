{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { isElement } from 'react-is';\nimport { styled } from '@mui/material/styles';\nimport { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemButton, ListItemIcon, ListItemSecondaryAction, ListItemText } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { RecordContextProvider, sanitizeListRestProps, useListContext, useResourceContext, useCreatePath, useTranslate } from 'ra-core';\nimport { SimpleListLoading } from './SimpleListLoading';\nimport { ListNoResults } from '../ListNoResults';\n/**\n * The <SimpleList> component renders a list of records as a Material UI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowStyle: function returning a style object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowStyle={postRowStyle}\n *          />\n *     </List>\n * );\n */\nexport var SimpleList = function (props) {\n  var className = props.className,\n    _a = props.empty,\n    empty = _a === void 0 ? DefaultEmpty : _a,\n    hasBulkActions = props.hasBulkActions,\n    leftAvatar = props.leftAvatar,\n    leftIcon = props.leftIcon,\n    _b = props.linkType,\n    linkType = _b === void 0 ? 'edit' : _b,\n    primaryText = props.primaryText,\n    rightAvatar = props.rightAvatar,\n    rightIcon = props.rightIcon,\n    secondaryText = props.secondaryText,\n    tertiaryText = props.tertiaryText,\n    rowStyle = props.rowStyle,\n    rest = __rest(props, [\"className\", \"empty\", \"hasBulkActions\", \"leftAvatar\", \"leftIcon\", \"linkType\", \"primaryText\", \"rightAvatar\", \"rightIcon\", \"secondaryText\", \"tertiaryText\", \"rowStyle\"]);\n  var _c = useListContext(props),\n    data = _c.data,\n    isLoading = _c.isLoading,\n    total = _c.total;\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n  if (isLoading === true) {\n    return React.createElement(SimpleListLoading, {\n      className: className,\n      hasLeftAvatarOrIcon: !!leftIcon || !!leftAvatar,\n      hasRightAvatarOrIcon: !!rightIcon || !!rightAvatar,\n      hasSecondaryText: !!secondaryText,\n      hasTertiaryText: !!tertiaryText\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the SimpleList the empty component.\n   */\n  if (data == null || data.length === 0 || total === 0) {\n    if (empty) {\n      return empty;\n    }\n    return null;\n  }\n  var renderAvatar = function (record, avatarCallback) {\n    var avatarValue = avatarCallback(record, record.id);\n    if (typeof avatarValue === 'string' && (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))) {\n      return React.createElement(Avatar, {\n        src: avatarValue\n      });\n    } else {\n      return React.createElement(Avatar, null, avatarValue);\n    }\n  };\n  return total == null && (data === null || data === void 0 ? void 0 : data.length) > 0 || total > 0 ? React.createElement(Root, __assign({\n    className: className\n  }, sanitizeListRestProps(rest)), data.map(function (record, rowIndex) {\n    return React.createElement(RecordContextProvider, {\n      key: record.id,\n      value: record\n    }, React.createElement(ListItem, {\n      disablePadding: true\n    }, React.createElement(LinkOrNot, {\n      linkType: linkType,\n      resource: resource,\n      id: record.id,\n      record: record,\n      style: rowStyle ? rowStyle(record, rowIndex) : undefined\n    }, leftIcon && React.createElement(ListItemIcon, null, leftIcon(record, record.id)), leftAvatar && React.createElement(ListItemAvatar, null, renderAvatar(record, leftAvatar)), React.createElement(ListItemText, {\n      primary: React.createElement(\"div\", null, typeof primaryText === 'string' ? translate(primaryText, __assign(__assign({}, record), {\n        _: primaryText\n      })) : isElement(primaryText) ? primaryText : primaryText(record, record.id), !!tertiaryText && (isValidElement(tertiaryText) ? tertiaryText : React.createElement(\"span\", {\n        className: SimpleListClasses.tertiary\n      }, typeof tertiaryText === 'string' ? translate(tertiaryText, __assign(__assign({}, record), {\n        _: tertiaryText\n      })) : isElement(tertiaryText) ? tertiaryText : tertiaryText(record, record.id)))),\n      secondary: !!secondaryText && (typeof secondaryText === 'string' ? translate(secondaryText, __assign(__assign({}, record), {\n        _: secondaryText\n      })) : isElement(secondaryText) ? secondaryText : secondaryText(record, record.id))\n    }), (rightAvatar || rightIcon) && React.createElement(ListItemSecondaryAction, null, rightAvatar && React.createElement(Avatar, null, renderAvatar(record, rightAvatar)), rightIcon && React.createElement(ListItemIcon, null, rightIcon(record, record.id))))));\n  })) : null;\n};\nSimpleList.propTypes = {\n  className: PropTypes.string,\n  leftAvatar: PropTypes.func,\n  leftIcon: PropTypes.func,\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  primaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]),\n  rightAvatar: PropTypes.func,\n  rightIcon: PropTypes.func,\n  secondaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]),\n  tertiaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]),\n  rowStyle: PropTypes.func\n};\nvar LinkOrNot = function (props) {\n  var classesOverride = props.classes,\n    linkType = props.linkType,\n    resource = props.resource,\n    id = props.id,\n    children = props.children,\n    record = props.record,\n    rest = __rest(props, [\"classes\", \"linkType\", \"resource\", \"id\", \"children\", \"record\"]);\n  var createPath = useCreatePath();\n  var type = typeof linkType === 'function' ? linkType(record, id) : linkType;\n  return type === false ? React.createElement(ListItemText\n  // @ts-ignore\n  , __assign({\n    // @ts-ignore\n    component: \"div\"\n  }, rest), children) :\n  // @ts-ignore\n  React.createElement(ListItemButton, __assign({\n    component: Link,\n    to: createPath({\n      resource: resource,\n      id: id,\n      type: type\n    })\n  }, rest), children);\n};\nvar PREFIX = 'RaSimpleList';\nexport var SimpleListClasses = {\n  tertiary: \"\".concat(PREFIX, \"-tertiary\")\n};\nvar Root = styled(List, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(SimpleListClasses.tertiary)] = {\n  float: 'right',\n  opacity: 0.541176\n}, _a));\nvar DefaultEmpty = React.createElement(ListNoResults, null);","map":{"version":3,"mappings":"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","names":["React","isElement","styled","isValidElement","PropTypes","Avatar","List","ListItem","ListItemAvatar","ListItemButton","ListItemIcon","ListItemSecondaryAction","ListItemText","Link","RecordContextProvider","sanitizeListRestProps","useListContext","useResourceContext","useCreatePath","useTranslate","SimpleListLoading","ListNoResults","SimpleList","props","_a","empty","DefaultEmpty","hasBulkActions","leftAvatar","leftIcon","_b","linkType","primaryText","rightAvatar","rightIcon","secondaryText","tertiaryText","rowStyle","rest","data","isLoading","total","resource","translate","className","hasLeftAvatarOrIcon","hasRightAvatarOrIcon","hasSecondaryText","hasTertiaryText","length","renderAvatar","record","avatarCallback","avatarValue","id","startsWith","src","Root","map","rowIndex","key","value","disablePadding","LinkOrNot","style","undefined","primary","_","SimpleListClasses","tertiary","secondary","propTypes","string","func","oneOfType","bool","element","classesOverride","children","createPath","type","component","to","PREFIX","name","overridesResolver","styles","root","float","opacity"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\list\\SimpleList\\SimpleList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isElement } from 'react-is';\nimport { styled } from '@mui/material/styles';\nimport { isValidElement, ReactNode, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Avatar,\n    List,\n    ListProps,\n    ListItem,\n    ListItemAvatar,\n    ListItemButton,\n    ListItemIcon,\n    ListItemProps,\n    ListItemSecondaryAction,\n    ListItemText,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport {\n    Identifier,\n    RaRecord,\n    RecordContextProvider,\n    sanitizeListRestProps,\n    useListContext,\n    useResourceContext,\n    useCreatePath,\n    useTranslate,\n} from 'ra-core';\n\nimport { SimpleListLoading } from './SimpleListLoading';\nimport { ListNoResults } from '../ListNoResults';\n\n/**\n * The <SimpleList> component renders a list of records as a Material UI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowStyle: function returning a style object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowStyle={postRowStyle}\n *          />\n *     </List>\n * );\n */\nexport const SimpleList = <RecordType extends RaRecord = any>(\n    props: SimpleListProps<RecordType>\n) => {\n    const {\n        className,\n        empty = DefaultEmpty,\n        hasBulkActions,\n        leftAvatar,\n        leftIcon,\n        linkType = 'edit',\n        primaryText,\n        rightAvatar,\n        rightIcon,\n        secondaryText,\n        tertiaryText,\n        rowStyle,\n        ...rest\n    } = props;\n    const { data, isLoading, total } = useListContext<RecordType>(props);\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n\n    if (isLoading === true) {\n        return (\n            <SimpleListLoading\n                className={className}\n                hasLeftAvatarOrIcon={!!leftIcon || !!leftAvatar}\n                hasRightAvatarOrIcon={!!rightIcon || !!rightAvatar}\n                hasSecondaryText={!!secondaryText}\n                hasTertiaryText={!!tertiaryText}\n            />\n        );\n    }\n\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the SimpleList the empty component.\n     */\n    if (data == null || data.length === 0 || total === 0) {\n        if (empty) {\n            return empty;\n        }\n\n        return null;\n    }\n    const renderAvatar = (\n        record: RecordType,\n        avatarCallback: FunctionToElement<RecordType>\n    ) => {\n        const avatarValue = avatarCallback(record, record.id);\n        if (\n            typeof avatarValue === 'string' &&\n            (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))\n        ) {\n            return <Avatar src={avatarValue} />;\n        } else {\n            return <Avatar>{avatarValue}</Avatar>;\n        }\n    };\n\n    return (total == null && data?.length > 0) || total > 0 ? (\n        <Root className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => (\n                <RecordContextProvider key={record.id} value={record}>\n                    <ListItem disablePadding>\n                        <LinkOrNot\n                            linkType={linkType}\n                            resource={resource}\n                            id={record.id}\n                            record={record}\n                            style={\n                                rowStyle\n                                    ? rowStyle(record, rowIndex)\n                                    : undefined\n                            }\n                        >\n                            {leftIcon && (\n                                <ListItemIcon>\n                                    {leftIcon(record, record.id)}\n                                </ListItemIcon>\n                            )}\n                            {leftAvatar && (\n                                <ListItemAvatar>\n                                    {renderAvatar(record, leftAvatar)}\n                                </ListItemAvatar>\n                            )}\n                            <ListItemText\n                                primary={\n                                    <div>\n                                        {typeof primaryText === 'string'\n                                            ? translate(primaryText, {\n                                                  ...record,\n                                                  _: primaryText,\n                                              })\n                                            : isElement(primaryText)\n                                            ? primaryText\n                                            : primaryText(record, record.id)}\n\n                                        {!!tertiaryText &&\n                                            (isValidElement(tertiaryText) ? (\n                                                tertiaryText\n                                            ) : (\n                                                <span\n                                                    className={\n                                                        SimpleListClasses.tertiary\n                                                    }\n                                                >\n                                                    {typeof tertiaryText ===\n                                                    'string'\n                                                        ? translate(\n                                                              tertiaryText,\n                                                              {\n                                                                  ...record,\n                                                                  _: tertiaryText,\n                                                              }\n                                                          )\n                                                        : isElement(\n                                                              tertiaryText\n                                                          )\n                                                        ? tertiaryText\n                                                        : tertiaryText(\n                                                              record,\n                                                              record.id\n                                                          )}\n                                                </span>\n                                            ))}\n                                    </div>\n                                }\n                                secondary={\n                                    !!secondaryText &&\n                                    (typeof secondaryText === 'string'\n                                        ? translate(secondaryText, {\n                                              ...record,\n                                              _: secondaryText,\n                                          })\n                                        : isElement(secondaryText)\n                                        ? secondaryText\n                                        : secondaryText(record, record.id))\n                                }\n                            />\n                            {(rightAvatar || rightIcon) && (\n                                <ListItemSecondaryAction>\n                                    {rightAvatar && (\n                                        <Avatar>\n                                            {renderAvatar(record, rightAvatar)}\n                                        </Avatar>\n                                    )}\n                                    {rightIcon && (\n                                        <ListItemIcon>\n                                            {rightIcon(record, record.id)}\n                                        </ListItemIcon>\n                                    )}\n                                </ListItemSecondaryAction>\n                            )}\n                        </LinkOrNot>\n                    </ListItem>\n                </RecordContextProvider>\n            ))}\n        </Root>\n    ) : null;\n};\n\nSimpleList.propTypes = {\n    className: PropTypes.string,\n    leftAvatar: PropTypes.func,\n    leftIcon: PropTypes.func,\n    linkType: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    primaryText: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.string,\n    ]),\n    rightAvatar: PropTypes.func,\n    rightIcon: PropTypes.func,\n    secondaryText: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.string,\n    ]),\n    tertiaryText: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.string,\n    ]),\n    rowStyle: PropTypes.func,\n};\n\nexport type FunctionToElement<RecordType extends RaRecord = any> = (\n    record: RecordType,\n    id: Identifier\n) => ReactNode;\n\nexport interface SimpleListProps<RecordType extends RaRecord = any>\n    extends Omit<ListProps, 'classes'> {\n    className?: string;\n    empty?: ReactElement;\n    hasBulkActions?: boolean;\n    leftAvatar?: FunctionToElement<RecordType>;\n    leftIcon?: FunctionToElement<RecordType>;\n    primaryText?: FunctionToElement<RecordType> | ReactElement | string;\n    linkType?: string | FunctionLinkType | false;\n    rightAvatar?: FunctionToElement<RecordType>;\n    rightIcon?: FunctionToElement<RecordType>;\n    secondaryText?: FunctionToElement<RecordType> | ReactElement | string;\n    tertiaryText?: FunctionToElement<RecordType> | ReactElement | string;\n    rowStyle?: (record: RecordType, index: number) => any;\n    // can be injected when using the component without context\n    resource?: string;\n    data?: RecordType[];\n    isLoading?: boolean;\n    isLoaded?: boolean;\n    total?: number;\n}\n\nconst LinkOrNot = (\n    props: LinkOrNotProps & Omit<ListItemProps, 'button' | 'component' | 'id'>\n) => {\n    const {\n        classes: classesOverride,\n        linkType,\n        resource,\n        id,\n        children,\n        record,\n        ...rest\n    } = props;\n    const createPath = useCreatePath();\n    const type =\n        typeof linkType === 'function' ? linkType(record, id) : linkType;\n\n    return type === false ? (\n        <ListItemText\n            // @ts-ignore\n            component=\"div\"\n            {...rest}\n        >\n            {children}\n        </ListItemText>\n    ) : (\n        // @ts-ignore\n        <ListItemButton\n            component={Link}\n            to={createPath({ resource, id, type })}\n            {...rest}\n        >\n            {children}\n        </ListItemButton>\n    );\n};\n\nexport type FunctionLinkType = (record: RaRecord, id: Identifier) => string;\n\nexport interface LinkOrNotProps {\n    linkType?: string | FunctionLinkType | false;\n    resource: string;\n    id: Identifier;\n    record: RaRecord;\n    children: ReactNode;\n}\n\nconst PREFIX = 'RaSimpleList';\n\nexport const SimpleListClasses = {\n    tertiary: `${PREFIX}-tertiary`,\n};\n\nconst Root = styled(List, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${SimpleListClasses.tertiary}`]: { float: 'right', opacity: 0.541176 },\n});\n\nconst DefaultEmpty = <ListNoResults />;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}