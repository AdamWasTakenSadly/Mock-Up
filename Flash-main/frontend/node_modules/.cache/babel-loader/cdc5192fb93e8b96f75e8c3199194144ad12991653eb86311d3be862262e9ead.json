{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useCallback, useMemo, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TablePagination, Toolbar, useMediaQuery } from '@mui/material';\nimport { useTranslate, useListPaginationContext, sanitizeListRestProps, ComponentPropType } from 'ra-core';\nimport { PaginationActions } from './PaginationActions';\nexport var Pagination = memo(function (props) {\n  var _a = props.rowsPerPageOptions,\n    rowsPerPageOptions = _a === void 0 ? DefaultRowsPerPageOptions : _a,\n    actions = props.actions,\n    _b = props.limit,\n    limit = _b === void 0 ? null : _b,\n    rest = __rest(props, [\"rowsPerPageOptions\", \"actions\", \"limit\"]);\n  var _c = useListPaginationContext(props),\n    isLoading = _c.isLoading,\n    hasNextPage = _c.hasNextPage,\n    page = _c.page,\n    perPage = _c.perPage,\n    total = _c.total,\n    setPage = _c.setPage,\n    setPerPage = _c.setPerPage;\n  var translate = useTranslate();\n  var isSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('md');\n  });\n  var totalPages = useMemo(function () {\n    return total != null ? Math.ceil(total / perPage) : undefined;\n  }, [perPage, total]);\n  /**\n   * Warning: Material UI's page is 0-based\n   */\n  var handlePageChange = useCallback(function (event, page) {\n    event && event.stopPropagation();\n    if (page < 0 || page > totalPages - 1) {\n      throw new Error(translate('ra.navigation.page_out_of_boundaries', {\n        page: page + 1\n      }));\n    }\n    setPage(page + 1);\n  }, [totalPages, setPage, translate]);\n  var handlePerPageChange = useCallback(function (event) {\n    setPerPage(event.target.value);\n  }, [setPerPage]);\n  var labelDisplayedRows = useCallback(function (_a) {\n    var from = _a.from,\n      to = _a.to,\n      count = _a.count;\n    return count === -1 && hasNextPage ? translate('ra.navigation.partial_page_range_info', {\n      offsetBegin: from,\n      offsetEnd: to,\n      _: \"%{from}-%{to} of more than %{to}\"\n    }) : translate('ra.navigation.page_range_info', {\n      offsetBegin: from,\n      offsetEnd: to,\n      total: count === -1 ? to : count,\n      _: \"%{from}-%{to} of %{count === -1 ? to : count}\"\n    });\n  }, [translate, hasNextPage]);\n  var labelItem = useCallback(function (type) {\n    return translate(\"ra.navigation.\".concat(type), {\n      _: \"Go to \".concat(type, \" page\")\n    });\n  }, [translate]);\n  if (isLoading) {\n    return React.createElement(Toolbar, {\n      variant: \"dense\"\n    });\n  }\n  // Avoid rendering TablePagination if \"page\" value is invalid\n  if (total === 0 || page < 1 || total != null && page > totalPages) {\n    if (limit != null && process.env.NODE_ENV === 'development') {\n      console.warn('The Pagination limit prop is deprecated. Empty state should be handled by the component displaying data (Datagrid, SimpleList).');\n    }\n    return null;\n  }\n  if (isSmall) {\n    return React.createElement(TablePagination, __assign({\n      count: total == null ? -1 : total,\n      rowsPerPage: perPage,\n      page: page - 1,\n      onPageChange: handlePageChange,\n      rowsPerPageOptions: emptyArray,\n      component: \"span\",\n      labelDisplayedRows: labelDisplayedRows\n    }, sanitizeListRestProps(rest)));\n  }\n  var ActionsComponent = actions ? actions // overridden by caller\n  : !isLoading && total != null ? PaginationActions // regular navigation\n  : undefined; // partial navigation (uses default TablePaginationActions)\n  return React.createElement(TablePagination, __assign({\n    count: total == null ? -1 : total,\n    rowsPerPage: perPage,\n    page: page - 1,\n    onPageChange: handlePageChange,\n    onRowsPerPageChange: handlePerPageChange,\n    // @ts-ignore\n    ActionsComponent: ActionsComponent,\n    nextIconButtonProps: {\n      disabled: !hasNextPage\n    },\n    component: \"span\",\n    labelRowsPerPage: translate('ra.navigation.page_rows_per_page'),\n    labelDisplayedRows: labelDisplayedRows,\n    getItemAriaLabel: labelItem,\n    rowsPerPageOptions: rowsPerPageOptions\n  }, sanitizeListRestProps(rest)));\n});\nPagination.propTypes = {\n  actions: ComponentPropType,\n  limit: PropTypes.element,\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number)\n};\nvar DefaultRowsPerPageOptions = [5, 10, 25, 50];\nvar emptyArray = [];","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,EAAEC,OAAO,EAAMC,IAAI,QAAsB,OAAO;AACpE,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,eAAe,EAEfC,OAAO,EACPC,aAAa,QAEV,eAAe;AACtB,SACIC,YAAY,EACZC,wBAAwB,EACxBC,qBAAqB,EACrBC,iBAAiB,QAEd,SAAS;AAEhB,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD,OAAO,IAAMC,UAAU,GAAwBV,IAAI,CAAC,eAAK;EAEjD,SAIAW,KAAK,mBAJyC;IAA9CC,kBAAkB,mBAAGC,yBAAyB;IAC9CC,OAAO,GAGPH,KAAK,QAHE;IACPI,KAEAJ,KAAK,MAFO;IAAZK,KAAK,mBAAG,IAAI;IACTC,IAAI,UACPN,KAAK,EALH,0CAKL,CADU;EAEL,SAQFL,wBAAwB,CAACK,KAAK,CAAC;IAP/BO,SAAS;IACTC,WAAW;IACXC,IAAI;IACJC,OAAO;IACPC,KAAK;IACLC,OAAO;IACPC,UAAU,gBACqB;EACnC,IAAMC,SAAS,GAAGpB,YAAY,EAAE;EAChC,IAAMqB,OAAO,GAAGtB,aAAa,CAAC,UAACuB,KAAY;IACvC,YAAK,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;EAA5B,CAA4B,CAC/B;EAED,IAAMC,UAAU,GAAG/B,OAAO,CAAC;IACvB,OAAOuB,KAAK,IAAI,IAAI,GAAGS,IAAI,CAACC,IAAI,CAACV,KAAK,GAAGD,OAAO,CAAC,GAAGY,SAAS;EACjE,CAAC,EAAE,CAACZ,OAAO,EAAEC,KAAK,CAAC,CAAC;EAEpB;;;EAGA,IAAMY,gBAAgB,GAAGpC,WAAW,CAChC,UAACqC,KAAK,EAAEf,IAAI;IACRe,KAAK,IAAIA,KAAK,CAACC,eAAe,EAAE;IAChC,IAAIhB,IAAI,GAAG,CAAC,IAAIA,IAAI,GAAGU,UAAU,GAAG,CAAC,EAAE;MACnC,MAAM,IAAIO,KAAK,CACXZ,SAAS,CAAC,sCAAsC,EAAE;QAC9CL,IAAI,EAAEA,IAAI,GAAG;OAChB,CAAC,CACL;;IAELG,OAAO,CAACH,IAAI,GAAG,CAAC,CAAC;EACrB,CAAC,EACD,CAACU,UAAU,EAAEP,OAAO,EAAEE,SAAS,CAAC,CACnC;EAED,IAAMa,mBAAmB,GAAGxC,WAAW,CACnC,eAAK;IACD0B,UAAU,CAACW,KAAK,CAACI,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC,EACD,CAAChB,UAAU,CAAC,CACf;EAED,IAAMiB,kBAAkB,GAAG3C,WAAW,CAClC,UAAC4C,EAAmB;QAAjBC,IAAI;MAAEC,EAAE;MAAEC,KAAK;IACd,YAAK,KAAK,CAAC,CAAC,IAAI1B,WAAW,GACrBM,SAAS,CAAC,uCAAuC,EAAE;MAC/CqB,WAAW,EAAEH,IAAI;MACjBI,SAAS,EAAEH,EAAE;MACbI,CAAC,EAAE;KACN,CAAC,GACFvB,SAAS,CAAC,+BAA+B,EAAE;MACvCqB,WAAW,EAAEH,IAAI;MACjBI,SAAS,EAAEH,EAAE;MACbtB,KAAK,EAAEuB,KAAK,KAAK,CAAC,CAAC,GAAGD,EAAE,GAAGC,KAAK;MAChCG,CAAC,EAAE;KACN,CAAC;EAXR,CAWQ,EACZ,CAACvB,SAAS,EAAEN,WAAW,CAAC,CAC3B;EAED,IAAM8B,SAAS,GAAGnD,WAAW,CACzB,cAAI;IAAI,gBAAS,CAAC,wBAAiBoD,IAAI,CAAE,EAAE;MAAEF,CAAC,EAAE,gBAASE,IAAI;IAAO,CAAE,CAAC;EAA/D,CAA+D,EACvE,CAACzB,SAAS,CAAC,CACd;EAED,IAAIP,SAAS,EAAE;IACX,OAAOrB,oBAACM,OAAO;MAACgD,OAAO,EAAC;IAAO,EAAG;;EAGtC;EACA,IAAI7B,KAAK,KAAK,CAAC,IAAIF,IAAI,GAAG,CAAC,IAAKE,KAAK,IAAI,IAAI,IAAIF,IAAI,GAAGU,UAAW,EAAE;IACjE,IAAId,KAAK,IAAI,IAAI,IAAIoC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MACzDC,OAAO,CAACC,IAAI,CACR,iIAAiI,CACpI;;IAEL,OAAO,IAAI;;EAGf,IAAI9B,OAAO,EAAE;IACT,OACI7B,oBAACK,eAAe;MACZ2C,KAAK,EAAEvB,KAAK,IAAI,IAAI,GAAG,CAAC,CAAC,GAAGA,KAAK;MACjCmC,WAAW,EAAEpC,OAAO;MACpBD,IAAI,EAAEA,IAAI,GAAG,CAAC;MACdsC,YAAY,EAAExB,gBAAgB;MAC9BtB,kBAAkB,EAAE+C,UAAU;MAC9BC,SAAS,EAAC,MAAM;MAChBnB,kBAAkB,EAAEA;IAAkB,GAClClC,qBAAqB,CAACU,IAAI,CAAC,EACjC;;EAIV,IAAM4C,gBAAgB,GAAG/C,OAAO,GAC1BA,OAAO,CAAC;EAAA,EACR,CAACI,SAAS,IAAII,KAAK,IAAI,IAAI,GAC3Bb,iBAAiB,CAAC;EAAA,EAClBwB,SAAS,CAAC,CAAC;EAEjB,OACIpC,oBAACK,eAAe;IACZ2C,KAAK,EAAEvB,KAAK,IAAI,IAAI,GAAG,CAAC,CAAC,GAAGA,KAAK;IACjCmC,WAAW,EAAEpC,OAAO;IACpBD,IAAI,EAAEA,IAAI,GAAG,CAAC;IACdsC,YAAY,EAAExB,gBAAgB;IAC9B4B,mBAAmB,EAAExB,mBAAmB;IACxC;IACAuB,gBAAgB,EAAEA,gBAAgB;IAClCE,mBAAmB,EAAE;MACjBC,QAAQ,EAAE,CAAC7C;KACd;IACDyC,SAAS,EAAC,MAAM;IAChBK,gBAAgB,EAAExC,SAAS,CAAC,kCAAkC,CAAC;IAC/DgB,kBAAkB,EAAEA,kBAAkB;IACtCyB,gBAAgB,EAAEjB,SAAS;IAC3BrC,kBAAkB,EAAEA;EAAkB,GAClCL,qBAAqB,CAACU,IAAI,CAAC,EACjC;AAEV,CAAC,CAAC;AAEFP,UAAU,CAACyD,SAAS,GAAG;EACnBrD,OAAO,EAAEN,iBAAiB;EAC1BQ,KAAK,EAAEf,SAAS,CAACmE,OAAO;EACxBxD,kBAAkB,EAAEX,SAAS,CAACoE,OAAO,CAACpE,SAAS,CAACqE,MAAM;CACzD;AAED,IAAMzD,yBAAyB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACjD,IAAM8C,UAAU,GAAG,EAAE","names":["React","useCallback","useMemo","memo","PropTypes","TablePagination","Toolbar","useMediaQuery","useTranslate","useListPaginationContext","sanitizeListRestProps","ComponentPropType","PaginationActions","Pagination","props","rowsPerPageOptions","DefaultRowsPerPageOptions","actions","_b","limit","rest","isLoading","hasNextPage","page","perPage","total","setPage","setPerPage","translate","isSmall","theme","breakpoints","down","totalPages","Math","ceil","undefined","handlePageChange","event","stopPropagation","Error","handlePerPageChange","target","value","labelDisplayedRows","_a","from","to","count","offsetBegin","offsetEnd","_","labelItem","type","variant","process","env","NODE_ENV","console","warn","rowsPerPage","onPageChange","emptyArray","component","ActionsComponent","onRowsPerPageChange","nextIconButtonProps","disabled","labelRowsPerPage","getItemAriaLabel","propTypes","element","arrayOf","number"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-ui-materialui\\src\\list\\pagination\\Pagination.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback, useMemo, FC, memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    TablePagination,\n    TablePaginationBaseProps,\n    Toolbar,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport {\n    useTranslate,\n    useListPaginationContext,\n    sanitizeListRestProps,\n    ComponentPropType,\n    ListPaginationContextValue,\n} from 'ra-core';\n\nimport { PaginationActions } from './PaginationActions';\n\nexport const Pagination: FC<PaginationProps> = memo(props => {\n    const {\n        rowsPerPageOptions = DefaultRowsPerPageOptions,\n        actions,\n        limit = null,\n        ...rest\n    } = props;\n    const {\n        isLoading,\n        hasNextPage,\n        page,\n        perPage,\n        total,\n        setPage,\n        setPerPage,\n    } = useListPaginationContext(props);\n    const translate = useTranslate();\n    const isSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('md')\n    );\n\n    const totalPages = useMemo(() => {\n        return total != null ? Math.ceil(total / perPage) : undefined;\n    }, [perPage, total]);\n\n    /**\n     * Warning: Material UI's page is 0-based\n     */\n    const handlePageChange = useCallback(\n        (event, page) => {\n            event && event.stopPropagation();\n            if (page < 0 || page > totalPages - 1) {\n                throw new Error(\n                    translate('ra.navigation.page_out_of_boundaries', {\n                        page: page + 1,\n                    })\n                );\n            }\n            setPage(page + 1);\n        },\n        [totalPages, setPage, translate]\n    );\n\n    const handlePerPageChange = useCallback(\n        event => {\n            setPerPage(event.target.value);\n        },\n        [setPerPage]\n    );\n\n    const labelDisplayedRows = useCallback(\n        ({ from, to, count }) =>\n            count === -1 && hasNextPage\n                ? translate('ra.navigation.partial_page_range_info', {\n                      offsetBegin: from,\n                      offsetEnd: to,\n                      _: `%{from}-%{to} of more than %{to}`,\n                  })\n                : translate('ra.navigation.page_range_info', {\n                      offsetBegin: from,\n                      offsetEnd: to,\n                      total: count === -1 ? to : count,\n                      _: `%{from}-%{to} of %{count === -1 ? to : count}`,\n                  }),\n        [translate, hasNextPage]\n    );\n\n    const labelItem = useCallback(\n        type => translate(`ra.navigation.${type}`, { _: `Go to ${type} page` }),\n        [translate]\n    );\n\n    if (isLoading) {\n        return <Toolbar variant=\"dense\" />;\n    }\n\n    // Avoid rendering TablePagination if \"page\" value is invalid\n    if (total === 0 || page < 1 || (total != null && page > totalPages)) {\n        if (limit != null && process.env.NODE_ENV === 'development') {\n            console.warn(\n                'The Pagination limit prop is deprecated. Empty state should be handled by the component displaying data (Datagrid, SimpleList).'\n            );\n        }\n        return null;\n    }\n\n    if (isSmall) {\n        return (\n            <TablePagination\n                count={total == null ? -1 : total}\n                rowsPerPage={perPage}\n                page={page - 1}\n                onPageChange={handlePageChange}\n                rowsPerPageOptions={emptyArray}\n                component=\"span\"\n                labelDisplayedRows={labelDisplayedRows}\n                {...sanitizeListRestProps(rest)}\n            />\n        );\n    }\n\n    const ActionsComponent = actions\n        ? actions // overridden by caller\n        : !isLoading && total != null\n        ? PaginationActions // regular navigation\n        : undefined; // partial navigation (uses default TablePaginationActions)\n\n    return (\n        <TablePagination\n            count={total == null ? -1 : total}\n            rowsPerPage={perPage}\n            page={page - 1}\n            onPageChange={handlePageChange}\n            onRowsPerPageChange={handlePerPageChange}\n            // @ts-ignore\n            ActionsComponent={ActionsComponent}\n            nextIconButtonProps={{\n                disabled: !hasNextPage,\n            }}\n            component=\"span\"\n            labelRowsPerPage={translate('ra.navigation.page_rows_per_page')}\n            labelDisplayedRows={labelDisplayedRows}\n            getItemAriaLabel={labelItem}\n            rowsPerPageOptions={rowsPerPageOptions}\n            {...sanitizeListRestProps(rest)}\n        />\n    );\n});\n\nPagination.propTypes = {\n    actions: ComponentPropType,\n    limit: PropTypes.element,\n    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst DefaultRowsPerPageOptions = [5, 10, 25, 50];\nconst emptyArray = [];\n\nexport interface PaginationProps\n    extends TablePaginationBaseProps,\n        Partial<ListPaginationContextValue> {\n    rowsPerPageOptions?: number[];\n    actions?: FC;\n    limit?: ReactElement;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}