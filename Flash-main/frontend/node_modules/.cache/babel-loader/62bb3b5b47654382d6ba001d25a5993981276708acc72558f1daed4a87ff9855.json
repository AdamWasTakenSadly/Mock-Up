{"ast":null,"code":"import * as React from 'react';\nimport { useMemo } from 'react';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { AdminRouter } from '../routing';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider, defaultDataProvider } from '../dataProvider';\nimport { StoreContextProvider, memoryStore } from '../store';\nimport { PreferencesEditorContextProvider } from '../preferences/PreferencesEditorContextProvider';\nimport { I18nContextProvider } from '../i18n';\nimport { ResourceDefinitionContextProvider } from './ResourceDefinitionContext';\nimport { NotificationContextProvider } from '../notification';\nvar defaultStore = memoryStore();\nexport var CoreAdminContext = function (props) {\n  var authProvider = props.authProvider,\n    basename = props.basename,\n    _a = props.dataProvider,\n    dataProvider = _a === void 0 ? defaultDataProvider : _a,\n    i18nProvider = props.i18nProvider,\n    _b = props.store,\n    store = _b === void 0 ? defaultStore : _b,\n    children = props.children,\n    history = props.history,\n    queryClient = props.queryClient;\n  if (!dataProvider) {\n    throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n  }\n  var finalQueryClient = useMemo(function () {\n    return queryClient || new QueryClient();\n  }, [queryClient]);\n  var finalAuthProvider = useMemo(function () {\n    return authProvider instanceof Function ? convertLegacyAuthProvider(authProvider) : authProvider;\n  }, [authProvider]);\n  var finalDataProvider = useMemo(function () {\n    return dataProvider instanceof Function ? convertLegacyDataProvider(dataProvider) : dataProvider;\n  }, [dataProvider]);\n  return React.createElement(AuthContext.Provider, {\n    value: finalAuthProvider\n  }, React.createElement(DataProviderContext.Provider, {\n    value: finalDataProvider\n  }, React.createElement(StoreContextProvider, {\n    value: store\n  }, React.createElement(PreferencesEditorContextProvider, null, React.createElement(QueryClientProvider, {\n    client: finalQueryClient\n  }, React.createElement(AdminRouter, {\n    history: history,\n    basename: basename\n  }, React.createElement(I18nContextProvider, {\n    value: i18nProvider\n  }, React.createElement(NotificationContextProvider, null, React.createElement(ResourceDefinitionContextProvider, null, children)))))))));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,aAAa;AAG9D,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,WAAW,EAAEC,yBAAyB,QAAQ,SAAS;AAChE,SACIC,mBAAmB,EACnBC,yBAAyB,EACzBC,mBAAmB,QAChB,iBAAiB;AACxB,SAASC,oBAAoB,EAASC,WAAW,QAAQ,UAAU;AACnE,SAASC,gCAAgC,QAAQ,iDAAiD;AAClG,SAASC,mBAAmB,QAAQ,SAAS;AAC7C,SAASC,iCAAiC,QAAQ,6BAA6B;AAC/E,SAASC,2BAA2B,QAAQ,iBAAiB;AAW7D,IAAMC,YAAY,GAAGL,WAAW,EAAE;AAkBlC,OAAO,IAAMM,gBAAgB,GAAG,UAACC,KAA4B;EAErD,gBAAY,GAQZA,KAAK,aARO;IACZC,QAAQ,GAORD,KAAK,SAPG;IACRE,KAMAF,KAAK,aAN6B;IAAlCG,YAAY,mBAAGZ,mBAAmB;IAClCa,YAAY,GAKZJ,KAAK,aALO;IACZK,KAIAL,KAAK,MAJe;IAApBM,KAAK,mBAAGR,YAAY;IACpBS,QAAQ,GAGRP,KAAK,SAHG;IACRQ,OAAO,GAEPR,KAAK,QAFE;IACPS,WAAW,GACXT,KAAK,YADM;EAGf,IAAI,CAACG,YAAY,EAAE;IACf,MAAM,IAAIO,KAAK,CAAC,yFACoC,CAAC;;EAGzD,IAAMC,gBAAgB,GAAG5B,OAAO,CAAC;IAAM,kBAAW,IAAI,IAAIE,WAAW,EAAE;EAAhC,CAAgC,EAAE,CACrEwB,WAAW,CACd,CAAC;EAEF,IAAMG,iBAAiB,GAAG7B,OAAO,CAC7B;IACI,mBAAY,YAAY8B,QAAQ,GAC1BzB,yBAAyB,CAAC0B,YAAY,CAAC,GACvCA,YAAY;EAFlB,CAEkB,EACtB,CAACA,YAAY,CAAC,CACjB;EAED,IAAMC,iBAAiB,GAAGhC,OAAO,CAC7B;IACI,mBAAY,YAAY8B,QAAQ,GAC1BvB,yBAAyB,CAACa,YAAY,CAAC,GACvCA,YAAY;EAFlB,CAEkB,EACtB,CAACA,YAAY,CAAC,CACjB;EAED,OACIrB,oBAACK,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAEL;EAAiB,GAC1C9B,oBAACO,mBAAmB,CAAC2B,QAAQ;IAACC,KAAK,EAAEF;EAAiB,GAClDjC,oBAACU,oBAAoB;IAACyB,KAAK,EAAEX;EAAK,GAC9BxB,oBAACY,gCAAgC,QAC7BZ,oBAACE,mBAAmB;IAACkC,MAAM,EAAEP;EAAgB,GACzC7B,oBAACI,WAAW;IAACsB,OAAO,EAAEA,OAAO;IAAEP,QAAQ,EAAEA;EAAQ,GAC7CnB,oBAACa,mBAAmB;IAACsB,KAAK,EAAEb;EAAY,GACpCtB,oBAACe,2BAA2B,QACxBf,oBAACc,iCAAiC,QAC7BW,QAAQ,CACuB,CACV,CACZ,CACZ,CACI,CACS,CAChB,CACI,CACZ;AAE/B,CAAC","names":["React","useMemo","QueryClientProvider","QueryClient","AdminRouter","AuthContext","convertLegacyAuthProvider","DataProviderContext","convertLegacyDataProvider","defaultDataProvider","StoreContextProvider","memoryStore","PreferencesEditorContextProvider","I18nContextProvider","ResourceDefinitionContextProvider","NotificationContextProvider","defaultStore","CoreAdminContext","props","basename","_a","dataProvider","i18nProvider","_b","store","children","history","queryClient","Error","finalQueryClient","finalAuthProvider","Function","authProvider","finalDataProvider","Provider","value","client"],"sources":["D:\\Work\\Mock-Up\\Flash-main\\frontend\\node_modules\\react-admin\\node_modules\\ra-core\\src\\core\\CoreAdminContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMemo } from 'react';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { History } from 'history';\n\nimport { AdminRouter } from '../routing';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport {\n    DataProviderContext,\n    convertLegacyDataProvider,\n    defaultDataProvider,\n} from '../dataProvider';\nimport { StoreContextProvider, Store, memoryStore } from '../store';\nimport { PreferencesEditorContextProvider } from '../preferences/PreferencesEditorContextProvider';\nimport { I18nContextProvider } from '../i18n';\nimport { ResourceDefinitionContextProvider } from './ResourceDefinitionContext';\nimport { NotificationContextProvider } from '../notification';\nimport {\n    AuthProvider,\n    LegacyAuthProvider,\n    I18nProvider,\n    DataProvider,\n    AdminChildren,\n    DashboardComponent,\n    LegacyDataProvider,\n} from '../types';\n\nconst defaultStore = memoryStore();\n\nexport interface CoreAdminContextProps {\n    authProvider?: AuthProvider | LegacyAuthProvider;\n    basename?: string;\n    children?: AdminChildren;\n    dashboard?: DashboardComponent;\n    dataProvider?: DataProvider | LegacyDataProvider;\n    store?: Store;\n    queryClient?: QueryClient;\n    /**\n     * @deprecated Wrap your Admin inside a Router to change the routing strategy\n     */\n    history?: History;\n    i18nProvider?: I18nProvider;\n    theme?: object;\n}\n\nexport const CoreAdminContext = (props: CoreAdminContextProps) => {\n    const {\n        authProvider,\n        basename,\n        dataProvider = defaultDataProvider,\n        i18nProvider,\n        store = defaultStore,\n        children,\n        history,\n        queryClient,\n    } = props;\n\n    if (!dataProvider) {\n        throw new Error(`Missing dataProvider prop.\nReact-admin requires a valid dataProvider function to work.`);\n    }\n\n    const finalQueryClient = useMemo(() => queryClient || new QueryClient(), [\n        queryClient,\n    ]);\n\n    const finalAuthProvider = useMemo(\n        () =>\n            authProvider instanceof Function\n                ? convertLegacyAuthProvider(authProvider)\n                : authProvider,\n        [authProvider]\n    );\n\n    const finalDataProvider = useMemo(\n        () =>\n            dataProvider instanceof Function\n                ? convertLegacyDataProvider(dataProvider)\n                : dataProvider,\n        [dataProvider]\n    );\n\n    return (\n        <AuthContext.Provider value={finalAuthProvider}>\n            <DataProviderContext.Provider value={finalDataProvider}>\n                <StoreContextProvider value={store}>\n                    <PreferencesEditorContextProvider>\n                        <QueryClientProvider client={finalQueryClient}>\n                            <AdminRouter history={history} basename={basename}>\n                                <I18nContextProvider value={i18nProvider}>\n                                    <NotificationContextProvider>\n                                        <ResourceDefinitionContextProvider>\n                                            {children}\n                                        </ResourceDefinitionContextProvider>\n                                    </NotificationContextProvider>\n                                </I18nContextProvider>\n                            </AdminRouter>\n                        </QueryClientProvider>\n                    </PreferencesEditorContextProvider>\n                </StoreContextProvider>\n            </DataProviderContext.Provider>\n        </AuthContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}